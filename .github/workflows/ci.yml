name: CI

on:
  push:
    branches: [ master ]
    tags: [ '*' ]
  pull_request:
    branches: [ master ]

env:
  MVN_ARGS: "--settings .github/maven-settings.xml"

jobs:
  build-test:
    runs-on: ubuntu-latest
    environment: ci
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Set Maven version
      run: ./build/setMavenVersion.sh

    - name: Build and test
      run: mvn verify -fae -DskipITs ${{ env.MVN_ARGS }}

  release-and-publish:
    needs: build-test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: ci
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 'lts/*'

    - name: Install dependencies
      run: |
        sudo apt-get update
        pip install bump2version
        # Install semantic-release and plugins locally
        npm install --save-dev \
          semantic-release@latest \
          @semantic-release/changelog@latest \
          @semantic-release/exec@latest \
          @semantic-release/git@latest \
          @semantic-release/github@latest

    - name: Release and Publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        GPG_KEYNAME: ${{ secrets.GPG_KEYNAME }}
      run: |
        # Setup GPG first
        ./build/setupSigning.sh
        
        # Try deployment first - this will fail if there are issues
        if mvn deploy ${{ env.MVN_ARGS }} -DskipTests -P central; then
          echo "Maven deployment successful"
          
          # Run semantic-release only after successful deployment
          npx semantic-release
          RELEASE_STATUS=$?
          
          if [ $RELEASE_STATUS -eq 0 ]; then
            echo "Release successful, publishing javadoc..."
            mvn clean javadoc:aggregate ${{ env.MVN_ARGS }}
            ./build/publishJavadoc.sh
            echo "Publishing completed successfully!"
          else
            echo "Semantic release failed with status: $RELEASE_STATUS"
            exit 1
          fi
        else
          echo "Maven deployment failed"
          exit 1
        fi