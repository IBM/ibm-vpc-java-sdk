/*
 * (C) Copyright IBM Corp. 2020, 2021, 2022.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package com.ibm.cloud.is.vpc.v1;

import com.ibm.cloud.is.vpc.v1.Vpc;
import com.ibm.cloud.is.vpc.v1.model.AddBareMetalServerNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.AddEndpointGatewayIpOptions;
import com.ibm.cloud.is.vpc.v1.model.AddInstanceNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.AddVpnGatewayConnectionLocalCidrOptions;
import com.ibm.cloud.is.vpc.v1.model.AddVpnGatewayConnectionPeerCidrOptions;
import com.ibm.cloud.is.vpc.v1.model.AddressPrefix;
import com.ibm.cloud.is.vpc.v1.model.AddressPrefixCollection;
import com.ibm.cloud.is.vpc.v1.model.AddressPrefixCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.AddressPrefixCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.AddressPrefixPatch;
import com.ibm.cloud.is.vpc.v1.model.BackupPoliciesPager;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicy;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyCollection;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJob;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobCollection;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobSource;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobSourceVolumeReference;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobStatusReason;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobsPager;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlan;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanCollection;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanDeletionTrigger;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanDeletionTriggerPatch;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanDeletionTriggerPrototype;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanPatch;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanPrototype;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanReference;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServer;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerBootTarget;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerBootTargetBareMetalServerDiskReference;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerCPU;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerCollection;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerConsoleAccessToken;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerDisk;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerDiskCollection;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerDiskPatch;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerDiskReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerInitialization;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerInitializationPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerInitializationUserAccount;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerInitializationUserAccountBareMetalServerInitializationHostUserAccount;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfaceByHiperSocket;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfaceByPCI;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfaceByVLAN;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfaceCollection;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfaceCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfaceCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfacePatch;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfacePrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByHiperSocketPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByPCIPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByVLANPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfacesPager;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerPatch;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerPrimaryNetworkInterfacePrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfile;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileBandwidth;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileBandwidthDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileBandwidthEnum;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileBandwidthFixed;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileBandwidthRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUArchitecture;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUCoreCount;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUCoreCountDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUCoreCountEnum;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUCoreCountFixed;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUCoreCountRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUSocketCount;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUSocketCountDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUSocketCountEnum;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUSocketCountFixed;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUSocketCountRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCollection;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDisk;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskQuantity;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskQuantityDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskQuantityEnum;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskQuantityFixed;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskQuantityRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskSize;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskSizeDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskSizeEnum;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskSizeFixed;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskSizeRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskSupportedInterfaces;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileMemory;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileMemoryDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileMemoryEnum;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileMemoryFixed;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileMemoryRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileOSArchitecture;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileReference;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileSupportedTrustedPlatformModuleModes;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfilesPager;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerStatusReason;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerTrustedPlatformModule;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServersPager;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingIdentity;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingIdentityCatalogOfferingByCRN;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingVersionIdentity;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingVersionIdentityCatalogOfferingVersionByCRN;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingVersionReference;
import com.ibm.cloud.is.vpc.v1.model.CertificateInstanceIdentity;
import com.ibm.cloud.is.vpc.v1.model.CertificateInstanceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.CertificateInstanceReference;
import com.ibm.cloud.is.vpc.v1.model.CheckVpnGatewayConnectionLocalCidrOptions;
import com.ibm.cloud.is.vpc.v1.model.CheckVpnGatewayConnectionPeerCidrOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateBackupPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateBackupPolicyPlanOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateBareMetalServerConsoleAccessTokenOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateBareMetalServerNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateDedicatedHostGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateDedicatedHostOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateEndpointGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateFlowLogCollectorOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateIkePolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateImageOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceActionOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceConsoleAccessTokenOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceGroupManagerActionOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceGroupManagerOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceGroupManagerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceTemplateOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceVolumeAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateIpsecPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateKeyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateLoadBalancerListenerOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateLoadBalancerListenerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateLoadBalancerListenerPolicyRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateLoadBalancerOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateLoadBalancerPoolMemberOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateLoadBalancerPoolOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateNetworkAclRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.CreatePlacementGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.CreatePublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSecurityGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSecurityGroupRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSecurityGroupTargetBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSnapshotOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSubnetOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSubnetReservedIpOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVolumeOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpcAddressPrefixOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpcOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpcRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpcRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpcRoutingTableRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpnGatewayConnectionOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpnGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpnServerOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpnServerRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHost;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostCollection;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostDisk;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostDiskCollection;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostDiskPatch;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroup;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupCollection;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupPatch;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupPrototypeDedicatedHostByZoneContext;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupReference;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupsPager;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostPatch;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfile;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileCollection;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileDisk;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileDiskInterface;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileDiskQuantity;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileDiskSize;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileDiskSupportedInterfaces;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileMemory;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileMemoryDependent;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileMemoryEnum;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileMemoryFixed;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileMemoryRange;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileReference;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileSocket;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileSocketDependent;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileSocketEnum;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileSocketFixed;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileSocketRange;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPU;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPUArchitecture;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPUDependent;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPUEnum;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPUFixed;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPURange;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfilesPager;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostPrototype;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostPrototypeDedicatedHostByGroup;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostPrototypeDedicatedHostByZone;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostReference;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostsPager;
import com.ibm.cloud.is.vpc.v1.model.DefaultNetworkACL;
import com.ibm.cloud.is.vpc.v1.model.DefaultRoutingTable;
import com.ibm.cloud.is.vpc.v1.model.DefaultSecurityGroup;
import com.ibm.cloud.is.vpc.v1.model.DeleteBackupPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteBackupPolicyPlanOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteBareMetalServerNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteDedicatedHostGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteDedicatedHostOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteEndpointGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteFlowLogCollectorOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteIkePolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteImageOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupLoadBalancerOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupManagerActionOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupManagerOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupManagerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupMembershipOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupMembershipsOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceTemplateOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceVolumeAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteIpsecPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteKeyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteLoadBalancerListenerOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteLoadBalancerListenerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteLoadBalancerListenerPolicyRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteLoadBalancerOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteLoadBalancerPoolMemberOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteLoadBalancerPoolOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteNetworkAclRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.DeletePlacementGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.DeletePublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSecurityGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSecurityGroupRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSecurityGroupTargetBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSnapshotOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSnapshotsOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSubnetOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSubnetReservedIpOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVolumeOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpcAddressPrefixOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpcOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpcRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpcRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpcRoutingTableRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpnGatewayConnectionOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpnGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpnServerClientOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpnServerOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpnServerRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.DisconnectVpnClientOptions;
import com.ibm.cloud.is.vpc.v1.model.EncryptionKeyIdentity;
import com.ibm.cloud.is.vpc.v1.model.EncryptionKeyIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.EncryptionKeyReference;
import com.ibm.cloud.is.vpc.v1.model.EndpointGateway;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayCollection;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayIpsPager;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayPatch;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayReservedIP;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayReservedIPReservedIPIdentity;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityById;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayReservedIPReservedIPPrototypeTargetContext;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTarget;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetPrototypeProviderCloudServiceIdentity;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetPrototypeProviderInfrastructureServiceIdentity;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetPrototypeProviderInfrastructureServiceIdentityProviderInfrastructureServiceIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetProviderCloudServiceReference;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetProviderInfrastructureServiceReference;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewaysPager;
import com.ibm.cloud.is.vpc.v1.model.FloatingIP;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPByTargetNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPByTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPByTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPCollection;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPPatch;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPPrototype;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPPrototypeFloatingIPByTarget;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPPrototypeFloatingIPByZone;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPReference;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTarget;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetNetworkInterfaceReference;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatch;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatchNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatchNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPublicGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPUnpaginatedCollection;
import com.ibm.cloud.is.vpc.v1.model.FloatingIpsPager;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollector;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorCollection;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorPatch;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTarget;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetInstanceReference;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeInstanceIdentity;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeInstanceIdentityInstanceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeInstanceIdentityInstanceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeInstanceIdentityInstanceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeSubnetIdentity;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeSubnetIdentitySubnetIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeSubnetIdentitySubnetIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeSubnetIdentitySubnetIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeVPCIdentity;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeVPCIdentityVPCIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeVPCIdentityVPCIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeVPCIdentityVPCIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetSubnetReference;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetVPCReference;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorsPager;
import com.ibm.cloud.is.vpc.v1.model.GenericResourceReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.GetBackupPolicyJobOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBackupPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBackupPolicyPlanOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerDiskOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerInitializationOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerNetworkInterfaceIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerProfileOptions;
import com.ibm.cloud.is.vpc.v1.model.GetDedicatedHostDiskOptions;
import com.ibm.cloud.is.vpc.v1.model.GetDedicatedHostGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.GetDedicatedHostOptions;
import com.ibm.cloud.is.vpc.v1.model.GetDedicatedHostProfileOptions;
import com.ibm.cloud.is.vpc.v1.model.GetEndpointGatewayIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetEndpointGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.GetFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetFlowLogCollectorOptions;
import com.ibm.cloud.is.vpc.v1.model.GetIkePolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetImageOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceDiskOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceGroupManagerActionOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceGroupManagerOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceGroupManagerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceGroupMembershipOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceInitializationOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceNetworkInterfaceIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceProfileOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceTemplateOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceVolumeAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.GetIpsecPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetKeyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerListenerOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerListenerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerListenerPolicyRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerPoolMemberOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerPoolOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerProfileOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerStatisticsOptions;
import com.ibm.cloud.is.vpc.v1.model.GetNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.GetNetworkAclRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.GetOperatingSystemOptions;
import com.ibm.cloud.is.vpc.v1.model.GetPlacementGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.GetPublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.GetRegionOptions;
import com.ibm.cloud.is.vpc.v1.model.GetRegionZoneOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSecurityGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSecurityGroupRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSecurityGroupTargetOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSnapshotOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSubnetNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSubnetOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSubnetPublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSubnetReservedIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSubnetRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVolumeOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVolumeProfileOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcAddressPrefixOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcDefaultNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcDefaultRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcDefaultSecurityGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcRoutingTableRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpnGatewayConnectionOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpnGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpnServerClientConfigurationOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpnServerClientOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpnServerOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpnServerRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.IKEPolicy;
import com.ibm.cloud.is.vpc.v1.model.IKEPolicyCollection;
import com.ibm.cloud.is.vpc.v1.model.IKEPolicyCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.IKEPolicyCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.IKEPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.IKEPolicyReference;
import com.ibm.cloud.is.vpc.v1.model.IKEPolicyReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.IP;
import com.ibm.cloud.is.vpc.v1.model.IPsecPolicy;
import com.ibm.cloud.is.vpc.v1.model.IPsecPolicyCollection;
import com.ibm.cloud.is.vpc.v1.model.IPsecPolicyCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.IPsecPolicyCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.IPsecPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.IPsecPolicyReference;
import com.ibm.cloud.is.vpc.v1.model.IPsecPolicyReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.IkePoliciesPager;
import com.ibm.cloud.is.vpc.v1.model.Image;
import com.ibm.cloud.is.vpc.v1.model.ImageCatalogOffering;
import com.ibm.cloud.is.vpc.v1.model.ImageCollection;
import com.ibm.cloud.is.vpc.v1.model.ImageCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.ImageCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.ImageFile;
import com.ibm.cloud.is.vpc.v1.model.ImageFileChecksums;
import com.ibm.cloud.is.vpc.v1.model.ImageFilePrototype;
import com.ibm.cloud.is.vpc.v1.model.ImageIdentity;
import com.ibm.cloud.is.vpc.v1.model.ImageIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.ImageIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ImageIdentityById;
import com.ibm.cloud.is.vpc.v1.model.ImagePatch;
import com.ibm.cloud.is.vpc.v1.model.ImagePrototype;
import com.ibm.cloud.is.vpc.v1.model.ImagePrototypeImageByFile;
import com.ibm.cloud.is.vpc.v1.model.ImagePrototypeImageBySourceVolume;
import com.ibm.cloud.is.vpc.v1.model.ImageReference;
import com.ibm.cloud.is.vpc.v1.model.ImageReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.ImageStatusReason;
import com.ibm.cloud.is.vpc.v1.model.ImagesPager;
import com.ibm.cloud.is.vpc.v1.model.Instance;
import com.ibm.cloud.is.vpc.v1.model.InstanceAction;
import com.ibm.cloud.is.vpc.v1.model.InstanceAvailabilityPolicy;
import com.ibm.cloud.is.vpc.v1.model.InstanceAvailabilityPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceAvailabilityPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceCatalogOffering;
import com.ibm.cloud.is.vpc.v1.model.InstanceCatalogOfferingPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceCatalogOfferingPrototypeCatalogOfferingByOffering;
import com.ibm.cloud.is.vpc.v1.model.InstanceCatalogOfferingPrototypeCatalogOfferingByVersion;
import com.ibm.cloud.is.vpc.v1.model.InstanceCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.InstanceCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.InstanceConsoleAccessToken;
import com.ibm.cloud.is.vpc.v1.model.InstanceDefaultTrustedProfilePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceDisk;
import com.ibm.cloud.is.vpc.v1.model.InstanceDiskCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceDiskPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceDiskReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceDiskReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.InstanceGPU;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroup;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerAction;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionGroupPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionManagerPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByCronSpec;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByCronSpecByGroup;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByCronSpecByManager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAt;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByManager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionScheduledAction;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionScheduledActionGroupTarget;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionScheduledActionManagerTarget;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionsCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionsCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionsCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionsPager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerAutoScale;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPoliciesPager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicy;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyInstanceGroupManagerTargetPolicy;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPrototypeInstanceGroupManagerScheduledPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduled;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionGroup;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionGroupPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionManager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionManagerAutoScale;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionManagerPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionManagerPrototypeAutoScalePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionManagerPrototypeAutoScalePrototypeByHref;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionManagerPrototypeAutoScalePrototypeById;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagersPager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupMembership;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupMembershipCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupMembershipCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupMembershipCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupMembershipPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupMembershipsPager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupsPager;
import com.ibm.cloud.is.vpc.v1.model.InstanceInitialization;
import com.ibm.cloud.is.vpc.v1.model.InstanceInitializationDefaultTrustedProfile;
import com.ibm.cloud.is.vpc.v1.model.InstanceInitializationPassword;
import com.ibm.cloud.is.vpc.v1.model.InstanceMetadataService;
import com.ibm.cloud.is.vpc.v1.model.InstanceMetadataServicePatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceMetadataServicePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkInterfaceIpsPager;
import com.ibm.cloud.is.vpc.v1.model.InstancePatch;
import com.ibm.cloud.is.vpc.v1.model.InstancePatchProfile;
import com.ibm.cloud.is.vpc.v1.model.InstancePatchProfileInstanceProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstancePatchProfileInstanceProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTarget;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetDedicatedHostGroupReference;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetDedicatedHostReference;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatch;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostGroupIdentityDedicatedHostGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostGroupIdentityDedicatedHostGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostGroupIdentityDedicatedHostGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostIdentityDedicatedHostIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostIdentityDedicatedHostIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostIdentityDedicatedHostIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPlacementGroupReference;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypePlacementGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypePlacementGroupIdentityPlacementGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypePlacementGroupIdentityPlacementGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypePlacementGroupIdentityPlacementGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfile;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileBandwidth;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileBandwidthDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileBandwidthEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileBandwidthFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileBandwidthRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDisk;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskQuantity;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskQuantityDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskQuantityEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskQuantityFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskQuantityRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskSize;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskSizeDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskSizeEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskSizeFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskSizeRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskSupportedInterfaces;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPU;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUManufacturer;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUMemory;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUMemoryDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUMemoryEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUMemoryFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUMemoryRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUModel;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPURange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileMemory;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileMemoryDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileMemoryEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileMemoryFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileMemoryRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileOSArchitecture;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfilePortSpeed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfilePortSpeedDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfilePortSpeedFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPU;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPUArchitecture;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPUDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPUEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPUFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPURange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVolumeBandwidth;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVolumeBandwidthDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVolumeBandwidthEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVolumeBandwidthFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVolumeBandwidthRange;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceByCatalogOffering;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceByImage;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceBySourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceBySourceTemplate;
import com.ibm.cloud.is.vpc.v1.model.InstanceReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.InstanceStatusReason;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplate;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateInstanceByCatalogOffering;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateInstanceByImage;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateInstanceBySourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceByCatalogOffering;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceByImage;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceBySourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceBySourceTemplate;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.InstanceVCPU;
import com.ibm.cloud.is.vpc.v1.model.InstancesPager;
import com.ibm.cloud.is.vpc.v1.model.IpsecPoliciesPager;
import com.ibm.cloud.is.vpc.v1.model.Key;
import com.ibm.cloud.is.vpc.v1.model.KeyCollection;
import com.ibm.cloud.is.vpc.v1.model.KeyCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.KeyCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.KeyIdentity;
import com.ibm.cloud.is.vpc.v1.model.KeyIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.KeyIdentityByFingerprint;
import com.ibm.cloud.is.vpc.v1.model.KeyIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.KeyIdentityById;
import com.ibm.cloud.is.vpc.v1.model.KeyPatch;
import com.ibm.cloud.is.vpc.v1.model.KeyReference;
import com.ibm.cloud.is.vpc.v1.model.KeyReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.KeysPager;
import com.ibm.cloud.is.vpc.v1.model.LegacyCloudObjectStorageBucketIdentity;
import com.ibm.cloud.is.vpc.v1.model.LegacyCloudObjectStorageBucketIdentityCloudObjectStorageBucketIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.LegacyCloudObjectStorageBucketReference;
import com.ibm.cloud.is.vpc.v1.model.LifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.ListBackupPoliciesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBackupPolicyJobsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBackupPolicyPlansOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServerDisksOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServerNetworkInterfaceFloatingIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServerNetworkInterfaceIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServerNetworkInterfacesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServerProfilesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServersOptions;
import com.ibm.cloud.is.vpc.v1.model.ListDedicatedHostDisksOptions;
import com.ibm.cloud.is.vpc.v1.model.ListDedicatedHostGroupsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListDedicatedHostProfilesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListDedicatedHostsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListEndpointGatewayIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListEndpointGatewaysOptions;
import com.ibm.cloud.is.vpc.v1.model.ListFloatingIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListFlowLogCollectorsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListIkePoliciesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListIkePolicyConnectionsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListImagesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceDisksOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceGroupManagerActionsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceGroupManagerPoliciesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceGroupManagersOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceGroupMembershipsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceGroupsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceNetworkInterfaceFloatingIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceNetworkInterfaceIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceNetworkInterfacesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceProfilesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceTemplatesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceVolumeAttachmentsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstancesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListIpsecPoliciesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListIpsecPolicyConnectionsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListKeysOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancerListenerPoliciesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancerListenerPolicyRulesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancerListenersOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancerPoolMembersOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancerPoolsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancerProfilesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancersOptions;
import com.ibm.cloud.is.vpc.v1.model.ListNetworkAclRulesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListNetworkAclsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListOperatingSystemsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListPlacementGroupsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListPublicGatewaysOptions;
import com.ibm.cloud.is.vpc.v1.model.ListRegionZonesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListRegionsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSecurityGroupRulesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSecurityGroupTargetsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSecurityGroupsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSnapshotsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSubnetReservedIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSubnetsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVolumeProfilesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVolumesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpcAddressPrefixesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpcRoutesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpcRoutingTableRoutesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpcRoutingTablesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpcsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnGatewayConnectionLocalCidrsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnGatewayConnectionPeerCidrsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnGatewayConnectionsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnGatewaysOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnServerClientsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnServerRoutesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnServersOptions;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancer;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListener;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerHTTPSRedirect;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerHTTPSRedirectPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerHTTPSRedirectPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicy;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyRule;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyRuleCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyRulePatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyRulePrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyRuleReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyRuleReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTarget;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetLoadBalancerListenerHTTPSRedirect;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetLoadBalancerListenerPolicyRedirectURL;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetLoadBalancerPoolReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerListenerHTTPSRedirectPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerListenerPolicyRedirectURLPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerListenerHTTPSRedirectPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerListenerPolicyRedirectURLPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPrototypeLoadBalancerContext;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerLogging;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerLoggingDatapath;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPool;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolHealthMonitor;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolHealthMonitorPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolHealthMonitorPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMember;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTarget;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetIP;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetInstanceReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeIP;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeInstanceIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolSessionPersistence;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolSessionPersistencePatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolSessionPersistencePrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPrivateIpsItem;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfile;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileLoggingSupported;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileRouteModeSupported;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileRouteModeSupportedDependent;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileRouteModeSupportedFixed;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileSecurityGroupsSupported;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileSecurityGroupsSupportedDependent;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileSecurityGroupsSupportedFixed;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileUDPSupported;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileUDPSupportedDependent;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileUDPSupportedFixed;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfilesPager;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerStatistics;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancersPager;
import com.ibm.cloud.is.vpc.v1.model.NetworkACL;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLCollection;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLIdentity;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLIdentityById;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLPatch;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLPrototypeNetworkACLByRules;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLPrototypeNetworkACLBySourceNetworkACL;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLReference;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRule;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleBeforePatch;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleBeforePatchNetworkACLRuleIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleBeforePatchNetworkACLRuleIdentityById;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleBeforePrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityById;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleCollection;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleItem;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleItemNetworkACLRuleProtocolAll;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleItemNetworkACLRuleProtocolICMP;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleNetworkACLRuleProtocolAll;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleNetworkACLRuleProtocolICMP;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleNetworkACLRuleProtocolTCPUDP;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePatch;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLContext;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAllPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMPPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDPPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLRuleProtocolAllPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLRuleProtocolICMPPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDPPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleReference;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.NetworkAclRulesPager;
import com.ibm.cloud.is.vpc.v1.model.NetworkAclsPager;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceBareMetalServerContextReference;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceBareMetalServerContextReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceIPPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceIPPrototypeReservedIPIdentity;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceIPPrototypeReservedIPIdentityReservedIPIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceIPPrototypeReservedIPIdentityReservedIPIdentityById;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceInstanceContextReference;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceInstanceContextReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfacePatch;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfacePrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceReferenceTargetContextDeleted;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceUnpaginatedCollection;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystem;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemCollection;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemIdentity;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemReference;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemsPager;
import com.ibm.cloud.is.vpc.v1.model.PlacementGroup;
import com.ibm.cloud.is.vpc.v1.model.PlacementGroupCollection;
import com.ibm.cloud.is.vpc.v1.model.PlacementGroupCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.PlacementGroupCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.PlacementGroupPatch;
import com.ibm.cloud.is.vpc.v1.model.PlacementGroupReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.PlacementGroupsPager;
import com.ibm.cloud.is.vpc.v1.model.PublicGateway;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayCollection;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototype;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototypeFloatingIPIdentity;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByAddress;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityById;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototypeFloatingIPPrototypeTargetContext;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIp;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayIdentity;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayIdentityPublicGatewayIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayIdentityPublicGatewayIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayIdentityPublicGatewayIdentityById;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayPatch;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewaysPager;
import com.ibm.cloud.is.vpc.v1.model.Region;
import com.ibm.cloud.is.vpc.v1.model.RegionCollection;
import com.ibm.cloud.is.vpc.v1.model.RegionReference;
import com.ibm.cloud.is.vpc.v1.model.RemoveBareMetalServerNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.RemoveEndpointGatewayIpOptions;
import com.ibm.cloud.is.vpc.v1.model.RemoveInstanceNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.RemoveVpnGatewayConnectionLocalCidrOptions;
import com.ibm.cloud.is.vpc.v1.model.RemoveVpnGatewayConnectionPeerCidrOptions;
import com.ibm.cloud.is.vpc.v1.model.ReplaceLoadBalancerPoolMembersOptions;
import com.ibm.cloud.is.vpc.v1.model.ReplaceSubnetNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.ReplaceSubnetRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.ReservedIP;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollection;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollectionEndpointGatewayContext;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollectionEndpointGatewayContextFirst;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollectionEndpointGatewayContextNext;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollectionNetworkInterfaceContext;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollectionNetworkInterfaceContextFirst;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollectionNetworkInterfaceContextNext;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPPatch;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPReference;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTarget;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetEndpointGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetGenericResourceReference;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetLoadBalancerReference;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetNetworkInterfaceReferenceTargetContext;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototypeEndpointGatewayIdentity;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityById;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetVPNGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetVPNServerReference;
import com.ibm.cloud.is.vpc.v1.model.ResourceFilter;
import com.ibm.cloud.is.vpc.v1.model.ResourceGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.ResourceGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.ResourceGroupReference;
import com.ibm.cloud.is.vpc.v1.model.RestartBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.Route;
import com.ibm.cloud.is.vpc.v1.model.RouteCollection;
import com.ibm.cloud.is.vpc.v1.model.RouteCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.RouteCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.RouteCreator;
import com.ibm.cloud.is.vpc.v1.model.RouteCreatorVPNGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.RouteCreatorVPNServerReference;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHop;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopIP;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopVPNGatewayConnectionReference;
import com.ibm.cloud.is.vpc.v1.model.RoutePatch;
import com.ibm.cloud.is.vpc.v1.model.RoutePrototype;
import com.ibm.cloud.is.vpc.v1.model.RoutePrototypeNextHop;
import com.ibm.cloud.is.vpc.v1.model.RoutePrototypeNextHopRouteNextHopPrototypeRouteNextHopIP;
import com.ibm.cloud.is.vpc.v1.model.RoutePrototypeNextHopRouteNextHopPrototypeVPNGatewayConnectionIdentity;
import com.ibm.cloud.is.vpc.v1.model.RoutePrototypeNextHopRouteNextHopPrototypeVPNGatewayConnectionIdentityRouteNextHopPrototypeVPNGatewayConnectionIdentityVPNGatewayConnectionIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.RoutePrototypeNextHopRouteNextHopPrototypeVPNGatewayConnectionIdentityRouteNextHopPrototypeVPNGatewayConnectionIdentityVPNGatewayConnectionIdentityById;
import com.ibm.cloud.is.vpc.v1.model.RouteReference;
import com.ibm.cloud.is.vpc.v1.model.RouteReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.RoutingTable;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableCollection;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableIdentity;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableIdentityById;
import com.ibm.cloud.is.vpc.v1.model.RoutingTablePatch;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableReference;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroup;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupCollection;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupPatch;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRule;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleCollection;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRulePatch;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRulePrototype;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemote;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemoteCIDR;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemoteIP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatch;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatchCIDR;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatchIP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatchSecurityGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatchSecurityGroupIdentitySecurityGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatchSecurityGroupIdentitySecurityGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatchSecurityGroupIdentitySecurityGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototype;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototypeCIDR;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototypeIP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototypeSecurityGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototypeSecurityGroupIdentitySecurityGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototypeSecurityGroupIdentitySecurityGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototypeSecurityGroupIdentitySecurityGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemoteSecurityGroupReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleSecurityGroupRuleProtocolAll;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleSecurityGroupRuleProtocolICMP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetCollection;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetReferenceEndpointGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetReferenceLoadBalancerReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetReferenceNetworkInterfaceReferenceTargetContext;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetReferenceVPNServerReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetsPager;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupsPager;
import com.ibm.cloud.is.vpc.v1.model.SetSubnetPublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.Snapshot;
import com.ibm.cloud.is.vpc.v1.model.SnapshotCollection;
import com.ibm.cloud.is.vpc.v1.model.SnapshotCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.SnapshotCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.SnapshotIdentity;
import com.ibm.cloud.is.vpc.v1.model.SnapshotIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.SnapshotIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.SnapshotIdentityById;
import com.ibm.cloud.is.vpc.v1.model.SnapshotPatch;
import com.ibm.cloud.is.vpc.v1.model.SnapshotPrototype;
import com.ibm.cloud.is.vpc.v1.model.SnapshotPrototypeSnapshotBySourceVolume;
import com.ibm.cloud.is.vpc.v1.model.SnapshotReference;
import com.ibm.cloud.is.vpc.v1.model.SnapshotReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.SnapshotsPager;
import com.ibm.cloud.is.vpc.v1.model.StartBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.StopBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.Subnet;
import com.ibm.cloud.is.vpc.v1.model.SubnetCollection;
import com.ibm.cloud.is.vpc.v1.model.SubnetCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.SubnetCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.SubnetIdentity;
import com.ibm.cloud.is.vpc.v1.model.SubnetIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.SubnetIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.SubnetIdentityById;
import com.ibm.cloud.is.vpc.v1.model.SubnetPatch;
import com.ibm.cloud.is.vpc.v1.model.SubnetPrototype;
import com.ibm.cloud.is.vpc.v1.model.SubnetPrototypeSubnetByCIDR;
import com.ibm.cloud.is.vpc.v1.model.SubnetPrototypeSubnetByTotalCount;
import com.ibm.cloud.is.vpc.v1.model.SubnetPublicGatewayPatch;
import com.ibm.cloud.is.vpc.v1.model.SubnetPublicGatewayPatchPublicGatewayIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.SubnetPublicGatewayPatchPublicGatewayIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.SubnetPublicGatewayPatchPublicGatewayIdentityById;
import com.ibm.cloud.is.vpc.v1.model.SubnetReference;
import com.ibm.cloud.is.vpc.v1.model.SubnetReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.SubnetReservedIpsPager;
import com.ibm.cloud.is.vpc.v1.model.SubnetsPager;
import com.ibm.cloud.is.vpc.v1.model.TrustedProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.TrustedProfileIdentityTrustedProfileByCRN;
import com.ibm.cloud.is.vpc.v1.model.TrustedProfileIdentityTrustedProfileById;
import com.ibm.cloud.is.vpc.v1.model.TrustedProfileReference;
import com.ibm.cloud.is.vpc.v1.model.UnsetSubnetPublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateBackupPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateBackupPolicyPlanOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateBareMetalServerDiskOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateBareMetalServerNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateDedicatedHostDiskOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateDedicatedHostGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateDedicatedHostOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateEndpointGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateFlowLogCollectorOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateIkePolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateImageOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceDiskOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceGroupManagerActionOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceGroupManagerOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceGroupManagerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceGroupMembershipOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceTemplateOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceVolumeAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateIpsecPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateKeyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateLoadBalancerListenerOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateLoadBalancerListenerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateLoadBalancerListenerPolicyRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateLoadBalancerOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateLoadBalancerPoolMemberOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateLoadBalancerPoolOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateNetworkAclRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdatePlacementGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdatePublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateSecurityGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateSecurityGroupRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateSnapshotOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateSubnetOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateSubnetReservedIpOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVolumeOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpcAddressPrefixOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpcOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpcRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpcRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpcRoutingTableRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpnGatewayConnectionOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpnGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpnServerOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpnServerRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.VCPU;
import com.ibm.cloud.is.vpc.v1.model.VPC;
import com.ibm.cloud.is.vpc.v1.model.VPCCSESourceIP;
import com.ibm.cloud.is.vpc.v1.model.VPCCollection;
import com.ibm.cloud.is.vpc.v1.model.VPCCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.VPCCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.VPCIdentity;
import com.ibm.cloud.is.vpc.v1.model.VPCIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.VPCIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VPCIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VPCPatch;
import com.ibm.cloud.is.vpc.v1.model.VPCReference;
import com.ibm.cloud.is.vpc.v1.model.VPCReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.VPNGateway;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayCollection;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnection;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionCollection;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionDPD;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionDPDPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionDPDPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEPolicyPatchIKEPolicyIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEPolicyPatchIKEPolicyIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEPolicyPrototypeIKEPolicyIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEPolicyPrototypeIKEPolicyIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIPsecPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIPsecPolicyPatchIPsecPolicyIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIPsecPolicyPatchIPsecPolicyIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIPsecPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIPsecPolicyPrototypeIPsecPolicyIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIPsecPolicyPrototypeIPsecPolicyIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionLocalCIDRs;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPatchVPNGatewayConnectionStaticRouteModePatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPeerCIDRs;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPolicyMode;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPrototypeVPNGatewayConnectionPolicyModePrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionReference;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionStaticRouteMode;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionStaticRouteModeTunnel;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayMember;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayPolicyMode;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayPrototypeVPNGatewayPolicyModePrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayPrototypeVPNGatewayRouteModePrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayRouteMode;
import com.ibm.cloud.is.vpc.v1.model.VPNServer;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthentication;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationByCertificate;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationByUsername;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationByUsernameIdProvider;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationByUsernameIdProviderByIAM;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationPrototypeVPNServerAuthenticationByCertificatePrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNServerClient;
import com.ibm.cloud.is.vpc.v1.model.VPNServerClientCollection;
import com.ibm.cloud.is.vpc.v1.model.VPNServerClientCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.VPNServerClientCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.VPNServerCollection;
import com.ibm.cloud.is.vpc.v1.model.VPNServerCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.VPNServerCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.VPNServerPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNServerReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.VPNServerRoute;
import com.ibm.cloud.is.vpc.v1.model.VPNServerRouteCollection;
import com.ibm.cloud.is.vpc.v1.model.VPNServerRouteCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.VPNServerRouteCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.VPNServerRoutePatch;
import com.ibm.cloud.is.vpc.v1.model.Volume;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachment;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentCollection;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentDevice;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPatch;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototype;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeInstanceByImageContext;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeInstanceBySourceSnapshotContext;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolume;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumeIdentity;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumePrototypeInstanceContext;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeBySourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentReferenceInstanceContext;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentReferenceInstanceContextDeleted;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentReferenceVolumeContext;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentReferenceVolumeContextDeleted;
import com.ibm.cloud.is.vpc.v1.model.VolumeCollection;
import com.ibm.cloud.is.vpc.v1.model.VolumeCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.VolumeCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.VolumeHealthReason;
import com.ibm.cloud.is.vpc.v1.model.VolumeIdentity;
import com.ibm.cloud.is.vpc.v1.model.VolumeIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.VolumeIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VolumeIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VolumePatch;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfile;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileCollection;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileCollectionFirst;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileCollectionNext;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileReference;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfilesPager;
import com.ibm.cloud.is.vpc.v1.model.VolumePrototype;
import com.ibm.cloud.is.vpc.v1.model.VolumePrototypeInstanceByImageContext;
import com.ibm.cloud.is.vpc.v1.model.VolumePrototypeInstanceBySourceSnapshotContext;
import com.ibm.cloud.is.vpc.v1.model.VolumePrototypeVolumeByCapacity;
import com.ibm.cloud.is.vpc.v1.model.VolumePrototypeVolumeBySourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.VolumeReference;
import com.ibm.cloud.is.vpc.v1.model.VolumeReferenceDeleted;
import com.ibm.cloud.is.vpc.v1.model.VolumeStatusReason;
import com.ibm.cloud.is.vpc.v1.model.VolumesPager;
import com.ibm.cloud.is.vpc.v1.model.VpcAddressPrefixesPager;
import com.ibm.cloud.is.vpc.v1.model.VpcRoutesPager;
import com.ibm.cloud.is.vpc.v1.model.VpcRoutingTableRoutesPager;
import com.ibm.cloud.is.vpc.v1.model.VpcRoutingTablesPager;
import com.ibm.cloud.is.vpc.v1.model.VpcsPager;
import com.ibm.cloud.is.vpc.v1.model.VpnGatewaysPager;
import com.ibm.cloud.is.vpc.v1.model.VpnServerClientsPager;
import com.ibm.cloud.is.vpc.v1.model.VpnServerRoutesPager;
import com.ibm.cloud.is.vpc.v1.model.VpnServersPager;
import com.ibm.cloud.is.vpc.v1.model.Zone;
import com.ibm.cloud.is.vpc.v1.model.ZoneCollection;
import com.ibm.cloud.is.vpc.v1.model.ZoneIdentity;
import com.ibm.cloud.is.vpc.v1.model.ZoneIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ZoneIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.ZoneReference;
import com.ibm.cloud.is.vpc.v1.utils.TestUtilities;
import com.ibm.cloud.sdk.core.http.Response;
import com.ibm.cloud.sdk.core.security.Authenticator;
import com.ibm.cloud.sdk.core.security.NoAuthAuthenticator;
import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;
import com.ibm.cloud.sdk.core.util.DateUtils;
import com.ibm.cloud.sdk.core.util.EnvironmentUtils;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.testng.PowerMockTestCase;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import static org.testng.Assert.*;

/**
 * Unit test class for the Vpc service.
 */
@PrepareForTest({ EnvironmentUtils.class })
@PowerMockIgnore({"javax.net.ssl.*", "org.mockito.*"})
public class VpcTest extends PowerMockTestCase {

  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();
  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();
  String version = "2022-09-13";

  protected MockWebServer server;
  protected Vpc vpcService;

  // Construct the service with a null authenticator (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testConstructorWithNullAuthenticator() throws Throwable {
    final String serviceName = "testService";
    // Set mock values for global params
    new Vpc(serviceName, null);
  }


  // Test the getter for the version global parameter
  @Test
  public void testGetVersion() throws Throwable {
    assertEquals(vpcService.getVersion(), version);
  }

  // Test the listVpcs operation with a valid options model parameter
  @Test
  public void testListVpcsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132, \"vpcs\": [{\"classic_access\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"cse_source_ips\": [{\"ip\": {\"address\": \"192.168.3.4\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"default_network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"default_routing_table\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"default_security_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpc\", \"status\": \"available\"}]}";
    String listVpcsPath = "/vpcs";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpcsOptions model
    ListVpcsOptions listVpcsOptionsModel = new ListVpcsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .classicAccess(true)
      .build();

    // Invoke listVpcs() with a valid options model and verify the result
    Response<VPCCollection> response = vpcService.listVpcs(listVpcsOptionsModel).execute();
    assertNotNull(response);
    VPCCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpcsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(Boolean.valueOf(query.get("classic_access")), Boolean.valueOf(true));
  }

  // Test the listVpcs operation with and without retries enabled
  @Test
  public void testListVpcsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpcsWOptions();

    vpcService.disableRetries();
    testListVpcsWOptions();
  }

  // Test the listVpcs operation using the VpcsPager.getNext() method
  @Test
  public void testListVpcsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"vpcs\":[{\"classic_access\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"cse_source_ips\":[{\"ip\":{\"address\":\"192.168.3.4\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"default_network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"default_routing_table\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"default_security_group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpc\",\"status\":\"available\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"vpcs\":[{\"classic_access\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"cse_source_ips\":[{\"ip\":{\"address\":\"192.168.3.4\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"default_network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"default_routing_table\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"default_security_group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpc\",\"status\":\"available\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcsOptions listVpcsOptions = new ListVpcsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .classicAccess(true)
      .build();

    List<VPC> allResults = new ArrayList<>();
    VpcsPager pager = new VpcsPager(vpcService, listVpcsOptions);
    while (pager.hasNext()) {
      List<VPC> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpcs operation using the VpcsPager.getAll() method
  @Test
  public void testListVpcsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"vpcs\":[{\"classic_access\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"cse_source_ips\":[{\"ip\":{\"address\":\"192.168.3.4\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"default_network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"default_routing_table\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"default_security_group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpc\",\"status\":\"available\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"vpcs\":[{\"classic_access\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"cse_source_ips\":[{\"ip\":{\"address\":\"192.168.3.4\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"default_network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"default_routing_table\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"default_security_group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpc\",\"status\":\"available\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcsOptions listVpcsOptions = new ListVpcsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .classicAccess(true)
      .build();

    VpcsPager pager = new VpcsPager(vpcService, listVpcsOptions);
    List<VPC> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpc operation with a valid options model parameter
  @Test
  public void testCreateVpcWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"classic_access\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"cse_source_ips\": [{\"ip\": {\"address\": \"192.168.3.4\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"default_network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"default_routing_table\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"default_security_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpc\", \"status\": \"available\"}";
    String createVpcPath = "/vpcs";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateVpcOptions model
    CreateVpcOptions createVpcOptionsModel = new CreateVpcOptions.Builder()
      .addressPrefixManagement("manual")
      .classicAccess(false)
      .name("my-vpc")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createVpc() with a valid options model and verify the result
    Response<VPC> response = vpcService.createVpc(createVpcOptionsModel).execute();
    assertNotNull(response);
    VPC responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpcPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpc operation with and without retries enabled
  @Test
  public void testCreateVpcWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpcWOptions();

    vpcService.disableRetries();
    testCreateVpcWOptions();
  }

  // Test the deleteVpc operation with a valid options model parameter
  @Test
  public void testDeleteVpcWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpcPath = "/vpcs/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpcOptions model
    DeleteVpcOptions deleteVpcOptionsModel = new DeleteVpcOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteVpc() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpc(deleteVpcOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpcPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpc operation with and without retries enabled
  @Test
  public void testDeleteVpcWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpcWOptions();

    vpcService.disableRetries();
    testDeleteVpcWOptions();
  }

  // Test the deleteVpc operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpcNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpc(null).execute();
  }

  // Test the getVpc operation with a valid options model parameter
  @Test
  public void testGetVpcWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"classic_access\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"cse_source_ips\": [{\"ip\": {\"address\": \"192.168.3.4\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"default_network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"default_routing_table\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"default_security_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpc\", \"status\": \"available\"}";
    String getVpcPath = "/vpcs/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcOptions model
    GetVpcOptions getVpcOptionsModel = new GetVpcOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpc() with a valid options model and verify the result
    Response<VPC> response = vpcService.getVpc(getVpcOptionsModel).execute();
    assertNotNull(response);
    VPC responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpc operation with and without retries enabled
  @Test
  public void testGetVpcWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcWOptions();

    vpcService.disableRetries();
    testGetVpcWOptions();
  }

  // Test the getVpc operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpc(null).execute();
  }

  // Test the updateVpc operation with a valid options model parameter
  @Test
  public void testUpdateVpcWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"classic_access\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"cse_source_ips\": [{\"ip\": {\"address\": \"192.168.3.4\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"default_network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"default_routing_table\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"default_security_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpc\", \"status\": \"available\"}";
    String updateVpcPath = "/vpcs/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VPCPatch model
    VPCPatch vpcPatchModel = new VPCPatch.Builder()
      .name("my-vpc")
      .build();
    Map<String, Object> vpcPatchModelAsPatch = vpcPatchModel.asPatch();

    // Construct an instance of the UpdateVpcOptions model
    UpdateVpcOptions updateVpcOptionsModel = new UpdateVpcOptions.Builder()
      .id("testString")
      .vpcPatch(vpcPatchModelAsPatch)
      .build();

    // Invoke updateVpc() with a valid options model and verify the result
    Response<VPC> response = vpcService.updateVpc(updateVpcOptionsModel).execute();
    assertNotNull(response);
    VPC responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpcPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpc operation with and without retries enabled
  @Test
  public void testUpdateVpcWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpcWOptions();

    vpcService.disableRetries();
    testUpdateVpcWOptions();
  }

  // Test the updateVpc operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpcNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpc(null).execute();
  }

  // Test the getVpcDefaultNetworkAcl operation with a valid options model parameter
  @Test
  public void testGetVpcDefaultNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"mnemonic-ersatz-eatery-mythology\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-rule-1\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-rule-1\", \"source\": \"192.168.3.0/24\", \"destination_port_max\": 22, \"destination_port_min\": 22, \"protocol\": \"udp\", \"source_port_max\": 65535, \"source_port_min\": 49152}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getVpcDefaultNetworkAclPath = "/vpcs/testString/default_network_acl";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcDefaultNetworkAclOptions model
    GetVpcDefaultNetworkAclOptions getVpcDefaultNetworkAclOptionsModel = new GetVpcDefaultNetworkAclOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpcDefaultNetworkAcl() with a valid options model and verify the result
    Response<DefaultNetworkACL> response = vpcService.getVpcDefaultNetworkAcl(getVpcDefaultNetworkAclOptionsModel).execute();
    assertNotNull(response);
    DefaultNetworkACL responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcDefaultNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcDefaultNetworkAcl operation with and without retries enabled
  @Test
  public void testGetVpcDefaultNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcDefaultNetworkAclWOptions();

    vpcService.disableRetries();
    testGetVpcDefaultNetworkAclWOptions();
  }

  // Test the getVpcDefaultNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcDefaultNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcDefaultNetworkAcl(null).execute();
  }

  // Test the getVpcDefaultRoutingTable operation with a valid options model parameter
  @Test
  public void testGetVpcDefaultRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_routes_from\": [{\"resource_type\": \"vpn_gateway\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"milled-easy-equine-machines\", \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-route-1\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}";
    String getVpcDefaultRoutingTablePath = "/vpcs/testString/default_routing_table";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcDefaultRoutingTableOptions model
    GetVpcDefaultRoutingTableOptions getVpcDefaultRoutingTableOptionsModel = new GetVpcDefaultRoutingTableOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpcDefaultRoutingTable() with a valid options model and verify the result
    Response<DefaultRoutingTable> response = vpcService.getVpcDefaultRoutingTable(getVpcDefaultRoutingTableOptionsModel).execute();
    assertNotNull(response);
    DefaultRoutingTable responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcDefaultRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcDefaultRoutingTable operation with and without retries enabled
  @Test
  public void testGetVpcDefaultRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcDefaultRoutingTableWOptions();

    vpcService.disableRetries();
    testGetVpcDefaultRoutingTableWOptions();
  }

  // Test the getVpcDefaultRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcDefaultRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcDefaultRoutingTable(null).execute();
  }

  // Test the getVpcDefaultSecurityGroup operation with a valid options model parameter
  @Test
  public void testGetVpcDefaultSecurityGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"observant-chip-emphatic-engraver\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}], \"targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"resource_type\": \"network_interface\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getVpcDefaultSecurityGroupPath = "/vpcs/testString/default_security_group";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcDefaultSecurityGroupOptions model
    GetVpcDefaultSecurityGroupOptions getVpcDefaultSecurityGroupOptionsModel = new GetVpcDefaultSecurityGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpcDefaultSecurityGroup() with a valid options model and verify the result
    Response<DefaultSecurityGroup> response = vpcService.getVpcDefaultSecurityGroup(getVpcDefaultSecurityGroupOptionsModel).execute();
    assertNotNull(response);
    DefaultSecurityGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcDefaultSecurityGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcDefaultSecurityGroup operation with and without retries enabled
  @Test
  public void testGetVpcDefaultSecurityGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcDefaultSecurityGroupWOptions();

    vpcService.disableRetries();
    testGetVpcDefaultSecurityGroupWOptions();
  }

  // Test the getVpcDefaultSecurityGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcDefaultSecurityGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcDefaultSecurityGroup(null).execute();
  }

  // Test the listVpcAddressPrefixes operation with a valid options model parameter
  @Test
  public void testListVpcAddressPrefixesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address_prefixes\": [{\"cidr\": \"192.168.3.0/24\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"has_subnets\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"is_default\": false, \"name\": \"my-address-prefix-1\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listVpcAddressPrefixesPath = "/vpcs/testString/address_prefixes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpcAddressPrefixesOptions model
    ListVpcAddressPrefixesOptions listVpcAddressPrefixesOptionsModel = new ListVpcAddressPrefixesOptions.Builder()
      .vpcId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listVpcAddressPrefixes() with a valid options model and verify the result
    Response<AddressPrefixCollection> response = vpcService.listVpcAddressPrefixes(listVpcAddressPrefixesOptionsModel).execute();
    assertNotNull(response);
    AddressPrefixCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpcAddressPrefixesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listVpcAddressPrefixes operation with and without retries enabled
  @Test
  public void testListVpcAddressPrefixesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpcAddressPrefixesWOptions();

    vpcService.disableRetries();
    testListVpcAddressPrefixesWOptions();
  }

  // Test the listVpcAddressPrefixes operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpcAddressPrefixesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpcAddressPrefixes(null).execute();
  }

  // Test the listVpcAddressPrefixes operation using the VpcAddressPrefixesPager.getNext() method
  @Test
  public void testListVpcAddressPrefixesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"address_prefixes\":[{\"cidr\":\"192.168.3.0/24\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"has_subnets\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"is_default\":false,\"name\":\"my-address-prefix-1\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"address_prefixes\":[{\"cidr\":\"192.168.3.0/24\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"has_subnets\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"is_default\":false,\"name\":\"my-address-prefix-1\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcAddressPrefixesOptions listVpcAddressPrefixesOptions = new ListVpcAddressPrefixesOptions.Builder()
      .vpcId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<AddressPrefix> allResults = new ArrayList<>();
    VpcAddressPrefixesPager pager = new VpcAddressPrefixesPager(vpcService, listVpcAddressPrefixesOptions);
    while (pager.hasNext()) {
      List<AddressPrefix> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpcAddressPrefixes operation using the VpcAddressPrefixesPager.getAll() method
  @Test
  public void testListVpcAddressPrefixesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"address_prefixes\":[{\"cidr\":\"192.168.3.0/24\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"has_subnets\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"is_default\":false,\"name\":\"my-address-prefix-1\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"address_prefixes\":[{\"cidr\":\"192.168.3.0/24\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"has_subnets\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"is_default\":false,\"name\":\"my-address-prefix-1\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcAddressPrefixesOptions listVpcAddressPrefixesOptions = new ListVpcAddressPrefixesOptions.Builder()
      .vpcId("testString")
      .limit(Long.valueOf("10"))
      .build();

    VpcAddressPrefixesPager pager = new VpcAddressPrefixesPager(vpcService, listVpcAddressPrefixesOptions);
    List<AddressPrefix> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpcAddressPrefix operation with a valid options model parameter
  @Test
  public void testCreateVpcAddressPrefixWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"cidr\": \"192.168.3.0/24\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"has_subnets\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"is_default\": false, \"name\": \"my-address-prefix-1\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createVpcAddressPrefixPath = "/vpcs/testString/address_prefixes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the CreateVpcAddressPrefixOptions model
    CreateVpcAddressPrefixOptions createVpcAddressPrefixOptionsModel = new CreateVpcAddressPrefixOptions.Builder()
      .vpcId("testString")
      .cidr("10.0.0.0/24")
      .zone(zoneIdentityModel)
      .isDefault(true)
      .name("my-address-prefix-1")
      .build();

    // Invoke createVpcAddressPrefix() with a valid options model and verify the result
    Response<AddressPrefix> response = vpcService.createVpcAddressPrefix(createVpcAddressPrefixOptionsModel).execute();
    assertNotNull(response);
    AddressPrefix responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpcAddressPrefixPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpcAddressPrefix operation with and without retries enabled
  @Test
  public void testCreateVpcAddressPrefixWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpcAddressPrefixWOptions();

    vpcService.disableRetries();
    testCreateVpcAddressPrefixWOptions();
  }

  // Test the createVpcAddressPrefix operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpcAddressPrefixNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpcAddressPrefix(null).execute();
  }

  // Test the deleteVpcAddressPrefix operation with a valid options model parameter
  @Test
  public void testDeleteVpcAddressPrefixWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpcAddressPrefixPath = "/vpcs/testString/address_prefixes/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpcAddressPrefixOptions model
    DeleteVpcAddressPrefixOptions deleteVpcAddressPrefixOptionsModel = new DeleteVpcAddressPrefixOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpcAddressPrefix() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpcAddressPrefix(deleteVpcAddressPrefixOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpcAddressPrefixPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpcAddressPrefix operation with and without retries enabled
  @Test
  public void testDeleteVpcAddressPrefixWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpcAddressPrefixWOptions();

    vpcService.disableRetries();
    testDeleteVpcAddressPrefixWOptions();
  }

  // Test the deleteVpcAddressPrefix operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpcAddressPrefixNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpcAddressPrefix(null).execute();
  }

  // Test the getVpcAddressPrefix operation with a valid options model parameter
  @Test
  public void testGetVpcAddressPrefixWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"cidr\": \"192.168.3.0/24\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"has_subnets\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"is_default\": false, \"name\": \"my-address-prefix-1\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getVpcAddressPrefixPath = "/vpcs/testString/address_prefixes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcAddressPrefixOptions model
    GetVpcAddressPrefixOptions getVpcAddressPrefixOptionsModel = new GetVpcAddressPrefixOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .build();

    // Invoke getVpcAddressPrefix() with a valid options model and verify the result
    Response<AddressPrefix> response = vpcService.getVpcAddressPrefix(getVpcAddressPrefixOptionsModel).execute();
    assertNotNull(response);
    AddressPrefix responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcAddressPrefixPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcAddressPrefix operation with and without retries enabled
  @Test
  public void testGetVpcAddressPrefixWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcAddressPrefixWOptions();

    vpcService.disableRetries();
    testGetVpcAddressPrefixWOptions();
  }

  // Test the getVpcAddressPrefix operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcAddressPrefixNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcAddressPrefix(null).execute();
  }

  // Test the updateVpcAddressPrefix operation with a valid options model parameter
  @Test
  public void testUpdateVpcAddressPrefixWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"cidr\": \"192.168.3.0/24\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"has_subnets\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"is_default\": false, \"name\": \"my-address-prefix-1\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateVpcAddressPrefixPath = "/vpcs/testString/address_prefixes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the AddressPrefixPatch model
    AddressPrefixPatch addressPrefixPatchModel = new AddressPrefixPatch.Builder()
      .isDefault(false)
      .name("my-address-prefix-1")
      .build();
    Map<String, Object> addressPrefixPatchModelAsPatch = addressPrefixPatchModel.asPatch();

    // Construct an instance of the UpdateVpcAddressPrefixOptions model
    UpdateVpcAddressPrefixOptions updateVpcAddressPrefixOptionsModel = new UpdateVpcAddressPrefixOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .addressPrefixPatch(addressPrefixPatchModelAsPatch)
      .build();

    // Invoke updateVpcAddressPrefix() with a valid options model and verify the result
    Response<AddressPrefix> response = vpcService.updateVpcAddressPrefix(updateVpcAddressPrefixOptionsModel).execute();
    assertNotNull(response);
    AddressPrefix responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpcAddressPrefixPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpcAddressPrefix operation with and without retries enabled
  @Test
  public void testUpdateVpcAddressPrefixWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpcAddressPrefixWOptions();

    vpcService.disableRetries();
    testUpdateVpcAddressPrefixWOptions();
  }

  // Test the updateVpcAddressPrefix operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpcAddressPrefixNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpcAddressPrefix(null).execute();
  }

  // Test the listVpcRoutes operation with a valid options model parameter
  @Test
  public void testListVpcRoutesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?start=a5e812a2-62c0-4555-86a5-907106760c56&limit=20\"}, \"routes\": [{\"action\": \"delegate\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_state\": \"stable\", \"name\": \"my-route-1\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"total_count\": 132}";
    String listVpcRoutesPath = "/vpcs/testString/routes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpcRoutesOptions model
    ListVpcRoutesOptions listVpcRoutesOptionsModel = new ListVpcRoutesOptions.Builder()
      .vpcId("testString")
      .zoneName("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listVpcRoutes() with a valid options model and verify the result
    Response<RouteCollection> response = vpcService.listVpcRoutes(listVpcRoutesOptionsModel).execute();
    assertNotNull(response);
    RouteCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpcRoutesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("zone.name"), "testString");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listVpcRoutes operation with and without retries enabled
  @Test
  public void testListVpcRoutesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpcRoutesWOptions();

    vpcService.disableRetries();
    testListVpcRoutesWOptions();
  }

  // Test the listVpcRoutes operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpcRoutesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpcRoutes(null).execute();
  }

  // Test the listVpcRoutes operation using the VpcRoutesPager.getNext() method
  @Test
  public void testListVpcRoutesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routes\":[{\"action\":\"delegate\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_state\":\"stable\",\"name\":\"my-route-1\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routes\":[{\"action\":\"delegate\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_state\":\"stable\",\"name\":\"my-route-1\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcRoutesOptions listVpcRoutesOptions = new ListVpcRoutesOptions.Builder()
      .vpcId("testString")
      .zoneName("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<Route> allResults = new ArrayList<>();
    VpcRoutesPager pager = new VpcRoutesPager(vpcService, listVpcRoutesOptions);
    while (pager.hasNext()) {
      List<Route> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpcRoutes operation using the VpcRoutesPager.getAll() method
  @Test
  public void testListVpcRoutesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routes\":[{\"action\":\"delegate\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_state\":\"stable\",\"name\":\"my-route-1\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routes\":[{\"action\":\"delegate\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_state\":\"stable\",\"name\":\"my-route-1\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcRoutesOptions listVpcRoutesOptions = new ListVpcRoutesOptions.Builder()
      .vpcId("testString")
      .zoneName("testString")
      .limit(Long.valueOf("10"))
      .build();

    VpcRoutesPager pager = new VpcRoutesPager(vpcService, listVpcRoutesOptions);
    List<Route> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpcRoute operation with a valid options model parameter
  @Test
  public void testCreateVpcRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"delegate\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_state\": \"stable\", \"name\": \"my-route-1\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createVpcRoutePath = "/vpcs/testString/routes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the RoutePrototypeNextHopRouteNextHopPrototypeRouteNextHopIP model
    RoutePrototypeNextHopRouteNextHopPrototypeRouteNextHopIP routePrototypeNextHopModel = new RoutePrototypeNextHopRouteNextHopPrototypeRouteNextHopIP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the CreateVpcRouteOptions model
    CreateVpcRouteOptions createVpcRouteOptionsModel = new CreateVpcRouteOptions.Builder()
      .vpcId("testString")
      .destination("192.168.3.0/24")
      .zone(zoneIdentityModel)
      .action("deliver")
      .name("my-route-1")
      .nextHop(routePrototypeNextHopModel)
      .build();

    // Invoke createVpcRoute() with a valid options model and verify the result
    Response<Route> response = vpcService.createVpcRoute(createVpcRouteOptionsModel).execute();
    assertNotNull(response);
    Route responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpcRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpcRoute operation with and without retries enabled
  @Test
  public void testCreateVpcRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpcRouteWOptions();

    vpcService.disableRetries();
    testCreateVpcRouteWOptions();
  }

  // Test the createVpcRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpcRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpcRoute(null).execute();
  }

  // Test the deleteVpcRoute operation with a valid options model parameter
  @Test
  public void testDeleteVpcRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpcRoutePath = "/vpcs/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpcRouteOptions model
    DeleteVpcRouteOptions deleteVpcRouteOptionsModel = new DeleteVpcRouteOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpcRoute() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpcRoute(deleteVpcRouteOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpcRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpcRoute operation with and without retries enabled
  @Test
  public void testDeleteVpcRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpcRouteWOptions();

    vpcService.disableRetries();
    testDeleteVpcRouteWOptions();
  }

  // Test the deleteVpcRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpcRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpcRoute(null).execute();
  }

  // Test the getVpcRoute operation with a valid options model parameter
  @Test
  public void testGetVpcRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"delegate\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_state\": \"stable\", \"name\": \"my-route-1\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getVpcRoutePath = "/vpcs/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcRouteOptions model
    GetVpcRouteOptions getVpcRouteOptionsModel = new GetVpcRouteOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .build();

    // Invoke getVpcRoute() with a valid options model and verify the result
    Response<Route> response = vpcService.getVpcRoute(getVpcRouteOptionsModel).execute();
    assertNotNull(response);
    Route responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcRoute operation with and without retries enabled
  @Test
  public void testGetVpcRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcRouteWOptions();

    vpcService.disableRetries();
    testGetVpcRouteWOptions();
  }

  // Test the getVpcRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcRoute(null).execute();
  }

  // Test the updateVpcRoute operation with a valid options model parameter
  @Test
  public void testUpdateVpcRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"delegate\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_state\": \"stable\", \"name\": \"my-route-1\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateVpcRoutePath = "/vpcs/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the RoutePatch model
    RoutePatch routePatchModel = new RoutePatch.Builder()
      .name("my-route-2")
      .build();
    Map<String, Object> routePatchModelAsPatch = routePatchModel.asPatch();

    // Construct an instance of the UpdateVpcRouteOptions model
    UpdateVpcRouteOptions updateVpcRouteOptionsModel = new UpdateVpcRouteOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .routePatch(routePatchModelAsPatch)
      .build();

    // Invoke updateVpcRoute() with a valid options model and verify the result
    Response<Route> response = vpcService.updateVpcRoute(updateVpcRouteOptionsModel).execute();
    assertNotNull(response);
    Route responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpcRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpcRoute operation with and without retries enabled
  @Test
  public void testUpdateVpcRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpcRouteWOptions();

    vpcService.disableRetries();
    testUpdateVpcRouteWOptions();
  }

  // Test the updateVpcRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpcRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpcRoute(null).execute();
  }

  // Test the listVpcRoutingTables operation with a valid options model parameter
  @Test
  public void testListVpcRoutingTablesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"routing_tables\": [{\"accept_routes_from\": [{\"resource_type\": \"vpn_gateway\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-route-1\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}], \"total_count\": 132}";
    String listVpcRoutingTablesPath = "/vpcs/testString/routing_tables";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpcRoutingTablesOptions model
    ListVpcRoutingTablesOptions listVpcRoutingTablesOptionsModel = new ListVpcRoutingTablesOptions.Builder()
      .vpcId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .isDefault(true)
      .build();

    // Invoke listVpcRoutingTables() with a valid options model and verify the result
    Response<RoutingTableCollection> response = vpcService.listVpcRoutingTables(listVpcRoutingTablesOptionsModel).execute();
    assertNotNull(response);
    RoutingTableCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpcRoutingTablesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(Boolean.valueOf(query.get("is_default")), Boolean.valueOf(true));
  }

  // Test the listVpcRoutingTables operation with and without retries enabled
  @Test
  public void testListVpcRoutingTablesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpcRoutingTablesWOptions();

    vpcService.disableRetries();
    testListVpcRoutingTablesWOptions();
  }

  // Test the listVpcRoutingTables operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpcRoutingTablesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpcRoutingTables(null).execute();
  }

  // Test the listVpcRoutingTables operation using the VpcRoutingTablesPager.getNext() method
  @Test
  public void testListVpcRoutingTablesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routing_tables\":[{\"accept_routes_from\":[{\"resource_type\":\"vpn_gateway\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"is_default\":false,\"lifecycle_state\":\"stable\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\",\"route_direct_link_ingress\":true,\"route_internet_ingress\":true,\"route_transit_gateway_ingress\":true,\"route_vpc_zone_ingress\":false,\"routes\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"name\":\"my-route-1\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}]}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routing_tables\":[{\"accept_routes_from\":[{\"resource_type\":\"vpn_gateway\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"is_default\":false,\"lifecycle_state\":\"stable\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\",\"route_direct_link_ingress\":true,\"route_internet_ingress\":true,\"route_transit_gateway_ingress\":true,\"route_vpc_zone_ingress\":false,\"routes\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"name\":\"my-route-1\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}]}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcRoutingTablesOptions listVpcRoutingTablesOptions = new ListVpcRoutingTablesOptions.Builder()
      .vpcId("testString")
      .limit(Long.valueOf("10"))
      .isDefault(true)
      .build();

    List<RoutingTable> allResults = new ArrayList<>();
    VpcRoutingTablesPager pager = new VpcRoutingTablesPager(vpcService, listVpcRoutingTablesOptions);
    while (pager.hasNext()) {
      List<RoutingTable> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpcRoutingTables operation using the VpcRoutingTablesPager.getAll() method
  @Test
  public void testListVpcRoutingTablesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routing_tables\":[{\"accept_routes_from\":[{\"resource_type\":\"vpn_gateway\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"is_default\":false,\"lifecycle_state\":\"stable\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\",\"route_direct_link_ingress\":true,\"route_internet_ingress\":true,\"route_transit_gateway_ingress\":true,\"route_vpc_zone_ingress\":false,\"routes\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"name\":\"my-route-1\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}]}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routing_tables\":[{\"accept_routes_from\":[{\"resource_type\":\"vpn_gateway\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"is_default\":false,\"lifecycle_state\":\"stable\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\",\"route_direct_link_ingress\":true,\"route_internet_ingress\":true,\"route_transit_gateway_ingress\":true,\"route_vpc_zone_ingress\":false,\"routes\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"name\":\"my-route-1\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}]}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcRoutingTablesOptions listVpcRoutingTablesOptions = new ListVpcRoutingTablesOptions.Builder()
      .vpcId("testString")
      .limit(Long.valueOf("10"))
      .isDefault(true)
      .build();

    VpcRoutingTablesPager pager = new VpcRoutingTablesPager(vpcService, listVpcRoutingTablesOptions);
    List<RoutingTable> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpcRoutingTable operation with a valid options model parameter
  @Test
  public void testCreateVpcRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_routes_from\": [{\"resource_type\": \"vpn_gateway\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-route-1\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}";
    String createVpcRoutingTablePath = "/vpcs/testString/routing_tables";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceFilter model
    ResourceFilter resourceFilterModel = new ResourceFilter.Builder()
      .resourceType("vpn_server")
      .build();

    // Construct an instance of the RoutePrototypeNextHopRouteNextHopPrototypeRouteNextHopIP model
    RoutePrototypeNextHopRouteNextHopPrototypeRouteNextHopIP routePrototypeNextHopModel = new RoutePrototypeNextHopRouteNextHopPrototypeRouteNextHopIP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the RoutePrototype model
    RoutePrototype routePrototypeModel = new RoutePrototype.Builder()
      .action("deliver")
      .destination("192.168.3.0/24")
      .name("my-route-1")
      .nextHop(routePrototypeNextHopModel)
      .zone(zoneIdentityModel)
      .build();

    // Construct an instance of the CreateVpcRoutingTableOptions model
    CreateVpcRoutingTableOptions createVpcRoutingTableOptionsModel = new CreateVpcRoutingTableOptions.Builder()
      .vpcId("testString")
      .acceptRoutesFrom(java.util.Arrays.asList(resourceFilterModel))
      .name("my-routing-table-2")
      .routeDirectLinkIngress(false)
      .routeInternetIngress(false)
      .routeTransitGatewayIngress(false)
      .routeVpcZoneIngress(false)
      .routes(java.util.Arrays.asList(routePrototypeModel))
      .build();

    // Invoke createVpcRoutingTable() with a valid options model and verify the result
    Response<RoutingTable> response = vpcService.createVpcRoutingTable(createVpcRoutingTableOptionsModel).execute();
    assertNotNull(response);
    RoutingTable responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpcRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpcRoutingTable operation with and without retries enabled
  @Test
  public void testCreateVpcRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpcRoutingTableWOptions();

    vpcService.disableRetries();
    testCreateVpcRoutingTableWOptions();
  }

  // Test the createVpcRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpcRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpcRoutingTable(null).execute();
  }

  // Test the deleteVpcRoutingTable operation with a valid options model parameter
  @Test
  public void testDeleteVpcRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpcRoutingTablePath = "/vpcs/testString/routing_tables/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpcRoutingTableOptions model
    DeleteVpcRoutingTableOptions deleteVpcRoutingTableOptionsModel = new DeleteVpcRoutingTableOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteVpcRoutingTable() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpcRoutingTable(deleteVpcRoutingTableOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpcRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpcRoutingTable operation with and without retries enabled
  @Test
  public void testDeleteVpcRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpcRoutingTableWOptions();

    vpcService.disableRetries();
    testDeleteVpcRoutingTableWOptions();
  }

  // Test the deleteVpcRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpcRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpcRoutingTable(null).execute();
  }

  // Test the getVpcRoutingTable operation with a valid options model parameter
  @Test
  public void testGetVpcRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_routes_from\": [{\"resource_type\": \"vpn_gateway\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-route-1\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}";
    String getVpcRoutingTablePath = "/vpcs/testString/routing_tables/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcRoutingTableOptions model
    GetVpcRoutingTableOptions getVpcRoutingTableOptionsModel = new GetVpcRoutingTableOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .build();

    // Invoke getVpcRoutingTable() with a valid options model and verify the result
    Response<RoutingTable> response = vpcService.getVpcRoutingTable(getVpcRoutingTableOptionsModel).execute();
    assertNotNull(response);
    RoutingTable responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcRoutingTable operation with and without retries enabled
  @Test
  public void testGetVpcRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcRoutingTableWOptions();

    vpcService.disableRetries();
    testGetVpcRoutingTableWOptions();
  }

  // Test the getVpcRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcRoutingTable(null).execute();
  }

  // Test the updateVpcRoutingTable operation with a valid options model parameter
  @Test
  public void testUpdateVpcRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_routes_from\": [{\"resource_type\": \"vpn_gateway\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-route-1\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}";
    String updateVpcRoutingTablePath = "/vpcs/testString/routing_tables/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceFilter model
    ResourceFilter resourceFilterModel = new ResourceFilter.Builder()
      .resourceType("vpn_server")
      .build();

    // Construct an instance of the RoutingTablePatch model
    RoutingTablePatch routingTablePatchModel = new RoutingTablePatch.Builder()
      .acceptRoutesFrom(java.util.Arrays.asList(resourceFilterModel))
      .name("my-routing-table-2")
      .routeDirectLinkIngress(true)
      .routeInternetIngress(true)
      .routeTransitGatewayIngress(true)
      .routeVpcZoneIngress(true)
      .build();
    Map<String, Object> routingTablePatchModelAsPatch = routingTablePatchModel.asPatch();

    // Construct an instance of the UpdateVpcRoutingTableOptions model
    UpdateVpcRoutingTableOptions updateVpcRoutingTableOptionsModel = new UpdateVpcRoutingTableOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .routingTablePatch(routingTablePatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateVpcRoutingTable() with a valid options model and verify the result
    Response<RoutingTable> response = vpcService.updateVpcRoutingTable(updateVpcRoutingTableOptionsModel).execute();
    assertNotNull(response);
    RoutingTable responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpcRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpcRoutingTable operation with and without retries enabled
  @Test
  public void testUpdateVpcRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpcRoutingTableWOptions();

    vpcService.disableRetries();
    testUpdateVpcRoutingTableWOptions();
  }

  // Test the updateVpcRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpcRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpcRoutingTable(null).execute();
  }

  // Test the listVpcRoutingTableRoutes operation with a valid options model parameter
  @Test
  public void testListVpcRoutingTableRoutesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?start=a5e812a2-62c0-4555-86a5-907106760c56&limit=20\"}, \"routes\": [{\"action\": \"delegate\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_state\": \"stable\", \"name\": \"my-route-1\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"total_count\": 132}";
    String listVpcRoutingTableRoutesPath = "/vpcs/testString/routing_tables/testString/routes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpcRoutingTableRoutesOptions model
    ListVpcRoutingTableRoutesOptions listVpcRoutingTableRoutesOptionsModel = new ListVpcRoutingTableRoutesOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listVpcRoutingTableRoutes() with a valid options model and verify the result
    Response<RouteCollection> response = vpcService.listVpcRoutingTableRoutes(listVpcRoutingTableRoutesOptionsModel).execute();
    assertNotNull(response);
    RouteCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpcRoutingTableRoutesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listVpcRoutingTableRoutes operation with and without retries enabled
  @Test
  public void testListVpcRoutingTableRoutesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpcRoutingTableRoutesWOptions();

    vpcService.disableRetries();
    testListVpcRoutingTableRoutesWOptions();
  }

  // Test the listVpcRoutingTableRoutes operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpcRoutingTableRoutesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpcRoutingTableRoutes(null).execute();
  }

  // Test the listVpcRoutingTableRoutes operation using the VpcRoutingTableRoutesPager.getNext() method
  @Test
  public void testListVpcRoutingTableRoutesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routes\":[{\"action\":\"delegate\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_state\":\"stable\",\"name\":\"my-route-1\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routes\":[{\"action\":\"delegate\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_state\":\"stable\",\"name\":\"my-route-1\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcRoutingTableRoutesOptions listVpcRoutingTableRoutesOptions = new ListVpcRoutingTableRoutesOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<Route> allResults = new ArrayList<>();
    VpcRoutingTableRoutesPager pager = new VpcRoutingTableRoutesPager(vpcService, listVpcRoutingTableRoutesOptions);
    while (pager.hasNext()) {
      List<Route> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpcRoutingTableRoutes operation using the VpcRoutingTableRoutesPager.getAll() method
  @Test
  public void testListVpcRoutingTableRoutesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routes\":[{\"action\":\"delegate\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_state\":\"stable\",\"name\":\"my-route-1\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routes\":[{\"action\":\"delegate\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_state\":\"stable\",\"name\":\"my-route-1\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcRoutingTableRoutesOptions listVpcRoutingTableRoutesOptions = new ListVpcRoutingTableRoutesOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .limit(Long.valueOf("10"))
      .build();

    VpcRoutingTableRoutesPager pager = new VpcRoutingTableRoutesPager(vpcService, listVpcRoutingTableRoutesOptions);
    List<Route> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpcRoutingTableRoute operation with a valid options model parameter
  @Test
  public void testCreateVpcRoutingTableRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"delegate\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_state\": \"stable\", \"name\": \"my-route-1\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createVpcRoutingTableRoutePath = "/vpcs/testString/routing_tables/testString/routes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the RoutePrototypeNextHopRouteNextHopPrototypeRouteNextHopIP model
    RoutePrototypeNextHopRouteNextHopPrototypeRouteNextHopIP routePrototypeNextHopModel = new RoutePrototypeNextHopRouteNextHopPrototypeRouteNextHopIP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the CreateVpcRoutingTableRouteOptions model
    CreateVpcRoutingTableRouteOptions createVpcRoutingTableRouteOptionsModel = new CreateVpcRoutingTableRouteOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .destination("192.168.3.0/24")
      .zone(zoneIdentityModel)
      .action("deliver")
      .name("my-route-1")
      .nextHop(routePrototypeNextHopModel)
      .build();

    // Invoke createVpcRoutingTableRoute() with a valid options model and verify the result
    Response<Route> response = vpcService.createVpcRoutingTableRoute(createVpcRoutingTableRouteOptionsModel).execute();
    assertNotNull(response);
    Route responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpcRoutingTableRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpcRoutingTableRoute operation with and without retries enabled
  @Test
  public void testCreateVpcRoutingTableRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpcRoutingTableRouteWOptions();

    vpcService.disableRetries();
    testCreateVpcRoutingTableRouteWOptions();
  }

  // Test the createVpcRoutingTableRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpcRoutingTableRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpcRoutingTableRoute(null).execute();
  }

  // Test the deleteVpcRoutingTableRoute operation with a valid options model parameter
  @Test
  public void testDeleteVpcRoutingTableRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpcRoutingTableRoutePath = "/vpcs/testString/routing_tables/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpcRoutingTableRouteOptions model
    DeleteVpcRoutingTableRouteOptions deleteVpcRoutingTableRouteOptionsModel = new DeleteVpcRoutingTableRouteOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpcRoutingTableRoute() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpcRoutingTableRoute(deleteVpcRoutingTableRouteOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpcRoutingTableRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpcRoutingTableRoute operation with and without retries enabled
  @Test
  public void testDeleteVpcRoutingTableRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpcRoutingTableRouteWOptions();

    vpcService.disableRetries();
    testDeleteVpcRoutingTableRouteWOptions();
  }

  // Test the deleteVpcRoutingTableRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpcRoutingTableRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpcRoutingTableRoute(null).execute();
  }

  // Test the getVpcRoutingTableRoute operation with a valid options model parameter
  @Test
  public void testGetVpcRoutingTableRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"delegate\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_state\": \"stable\", \"name\": \"my-route-1\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getVpcRoutingTableRoutePath = "/vpcs/testString/routing_tables/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcRoutingTableRouteOptions model
    GetVpcRoutingTableRouteOptions getVpcRoutingTableRouteOptionsModel = new GetVpcRoutingTableRouteOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .id("testString")
      .build();

    // Invoke getVpcRoutingTableRoute() with a valid options model and verify the result
    Response<Route> response = vpcService.getVpcRoutingTableRoute(getVpcRoutingTableRouteOptionsModel).execute();
    assertNotNull(response);
    Route responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcRoutingTableRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcRoutingTableRoute operation with and without retries enabled
  @Test
  public void testGetVpcRoutingTableRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcRoutingTableRouteWOptions();

    vpcService.disableRetries();
    testGetVpcRoutingTableRouteWOptions();
  }

  // Test the getVpcRoutingTableRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcRoutingTableRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcRoutingTableRoute(null).execute();
  }

  // Test the updateVpcRoutingTableRoute operation with a valid options model parameter
  @Test
  public void testUpdateVpcRoutingTableRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"delegate\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_state\": \"stable\", \"name\": \"my-route-1\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateVpcRoutingTableRoutePath = "/vpcs/testString/routing_tables/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the RoutePatch model
    RoutePatch routePatchModel = new RoutePatch.Builder()
      .name("my-route-2")
      .build();
    Map<String, Object> routePatchModelAsPatch = routePatchModel.asPatch();

    // Construct an instance of the UpdateVpcRoutingTableRouteOptions model
    UpdateVpcRoutingTableRouteOptions updateVpcRoutingTableRouteOptionsModel = new UpdateVpcRoutingTableRouteOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .id("testString")
      .routePatch(routePatchModelAsPatch)
      .build();

    // Invoke updateVpcRoutingTableRoute() with a valid options model and verify the result
    Response<Route> response = vpcService.updateVpcRoutingTableRoute(updateVpcRoutingTableRouteOptionsModel).execute();
    assertNotNull(response);
    Route responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpcRoutingTableRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpcRoutingTableRoute operation with and without retries enabled
  @Test
  public void testUpdateVpcRoutingTableRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpcRoutingTableRouteWOptions();

    vpcService.disableRetries();
    testUpdateVpcRoutingTableRouteWOptions();
  }

  // Test the updateVpcRoutingTableRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpcRoutingTableRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpcRoutingTableRoute(null).execute();
  }

  // Test the listSubnets operation with a valid options model parameter
  @Test
  public void testListSubnetsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"subnets\": [{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"name\": \"my-subnet\", \"network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"public_gateway\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_type\": \"public_gateway\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"subnet\", \"routing_table\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"status\": \"available\", \"total_ipv4_address_count\": 256, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"total_count\": 132}";
    String listSubnetsPath = "/subnets";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSubnetsOptions model
    ListSubnetsOptions listSubnetsOptionsModel = new ListSubnetsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .routingTableId("testString")
      .routingTableName("testString")
      .build();

    // Invoke listSubnets() with a valid options model and verify the result
    Response<SubnetCollection> response = vpcService.listSubnets(listSubnetsOptionsModel).execute();
    assertNotNull(response);
    SubnetCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSubnetsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("routing_table.id"), "testString");
    assertEquals(query.get("routing_table.name"), "testString");
  }

  // Test the listSubnets operation with and without retries enabled
  @Test
  public void testListSubnetsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSubnetsWOptions();

    vpcService.disableRetries();
    testListSubnetsWOptions();
  }

  // Test the listSubnets operation using the SubnetsPager.getNext() method
  @Test
  public void testListSubnetsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"subnets\":[{\"available_ipv4_address_count\":15,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"ip_version\":\"ipv4\",\"ipv4_cidr_block\":\"10.0.0.0/24\",\"name\":\"my-subnet\",\"network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"public_gateway\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_type\":\"public_gateway\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"subnet\",\"routing_table\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"status\":\"available\",\"total_ipv4_address_count\":256,\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"subnets\":[{\"available_ipv4_address_count\":15,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"ip_version\":\"ipv4\",\"ipv4_cidr_block\":\"10.0.0.0/24\",\"name\":\"my-subnet\",\"network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"public_gateway\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_type\":\"public_gateway\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"subnet\",\"routing_table\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"status\":\"available\",\"total_ipv4_address_count\":256,\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSubnetsOptions listSubnetsOptions = new ListSubnetsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .routingTableId("testString")
      .routingTableName("testString")
      .build();

    List<Subnet> allResults = new ArrayList<>();
    SubnetsPager pager = new SubnetsPager(vpcService, listSubnetsOptions);
    while (pager.hasNext()) {
      List<Subnet> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listSubnets operation using the SubnetsPager.getAll() method
  @Test
  public void testListSubnetsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"subnets\":[{\"available_ipv4_address_count\":15,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"ip_version\":\"ipv4\",\"ipv4_cidr_block\":\"10.0.0.0/24\",\"name\":\"my-subnet\",\"network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"public_gateway\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_type\":\"public_gateway\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"subnet\",\"routing_table\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"status\":\"available\",\"total_ipv4_address_count\":256,\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"subnets\":[{\"available_ipv4_address_count\":15,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"ip_version\":\"ipv4\",\"ipv4_cidr_block\":\"10.0.0.0/24\",\"name\":\"my-subnet\",\"network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"public_gateway\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_type\":\"public_gateway\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"subnet\",\"routing_table\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"status\":\"available\",\"total_ipv4_address_count\":256,\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSubnetsOptions listSubnetsOptions = new ListSubnetsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .routingTableId("testString")
      .routingTableName("testString")
      .build();

    SubnetsPager pager = new SubnetsPager(vpcService, listSubnetsOptions);
    List<Subnet> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createSubnet operation with a valid options model parameter
  @Test
  public void testCreateSubnetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"name\": \"my-subnet\", \"network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"public_gateway\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_type\": \"public_gateway\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"subnet\", \"routing_table\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"status\": \"available\", \"total_ipv4_address_count\": 256, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createSubnetPath = "/subnets";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkACLIdentityById model
    NetworkACLIdentityById networkAclIdentityModel = new NetworkACLIdentityById.Builder()
      .id("a4e28308-8ee7-46ab-8108-9f881f22bdbf")
      .build();

    // Construct an instance of the PublicGatewayIdentityPublicGatewayIdentityById model
    PublicGatewayIdentityPublicGatewayIdentityById publicGatewayIdentityModel = new PublicGatewayIdentityPublicGatewayIdentityById.Builder()
      .id("dc5431ef-1fc6-4861-adc9-a59d077d1241")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the RoutingTableIdentityById model
    RoutingTableIdentityById routingTableIdentityModel = new RoutingTableIdentityById.Builder()
      .id("6885e83f-03b2-4603-8a86-db2a0f55c840")
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the SubnetPrototypeSubnetByTotalCount model
    SubnetPrototypeSubnetByTotalCount subnetPrototypeModel = new SubnetPrototypeSubnetByTotalCount.Builder()
      .ipVersion("ipv4")
      .name("my-subnet")
      .networkAcl(networkAclIdentityModel)
      .publicGateway(publicGatewayIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .routingTable(routingTableIdentityModel)
      .vpc(vpcIdentityModel)
      .totalIpv4AddressCount(Long.valueOf("256"))
      .zone(zoneIdentityModel)
      .build();

    // Construct an instance of the CreateSubnetOptions model
    CreateSubnetOptions createSubnetOptionsModel = new CreateSubnetOptions.Builder()
      .subnetPrototype(subnetPrototypeModel)
      .build();

    // Invoke createSubnet() with a valid options model and verify the result
    Response<Subnet> response = vpcService.createSubnet(createSubnetOptionsModel).execute();
    assertNotNull(response);
    Subnet responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSubnetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSubnet operation with and without retries enabled
  @Test
  public void testCreateSubnetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSubnetWOptions();

    vpcService.disableRetries();
    testCreateSubnetWOptions();
  }

  // Test the createSubnet operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSubnetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSubnet(null).execute();
  }

  // Test the deleteSubnet operation with a valid options model parameter
  @Test
  public void testDeleteSubnetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSubnetPath = "/subnets/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSubnetOptions model
    DeleteSubnetOptions deleteSubnetOptionsModel = new DeleteSubnetOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteSubnet() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSubnet(deleteSubnetOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSubnetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSubnet operation with and without retries enabled
  @Test
  public void testDeleteSubnetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSubnetWOptions();

    vpcService.disableRetries();
    testDeleteSubnetWOptions();
  }

  // Test the deleteSubnet operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSubnetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSubnet(null).execute();
  }

  // Test the getSubnet operation with a valid options model parameter
  @Test
  public void testGetSubnetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"name\": \"my-subnet\", \"network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"public_gateway\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_type\": \"public_gateway\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"subnet\", \"routing_table\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"status\": \"available\", \"total_ipv4_address_count\": 256, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getSubnetPath = "/subnets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSubnetOptions model
    GetSubnetOptions getSubnetOptionsModel = new GetSubnetOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSubnet() with a valid options model and verify the result
    Response<Subnet> response = vpcService.getSubnet(getSubnetOptionsModel).execute();
    assertNotNull(response);
    Subnet responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSubnetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSubnet operation with and without retries enabled
  @Test
  public void testGetSubnetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSubnetWOptions();

    vpcService.disableRetries();
    testGetSubnetWOptions();
  }

  // Test the getSubnet operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSubnetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSubnet(null).execute();
  }

  // Test the updateSubnet operation with a valid options model parameter
  @Test
  public void testUpdateSubnetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"name\": \"my-subnet\", \"network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"public_gateway\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_type\": \"public_gateway\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"subnet\", \"routing_table\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"status\": \"available\", \"total_ipv4_address_count\": 256, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateSubnetPath = "/subnets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkACLIdentityById model
    NetworkACLIdentityById networkAclIdentityModel = new NetworkACLIdentityById.Builder()
      .id("a4e28308-8ee7-46ab-8108-9f881f22bdbf")
      .build();

    // Construct an instance of the SubnetPublicGatewayPatchPublicGatewayIdentityById model
    SubnetPublicGatewayPatchPublicGatewayIdentityById subnetPublicGatewayPatchModel = new SubnetPublicGatewayPatchPublicGatewayIdentityById.Builder()
      .id("dc5431ef-1fc6-4861-adc9-a59d077d1241")
      .build();

    // Construct an instance of the RoutingTableIdentityById model
    RoutingTableIdentityById routingTableIdentityModel = new RoutingTableIdentityById.Builder()
      .id("6885e83f-03b2-4603-8a86-db2a0f55c840")
      .build();

    // Construct an instance of the SubnetPatch model
    SubnetPatch subnetPatchModel = new SubnetPatch.Builder()
      .name("my-subnet")
      .networkAcl(networkAclIdentityModel)
      .publicGateway(subnetPublicGatewayPatchModel)
      .routingTable(routingTableIdentityModel)
      .build();
    Map<String, Object> subnetPatchModelAsPatch = subnetPatchModel.asPatch();

    // Construct an instance of the UpdateSubnetOptions model
    UpdateSubnetOptions updateSubnetOptionsModel = new UpdateSubnetOptions.Builder()
      .id("testString")
      .subnetPatch(subnetPatchModelAsPatch)
      .build();

    // Invoke updateSubnet() with a valid options model and verify the result
    Response<Subnet> response = vpcService.updateSubnet(updateSubnetOptionsModel).execute();
    assertNotNull(response);
    Subnet responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateSubnetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateSubnet operation with and without retries enabled
  @Test
  public void testUpdateSubnetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateSubnetWOptions();

    vpcService.disableRetries();
    testUpdateSubnetWOptions();
  }

  // Test the updateSubnet operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateSubnetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateSubnet(null).execute();
  }

  // Test the getSubnetNetworkAcl operation with a valid options model parameter
  @Test
  public void testGetSubnetNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-rule-1\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-rule-1\", \"source\": \"192.168.3.0/24\", \"destination_port_max\": 22, \"destination_port_min\": 22, \"protocol\": \"udp\", \"source_port_max\": 65535, \"source_port_min\": 49152}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getSubnetNetworkAclPath = "/subnets/testString/network_acl";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSubnetNetworkAclOptions model
    GetSubnetNetworkAclOptions getSubnetNetworkAclOptionsModel = new GetSubnetNetworkAclOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSubnetNetworkAcl() with a valid options model and verify the result
    Response<NetworkACL> response = vpcService.getSubnetNetworkAcl(getSubnetNetworkAclOptionsModel).execute();
    assertNotNull(response);
    NetworkACL responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSubnetNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSubnetNetworkAcl operation with and without retries enabled
  @Test
  public void testGetSubnetNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSubnetNetworkAclWOptions();

    vpcService.disableRetries();
    testGetSubnetNetworkAclWOptions();
  }

  // Test the getSubnetNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSubnetNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSubnetNetworkAcl(null).execute();
  }

  // Test the replaceSubnetNetworkAcl operation with a valid options model parameter
  @Test
  public void testReplaceSubnetNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-rule-1\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-rule-1\", \"source\": \"192.168.3.0/24\", \"destination_port_max\": 22, \"destination_port_min\": 22, \"protocol\": \"udp\", \"source_port_max\": 65535, \"source_port_min\": 49152}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String replaceSubnetNetworkAclPath = "/subnets/testString/network_acl";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkACLIdentityById model
    NetworkACLIdentityById networkAclIdentityModel = new NetworkACLIdentityById.Builder()
      .id("a4e28308-8ee7-46ab-8108-9f881f22bdbf")
      .build();

    // Construct an instance of the ReplaceSubnetNetworkAclOptions model
    ReplaceSubnetNetworkAclOptions replaceSubnetNetworkAclOptionsModel = new ReplaceSubnetNetworkAclOptions.Builder()
      .id("testString")
      .networkAclIdentity(networkAclIdentityModel)
      .build();

    // Invoke replaceSubnetNetworkAcl() with a valid options model and verify the result
    Response<NetworkACL> response = vpcService.replaceSubnetNetworkAcl(replaceSubnetNetworkAclOptionsModel).execute();
    assertNotNull(response);
    NetworkACL responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, replaceSubnetNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the replaceSubnetNetworkAcl operation with and without retries enabled
  @Test
  public void testReplaceSubnetNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testReplaceSubnetNetworkAclWOptions();

    vpcService.disableRetries();
    testReplaceSubnetNetworkAclWOptions();
  }

  // Test the replaceSubnetNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testReplaceSubnetNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.replaceSubnetNetworkAcl(null).execute();
  }

  // Test the unsetSubnetPublicGateway operation with a valid options model parameter
  @Test
  public void testUnsetSubnetPublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String unsetSubnetPublicGatewayPath = "/subnets/testString/public_gateway";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the UnsetSubnetPublicGatewayOptions model
    UnsetSubnetPublicGatewayOptions unsetSubnetPublicGatewayOptionsModel = new UnsetSubnetPublicGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke unsetSubnetPublicGateway() with a valid options model and verify the result
    Response<Void> response = vpcService.unsetSubnetPublicGateway(unsetSubnetPublicGatewayOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, unsetSubnetPublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the unsetSubnetPublicGateway operation with and without retries enabled
  @Test
  public void testUnsetSubnetPublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUnsetSubnetPublicGatewayWOptions();

    vpcService.disableRetries();
    testUnsetSubnetPublicGatewayWOptions();
  }

  // Test the unsetSubnetPublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUnsetSubnetPublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.unsetSubnetPublicGateway(null).execute();
  }

  // Test the getSubnetPublicGateway operation with a valid options model parameter
  @Test
  public void testGetSubnetPublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"floating_ip\": {\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"public_gateway\", \"status\": \"available\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getSubnetPublicGatewayPath = "/subnets/testString/public_gateway";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSubnetPublicGatewayOptions model
    GetSubnetPublicGatewayOptions getSubnetPublicGatewayOptionsModel = new GetSubnetPublicGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSubnetPublicGateway() with a valid options model and verify the result
    Response<PublicGateway> response = vpcService.getSubnetPublicGateway(getSubnetPublicGatewayOptionsModel).execute();
    assertNotNull(response);
    PublicGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSubnetPublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSubnetPublicGateway operation with and without retries enabled
  @Test
  public void testGetSubnetPublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSubnetPublicGatewayWOptions();

    vpcService.disableRetries();
    testGetSubnetPublicGatewayWOptions();
  }

  // Test the getSubnetPublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSubnetPublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSubnetPublicGateway(null).execute();
  }

  // Test the setSubnetPublicGateway operation with a valid options model parameter
  @Test
  public void testSetSubnetPublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"floating_ip\": {\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"public_gateway\", \"status\": \"available\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String setSubnetPublicGatewayPath = "/subnets/testString/public_gateway";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the PublicGatewayIdentityPublicGatewayIdentityById model
    PublicGatewayIdentityPublicGatewayIdentityById publicGatewayIdentityModel = new PublicGatewayIdentityPublicGatewayIdentityById.Builder()
      .id("dc5431ef-1fc6-4861-adc9-a59d077d1241")
      .build();

    // Construct an instance of the SetSubnetPublicGatewayOptions model
    SetSubnetPublicGatewayOptions setSubnetPublicGatewayOptionsModel = new SetSubnetPublicGatewayOptions.Builder()
      .id("testString")
      .publicGatewayIdentity(publicGatewayIdentityModel)
      .build();

    // Invoke setSubnetPublicGateway() with a valid options model and verify the result
    Response<PublicGateway> response = vpcService.setSubnetPublicGateway(setSubnetPublicGatewayOptionsModel).execute();
    assertNotNull(response);
    PublicGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, setSubnetPublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the setSubnetPublicGateway operation with and without retries enabled
  @Test
  public void testSetSubnetPublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testSetSubnetPublicGatewayWOptions();

    vpcService.disableRetries();
    testSetSubnetPublicGatewayWOptions();
  }

  // Test the setSubnetPublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testSetSubnetPublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.setSubnetPublicGateway(null).execute();
  }

  // Test the getSubnetRoutingTable operation with a valid options model parameter
  @Test
  public void testGetSubnetRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_routes_from\": [{\"resource_type\": \"vpn_gateway\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-route-1\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}";
    String getSubnetRoutingTablePath = "/subnets/testString/routing_table";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSubnetRoutingTableOptions model
    GetSubnetRoutingTableOptions getSubnetRoutingTableOptionsModel = new GetSubnetRoutingTableOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSubnetRoutingTable() with a valid options model and verify the result
    Response<RoutingTable> response = vpcService.getSubnetRoutingTable(getSubnetRoutingTableOptionsModel).execute();
    assertNotNull(response);
    RoutingTable responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSubnetRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSubnetRoutingTable operation with and without retries enabled
  @Test
  public void testGetSubnetRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSubnetRoutingTableWOptions();

    vpcService.disableRetries();
    testGetSubnetRoutingTableWOptions();
  }

  // Test the getSubnetRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSubnetRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSubnetRoutingTable(null).execute();
  }

  // Test the replaceSubnetRoutingTable operation with a valid options model parameter
  @Test
  public void testReplaceSubnetRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_routes_from\": [{\"resource_type\": \"vpn_gateway\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"name\": \"my-route-1\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}";
    String replaceSubnetRoutingTablePath = "/subnets/testString/routing_table";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the RoutingTableIdentityById model
    RoutingTableIdentityById routingTableIdentityModel = new RoutingTableIdentityById.Builder()
      .id("1a15dca5-7e33-45e1-b7c5-bc690e569531")
      .build();

    // Construct an instance of the ReplaceSubnetRoutingTableOptions model
    ReplaceSubnetRoutingTableOptions replaceSubnetRoutingTableOptionsModel = new ReplaceSubnetRoutingTableOptions.Builder()
      .id("testString")
      .routingTableIdentity(routingTableIdentityModel)
      .build();

    // Invoke replaceSubnetRoutingTable() with a valid options model and verify the result
    Response<RoutingTable> response = vpcService.replaceSubnetRoutingTable(replaceSubnetRoutingTableOptionsModel).execute();
    assertNotNull(response);
    RoutingTable responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, replaceSubnetRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the replaceSubnetRoutingTable operation with and without retries enabled
  @Test
  public void testReplaceSubnetRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testReplaceSubnetRoutingTableWOptions();

    vpcService.disableRetries();
    testReplaceSubnetRoutingTableWOptions();
  }

  // Test the replaceSubnetRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testReplaceSubnetRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.replaceSubnetRoutingTable(null).execute();
  }

  // Test the listSubnetReservedIps operation with a valid options model parameter
  @Test
  public void testListSubnetReservedIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"reserved_ips\": [{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}], \"total_count\": 132}";
    String listSubnetReservedIpsPath = "/subnets/testString/reserved_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSubnetReservedIpsOptions model
    ListSubnetReservedIpsOptions listSubnetReservedIpsOptionsModel = new ListSubnetReservedIpsOptions.Builder()
      .subnetId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    // Invoke listSubnetReservedIps() with a valid options model and verify the result
    Response<ReservedIPCollection> response = vpcService.listSubnetReservedIps(listSubnetReservedIpsOptionsModel).execute();
    assertNotNull(response);
    ReservedIPCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSubnetReservedIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "name");
  }

  // Test the listSubnetReservedIps operation with and without retries enabled
  @Test
  public void testListSubnetReservedIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSubnetReservedIpsWOptions();

    vpcService.disableRetries();
    testListSubnetReservedIpsWOptions();
  }

  // Test the listSubnetReservedIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListSubnetReservedIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listSubnetReservedIps(null).execute();
  }

  // Test the listSubnetReservedIps operation using the SubnetReservedIpsPager.getNext() method
  @Test
  public void testListSubnetReservedIpsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"reserved_ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"reserved_ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSubnetReservedIpsOptions listSubnetReservedIpsOptions = new ListSubnetReservedIpsOptions.Builder()
      .subnetId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    List<ReservedIP> allResults = new ArrayList<>();
    SubnetReservedIpsPager pager = new SubnetReservedIpsPager(vpcService, listSubnetReservedIpsOptions);
    while (pager.hasNext()) {
      List<ReservedIP> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listSubnetReservedIps operation using the SubnetReservedIpsPager.getAll() method
  @Test
  public void testListSubnetReservedIpsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"reserved_ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"reserved_ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSubnetReservedIpsOptions listSubnetReservedIpsOptions = new ListSubnetReservedIpsOptions.Builder()
      .subnetId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    SubnetReservedIpsPager pager = new SubnetReservedIpsPager(vpcService, listSubnetReservedIpsOptions);
    List<ReservedIP> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createSubnetReservedIp operation with a valid options model parameter
  @Test
  public void testCreateSubnetReservedIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String createSubnetReservedIpPath = "/subnets/testString/reserved_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityById model
    ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityById reservedIpTargetPrototypeModel = new ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityById.Builder()
      .id("d7cc5196-9864-48c4-82d8-3f30da41fcc5")
      .build();

    // Construct an instance of the CreateSubnetReservedIpOptions model
    CreateSubnetReservedIpOptions createSubnetReservedIpOptionsModel = new CreateSubnetReservedIpOptions.Builder()
      .subnetId("testString")
      .address("192.168.3.4")
      .autoDelete(false)
      .name("my-reserved-ip")
      .target(reservedIpTargetPrototypeModel)
      .build();

    // Invoke createSubnetReservedIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.createSubnetReservedIp(createSubnetReservedIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSubnetReservedIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSubnetReservedIp operation with and without retries enabled
  @Test
  public void testCreateSubnetReservedIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSubnetReservedIpWOptions();

    vpcService.disableRetries();
    testCreateSubnetReservedIpWOptions();
  }

  // Test the createSubnetReservedIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSubnetReservedIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSubnetReservedIp(null).execute();
  }

  // Test the deleteSubnetReservedIp operation with a valid options model parameter
  @Test
  public void testDeleteSubnetReservedIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSubnetReservedIpPath = "/subnets/testString/reserved_ips/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSubnetReservedIpOptions model
    DeleteSubnetReservedIpOptions deleteSubnetReservedIpOptionsModel = new DeleteSubnetReservedIpOptions.Builder()
      .subnetId("testString")
      .id("testString")
      .build();

    // Invoke deleteSubnetReservedIp() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSubnetReservedIp(deleteSubnetReservedIpOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSubnetReservedIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSubnetReservedIp operation with and without retries enabled
  @Test
  public void testDeleteSubnetReservedIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSubnetReservedIpWOptions();

    vpcService.disableRetries();
    testDeleteSubnetReservedIpWOptions();
  }

  // Test the deleteSubnetReservedIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSubnetReservedIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSubnetReservedIp(null).execute();
  }

  // Test the getSubnetReservedIp operation with a valid options model parameter
  @Test
  public void testGetSubnetReservedIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String getSubnetReservedIpPath = "/subnets/testString/reserved_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSubnetReservedIpOptions model
    GetSubnetReservedIpOptions getSubnetReservedIpOptionsModel = new GetSubnetReservedIpOptions.Builder()
      .subnetId("testString")
      .id("testString")
      .build();

    // Invoke getSubnetReservedIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.getSubnetReservedIp(getSubnetReservedIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSubnetReservedIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSubnetReservedIp operation with and without retries enabled
  @Test
  public void testGetSubnetReservedIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSubnetReservedIpWOptions();

    vpcService.disableRetries();
    testGetSubnetReservedIpWOptions();
  }

  // Test the getSubnetReservedIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSubnetReservedIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSubnetReservedIp(null).execute();
  }

  // Test the updateSubnetReservedIp operation with a valid options model parameter
  @Test
  public void testUpdateSubnetReservedIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String updateSubnetReservedIpPath = "/subnets/testString/reserved_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ReservedIPPatch model
    ReservedIPPatch reservedIpPatchModel = new ReservedIPPatch.Builder()
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();
    Map<String, Object> reservedIpPatchModelAsPatch = reservedIpPatchModel.asPatch();

    // Construct an instance of the UpdateSubnetReservedIpOptions model
    UpdateSubnetReservedIpOptions updateSubnetReservedIpOptionsModel = new UpdateSubnetReservedIpOptions.Builder()
      .subnetId("testString")
      .id("testString")
      .reservedIpPatch(reservedIpPatchModelAsPatch)
      .build();

    // Invoke updateSubnetReservedIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.updateSubnetReservedIp(updateSubnetReservedIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateSubnetReservedIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateSubnetReservedIp operation with and without retries enabled
  @Test
  public void testUpdateSubnetReservedIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateSubnetReservedIpWOptions();

    vpcService.disableRetries();
    testUpdateSubnetReservedIpWOptions();
  }

  // Test the updateSubnetReservedIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateSubnetReservedIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateSubnetReservedIp(null).execute();
  }

  // Test the listImages operation with a valid options model parameter
  @Test
  public void testListImagesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images?limit=20\"}, \"images\": [{\"catalog_offering\": {\"managed\": false, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"encryption\": \"user_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"file\": {\"checksums\": {\"sha256\": \"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"}, \"size\": 1}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"minimum_provisioned_size\": 22, \"name\": \"my-image\", \"operating_system\": {\"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"visibility\": \"private\"}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}}";
    String listImagesPath = "/images";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListImagesOptions model
    ListImagesOptions listImagesOptionsModel = new ListImagesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .visibility("private")
      .build();

    // Invoke listImages() with a valid options model and verify the result
    Response<ImageCollection> response = vpcService.listImages(listImagesOptionsModel).execute();
    assertNotNull(response);
    ImageCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listImagesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "testString");
    assertEquals(query.get("visibility"), "private");
  }

  // Test the listImages operation with and without retries enabled
  @Test
  public void testListImagesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListImagesWOptions();

    vpcService.disableRetries();
    testListImagesWOptions();
  }

  // Test the listImages operation using the ImagesPager.getNext() method
  @Test
  public void testListImagesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"images\":[{\"catalog_offering\":{\"managed\":false,\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"encryption\":\"user_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"file\":{\"checksums\":{\"sha256\":\"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"},\"size\":1},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"minimum_provisioned_size\":22,\"name\":\"my-image\",\"operating_system\":{\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"visibility\":\"private\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"images\":[{\"catalog_offering\":{\"managed\":false,\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"encryption\":\"user_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"file\":{\"checksums\":{\"sha256\":\"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"},\"size\":1},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"minimum_provisioned_size\":22,\"name\":\"my-image\",\"operating_system\":{\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"visibility\":\"private\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListImagesOptions listImagesOptions = new ListImagesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .visibility("private")
      .build();

    List<Image> allResults = new ArrayList<>();
    ImagesPager pager = new ImagesPager(vpcService, listImagesOptions);
    while (pager.hasNext()) {
      List<Image> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listImages operation using the ImagesPager.getAll() method
  @Test
  public void testListImagesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"images\":[{\"catalog_offering\":{\"managed\":false,\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"encryption\":\"user_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"file\":{\"checksums\":{\"sha256\":\"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"},\"size\":1},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"minimum_provisioned_size\":22,\"name\":\"my-image\",\"operating_system\":{\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"visibility\":\"private\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"images\":[{\"catalog_offering\":{\"managed\":false,\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"encryption\":\"user_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"file\":{\"checksums\":{\"sha256\":\"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"},\"size\":1},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"minimum_provisioned_size\":22,\"name\":\"my-image\",\"operating_system\":{\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"visibility\":\"private\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListImagesOptions listImagesOptions = new ListImagesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .visibility("private")
      .build();

    ImagesPager pager = new ImagesPager(vpcService, listImagesOptions);
    List<Image> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createImage operation with a valid options model parameter
  @Test
  public void testCreateImageWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"catalog_offering\": {\"managed\": false, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"encryption\": \"user_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"file\": {\"checksums\": {\"sha256\": \"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"}, \"size\": 1}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"minimum_provisioned_size\": 22, \"name\": \"my-image\", \"operating_system\": {\"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"visibility\": \"private\"}";
    String createImagePath = "/images";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the EncryptionKeyIdentityByCRN model
    EncryptionKeyIdentityByCRN encryptionKeyIdentityModel = new EncryptionKeyIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
      .build();

    // Construct an instance of the ImageFilePrototype model
    ImageFilePrototype imageFilePrototypeModel = new ImageFilePrototype.Builder()
      .href("cos://us-south/my-bucket/my-image.qcow2")
      .build();

    // Construct an instance of the OperatingSystemIdentityByName model
    OperatingSystemIdentityByName operatingSystemIdentityModel = new OperatingSystemIdentityByName.Builder()
      .name("debian-9-amd64")
      .build();

    // Construct an instance of the ImagePrototypeImageByFile model
    ImagePrototypeImageByFile imagePrototypeModel = new ImagePrototypeImageByFile.Builder()
      .name("my-image")
      .resourceGroup(resourceGroupIdentityModel)
      .encryptedDataKey("testString")
      .encryptionKey(encryptionKeyIdentityModel)
      .file(imageFilePrototypeModel)
      .operatingSystem(operatingSystemIdentityModel)
      .build();

    // Construct an instance of the CreateImageOptions model
    CreateImageOptions createImageOptionsModel = new CreateImageOptions.Builder()
      .imagePrototype(imagePrototypeModel)
      .build();

    // Invoke createImage() with a valid options model and verify the result
    Response<Image> response = vpcService.createImage(createImageOptionsModel).execute();
    assertNotNull(response);
    Image responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createImagePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createImage operation with and without retries enabled
  @Test
  public void testCreateImageWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateImageWOptions();

    vpcService.disableRetries();
    testCreateImageWOptions();
  }

  // Test the createImage operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateImageNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createImage(null).execute();
  }

  // Test the deleteImage operation with a valid options model parameter
  @Test
  public void testDeleteImageWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteImagePath = "/images/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteImageOptions model
    DeleteImageOptions deleteImageOptionsModel = new DeleteImageOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteImage() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteImage(deleteImageOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteImagePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteImage operation with and without retries enabled
  @Test
  public void testDeleteImageWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteImageWOptions();

    vpcService.disableRetries();
    testDeleteImageWOptions();
  }

  // Test the deleteImage operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteImageNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteImage(null).execute();
  }

  // Test the getImage operation with a valid options model parameter
  @Test
  public void testGetImageWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"catalog_offering\": {\"managed\": false, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"encryption\": \"user_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"file\": {\"checksums\": {\"sha256\": \"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"}, \"size\": 1}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"minimum_provisioned_size\": 22, \"name\": \"my-image\", \"operating_system\": {\"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"visibility\": \"private\"}";
    String getImagePath = "/images/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetImageOptions model
    GetImageOptions getImageOptionsModel = new GetImageOptions.Builder()
      .id("testString")
      .build();

    // Invoke getImage() with a valid options model and verify the result
    Response<Image> response = vpcService.getImage(getImageOptionsModel).execute();
    assertNotNull(response);
    Image responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getImagePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getImage operation with and without retries enabled
  @Test
  public void testGetImageWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetImageWOptions();

    vpcService.disableRetries();
    testGetImageWOptions();
  }

  // Test the getImage operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetImageNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getImage(null).execute();
  }

  // Test the updateImage operation with a valid options model parameter
  @Test
  public void testUpdateImageWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"catalog_offering\": {\"managed\": false, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"encryption\": \"user_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"file\": {\"checksums\": {\"sha256\": \"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"}, \"size\": 1}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"minimum_provisioned_size\": 22, \"name\": \"my-image\", \"operating_system\": {\"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"visibility\": \"private\"}";
    String updateImagePath = "/images/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ImagePatch model
    ImagePatch imagePatchModel = new ImagePatch.Builder()
      .name("my-image")
      .build();
    Map<String, Object> imagePatchModelAsPatch = imagePatchModel.asPatch();

    // Construct an instance of the UpdateImageOptions model
    UpdateImageOptions updateImageOptionsModel = new UpdateImageOptions.Builder()
      .id("testString")
      .imagePatch(imagePatchModelAsPatch)
      .build();

    // Invoke updateImage() with a valid options model and verify the result
    Response<Image> response = vpcService.updateImage(updateImageOptionsModel).execute();
    assertNotNull(response);
    Image responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateImagePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateImage operation with and without retries enabled
  @Test
  public void testUpdateImageWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateImageWOptions();

    vpcService.disableRetries();
    testUpdateImageWOptions();
  }

  // Test the updateImage operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateImageNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateImage(null).execute();
  }

  // Test the listOperatingSystems operation with a valid options model parameter
  @Test
  public void testListOperatingSystemsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"operating_systems\": [{\"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}]}";
    String listOperatingSystemsPath = "/operating_systems";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListOperatingSystemsOptions model
    ListOperatingSystemsOptions listOperatingSystemsOptionsModel = new ListOperatingSystemsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listOperatingSystems() with a valid options model and verify the result
    Response<OperatingSystemCollection> response = vpcService.listOperatingSystems(listOperatingSystemsOptionsModel).execute();
    assertNotNull(response);
    OperatingSystemCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listOperatingSystemsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listOperatingSystems operation with and without retries enabled
  @Test
  public void testListOperatingSystemsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListOperatingSystemsWOptions();

    vpcService.disableRetries();
    testListOperatingSystemsWOptions();
  }

  // Test the listOperatingSystems operation using the OperatingSystemsPager.getNext() method
  @Test
  public void testListOperatingSystemsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"operating_systems\":[{\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"operating_systems\":[{\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListOperatingSystemsOptions listOperatingSystemsOptions = new ListOperatingSystemsOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<OperatingSystem> allResults = new ArrayList<>();
    OperatingSystemsPager pager = new OperatingSystemsPager(vpcService, listOperatingSystemsOptions);
    while (pager.hasNext()) {
      List<OperatingSystem> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listOperatingSystems operation using the OperatingSystemsPager.getAll() method
  @Test
  public void testListOperatingSystemsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"operating_systems\":[{\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"operating_systems\":[{\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListOperatingSystemsOptions listOperatingSystemsOptions = new ListOperatingSystemsOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    OperatingSystemsPager pager = new OperatingSystemsPager(vpcService, listOperatingSystemsOptions);
    List<OperatingSystem> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getOperatingSystem operation with a valid options model parameter
  @Test
  public void testGetOperatingSystemWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}";
    String getOperatingSystemPath = "/operating_systems/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetOperatingSystemOptions model
    GetOperatingSystemOptions getOperatingSystemOptionsModel = new GetOperatingSystemOptions.Builder()
      .name("testString")
      .build();

    // Invoke getOperatingSystem() with a valid options model and verify the result
    Response<OperatingSystem> response = vpcService.getOperatingSystem(getOperatingSystemOptionsModel).execute();
    assertNotNull(response);
    OperatingSystem responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getOperatingSystemPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getOperatingSystem operation with and without retries enabled
  @Test
  public void testGetOperatingSystemWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetOperatingSystemWOptions();

    vpcService.disableRetries();
    testGetOperatingSystemWOptions();
  }

  // Test the getOperatingSystem operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetOperatingSystemNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getOperatingSystem(null).execute();
  }

  // Test the listKeys operation with a valid options model parameter
  @Test
  public void testListKeysWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys?limit=20\"}, \"keys\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"length\": 2048, \"name\": \"my-key\", \"public_key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"type\": \"rsa\"}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listKeysPath = "/keys";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListKeysOptions model
    ListKeysOptions listKeysOptionsModel = new ListKeysOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listKeys() with a valid options model and verify the result
    Response<KeyCollection> response = vpcService.listKeys(listKeysOptionsModel).execute();
    assertNotNull(response);
    KeyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listKeysPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listKeys operation with and without retries enabled
  @Test
  public void testListKeysWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListKeysWOptions();

    vpcService.disableRetries();
    testListKeysWOptions();
  }

  // Test the listKeys operation using the KeysPager.getNext() method
  @Test
  public void testListKeysWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"keys\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"fingerprint\":\"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"id\":\"a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"length\":2048,\"name\":\"my-key\",\"public_key\":\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"type\":\"rsa\"}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"keys\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"fingerprint\":\"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"id\":\"a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"length\":2048,\"name\":\"my-key\",\"public_key\":\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"type\":\"rsa\"}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListKeysOptions listKeysOptions = new ListKeysOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<Key> allResults = new ArrayList<>();
    KeysPager pager = new KeysPager(vpcService, listKeysOptions);
    while (pager.hasNext()) {
      List<Key> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listKeys operation using the KeysPager.getAll() method
  @Test
  public void testListKeysWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"keys\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"fingerprint\":\"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"id\":\"a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"length\":2048,\"name\":\"my-key\",\"public_key\":\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"type\":\"rsa\"}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"keys\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"fingerprint\":\"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"id\":\"a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"length\":2048,\"name\":\"my-key\",\"public_key\":\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"type\":\"rsa\"}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListKeysOptions listKeysOptions = new ListKeysOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    KeysPager pager = new KeysPager(vpcService, listKeysOptions);
    List<Key> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createKey operation with a valid options model parameter
  @Test
  public void testCreateKeyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"length\": 2048, \"name\": \"my-key\", \"public_key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"type\": \"rsa\"}";
    String createKeyPath = "/keys";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateKeyOptions model
    CreateKeyOptions createKeyOptionsModel = new CreateKeyOptions.Builder()
      .publicKey("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
      .name("my-key")
      .resourceGroup(resourceGroupIdentityModel)
      .type("rsa")
      .build();

    // Invoke createKey() with a valid options model and verify the result
    Response<Key> response = vpcService.createKey(createKeyOptionsModel).execute();
    assertNotNull(response);
    Key responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createKeyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createKey operation with and without retries enabled
  @Test
  public void testCreateKeyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateKeyWOptions();

    vpcService.disableRetries();
    testCreateKeyWOptions();
  }

  // Test the createKey operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateKeyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createKey(null).execute();
  }

  // Test the deleteKey operation with a valid options model parameter
  @Test
  public void testDeleteKeyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteKeyPath = "/keys/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteKeyOptions model
    DeleteKeyOptions deleteKeyOptionsModel = new DeleteKeyOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteKey() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteKey(deleteKeyOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteKeyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteKey operation with and without retries enabled
  @Test
  public void testDeleteKeyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteKeyWOptions();

    vpcService.disableRetries();
    testDeleteKeyWOptions();
  }

  // Test the deleteKey operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteKeyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteKey(null).execute();
  }

  // Test the getKey operation with a valid options model parameter
  @Test
  public void testGetKeyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"length\": 2048, \"name\": \"my-key\", \"public_key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"type\": \"rsa\"}";
    String getKeyPath = "/keys/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetKeyOptions model
    GetKeyOptions getKeyOptionsModel = new GetKeyOptions.Builder()
      .id("testString")
      .build();

    // Invoke getKey() with a valid options model and verify the result
    Response<Key> response = vpcService.getKey(getKeyOptionsModel).execute();
    assertNotNull(response);
    Key responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getKeyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getKey operation with and without retries enabled
  @Test
  public void testGetKeyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetKeyWOptions();

    vpcService.disableRetries();
    testGetKeyWOptions();
  }

  // Test the getKey operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetKeyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getKey(null).execute();
  }

  // Test the updateKey operation with a valid options model parameter
  @Test
  public void testUpdateKeyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"length\": 2048, \"name\": \"my-key\", \"public_key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"type\": \"rsa\"}";
    String updateKeyPath = "/keys/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the KeyPatch model
    KeyPatch keyPatchModel = new KeyPatch.Builder()
      .name("my-key")
      .build();
    Map<String, Object> keyPatchModelAsPatch = keyPatchModel.asPatch();

    // Construct an instance of the UpdateKeyOptions model
    UpdateKeyOptions updateKeyOptionsModel = new UpdateKeyOptions.Builder()
      .id("testString")
      .keyPatch(keyPatchModelAsPatch)
      .build();

    // Invoke updateKey() with a valid options model and verify the result
    Response<Key> response = vpcService.updateKey(updateKeyOptionsModel).execute();
    assertNotNull(response);
    Key responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateKeyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateKey operation with and without retries enabled
  @Test
  public void testUpdateKeyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateKeyWOptions();

    vpcService.disableRetries();
    testUpdateKeyWOptions();
  }

  // Test the updateKey operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateKeyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateKey(null).execute();
  }

  // Test the listInstanceProfiles operation with a valid options model parameter
  @Test
  public void testListInstanceProfilesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"profiles\": [{\"bandwidth\": {\"type\": \"fixed\", \"value\": 20000}, \"disks\": [{\"quantity\": {\"type\": \"fixed\", \"value\": 4}, \"size\": {\"type\": \"fixed\", \"value\": 100}, \"supported_interface_types\": {\"default\": \"nvme\", \"type\": \"enum\", \"values\": [\"nvme\"]}}], \"family\": \"balanced\", \"gpu_count\": {\"type\": \"fixed\", \"value\": 2}, \"gpu_manufacturer\": {\"type\": \"enum\", \"values\": [\"nvidia\"]}, \"gpu_memory\": {\"type\": \"fixed\", \"value\": 16}, \"gpu_model\": {\"type\": \"enum\", \"values\": [\"Tesla V100\"]}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"memory\": {\"type\": \"fixed\", \"value\": 16}, \"name\": \"bx2-4x16\", \"os_architecture\": {\"default\": \"xDefault\", \"type\": \"enum\", \"values\": [\"amd64\"]}, \"port_speed\": {\"type\": \"fixed\", \"value\": 1000}, \"total_volume_bandwidth\": {\"type\": \"fixed\", \"value\": 20000}, \"vcpu_architecture\": {\"default\": \"xDefault\", \"type\": \"fixed\", \"value\": \"amd64\"}, \"vcpu_count\": {\"type\": \"fixed\", \"value\": 16}}]}";
    String listInstanceProfilesPath = "/instance/profiles";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceProfilesOptions model
    ListInstanceProfilesOptions listInstanceProfilesOptionsModel = new ListInstanceProfilesOptions();

    // Invoke listInstanceProfiles() with a valid options model and verify the result
    Response<InstanceProfileCollection> response = vpcService.listInstanceProfiles(listInstanceProfilesOptionsModel).execute();
    assertNotNull(response);
    InstanceProfileCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceProfilesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceProfiles operation with and without retries enabled
  @Test
  public void testListInstanceProfilesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceProfilesWOptions();

    vpcService.disableRetries();
    testListInstanceProfilesWOptions();
  }

  // Test the getInstanceProfile operation with a valid options model parameter
  @Test
  public void testGetInstanceProfileWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": {\"type\": \"fixed\", \"value\": 20000}, \"disks\": [{\"quantity\": {\"type\": \"fixed\", \"value\": 4}, \"size\": {\"type\": \"fixed\", \"value\": 100}, \"supported_interface_types\": {\"default\": \"nvme\", \"type\": \"enum\", \"values\": [\"nvme\"]}}], \"family\": \"balanced\", \"gpu_count\": {\"type\": \"fixed\", \"value\": 2}, \"gpu_manufacturer\": {\"type\": \"enum\", \"values\": [\"nvidia\"]}, \"gpu_memory\": {\"type\": \"fixed\", \"value\": 16}, \"gpu_model\": {\"type\": \"enum\", \"values\": [\"Tesla V100\"]}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"memory\": {\"type\": \"fixed\", \"value\": 16}, \"name\": \"bx2-4x16\", \"os_architecture\": {\"default\": \"xDefault\", \"type\": \"enum\", \"values\": [\"amd64\"]}, \"port_speed\": {\"type\": \"fixed\", \"value\": 1000}, \"total_volume_bandwidth\": {\"type\": \"fixed\", \"value\": 20000}, \"vcpu_architecture\": {\"default\": \"xDefault\", \"type\": \"fixed\", \"value\": \"amd64\"}, \"vcpu_count\": {\"type\": \"fixed\", \"value\": 16}}";
    String getInstanceProfilePath = "/instance/profiles/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceProfileOptions model
    GetInstanceProfileOptions getInstanceProfileOptionsModel = new GetInstanceProfileOptions.Builder()
      .name("testString")
      .build();

    // Invoke getInstanceProfile() with a valid options model and verify the result
    Response<InstanceProfile> response = vpcService.getInstanceProfile(getInstanceProfileOptionsModel).execute();
    assertNotNull(response);
    InstanceProfile responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceProfilePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceProfile operation with and without retries enabled
  @Test
  public void testGetInstanceProfileWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceProfileWOptions();

    vpcService.disableRetries();
    testGetInstanceProfileWOptions();
  }

  // Test the getInstanceProfile operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceProfileNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceProfile(null).execute();
  }

  // Test the listInstanceTemplates operation with a valid options model parameter
  @Test
  public void testListInstanceTemplatesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"templates\": [{\"availability_policy\": {\"host_failure\": \"restart\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"default_trusted_profile\": {\"auto_link\": false, \"target\": {\"id\": \"Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5\"}}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"keys\": [{\"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\"}], \"metadata_service\": {\"enabled\": false}, \"name\": \"my-instance-template\", \"network_interfaces\": [{\"allow_ip_spoofing\": true, \"name\": \"my-network-interface\", \"primary_ip\": {\"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"security_groups\": [{\"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}], \"placement_target\": {\"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\"}, \"profile\": {\"name\": \"bx2-4x16\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"total_volume_bandwidth\": 500, \"user_data\": \"userData\", \"volume_attachments\": [{\"delete_volume_on_instance_delete\": false, \"name\": \"my-volume-attachment\", \"volume\": {\"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\"}}], \"vpc\": {\"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\"}, \"boot_volume_attachment\": {\"delete_volume_on_instance_delete\": true, \"name\": \"my-volume-attachment\", \"volume\": {\"capacity\": 250, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"iops\": 10000, \"name\": \"my-volume\", \"profile\": {\"name\": \"general-purpose\"}, \"user_tags\": [\"userTags\"]}}, \"image\": {\"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\"}, \"primary_network_interface\": {\"allow_ip_spoofing\": true, \"name\": \"my-network-interface\", \"primary_ip\": {\"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"security_groups\": [{\"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}, \"zone\": {\"name\": \"us-south-1\"}}], \"total_count\": 132}";
    String listInstanceTemplatesPath = "/instance/templates";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceTemplatesOptions model
    ListInstanceTemplatesOptions listInstanceTemplatesOptionsModel = new ListInstanceTemplatesOptions();

    // Invoke listInstanceTemplates() with a valid options model and verify the result
    Response<InstanceTemplateCollection> response = vpcService.listInstanceTemplates(listInstanceTemplatesOptionsModel).execute();
    assertNotNull(response);
    InstanceTemplateCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceTemplatesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceTemplates operation with and without retries enabled
  @Test
  public void testListInstanceTemplatesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceTemplatesWOptions();

    vpcService.disableRetries();
    testListInstanceTemplatesWOptions();
  }

  // Test the createInstanceTemplate operation with a valid options model parameter
  @Test
  public void testCreateInstanceTemplateWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"availability_policy\": {\"host_failure\": \"restart\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"default_trusted_profile\": {\"auto_link\": false, \"target\": {\"id\": \"Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5\"}}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"keys\": [{\"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\"}], \"metadata_service\": {\"enabled\": false}, \"name\": \"my-instance-template\", \"network_interfaces\": [{\"allow_ip_spoofing\": true, \"name\": \"my-network-interface\", \"primary_ip\": {\"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"security_groups\": [{\"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}], \"placement_target\": {\"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\"}, \"profile\": {\"name\": \"bx2-4x16\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"total_volume_bandwidth\": 500, \"user_data\": \"userData\", \"volume_attachments\": [{\"delete_volume_on_instance_delete\": false, \"name\": \"my-volume-attachment\", \"volume\": {\"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\"}}], \"vpc\": {\"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\"}, \"boot_volume_attachment\": {\"delete_volume_on_instance_delete\": true, \"name\": \"my-volume-attachment\", \"volume\": {\"capacity\": 250, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"iops\": 10000, \"name\": \"my-volume\", \"profile\": {\"name\": \"general-purpose\"}, \"user_tags\": [\"userTags\"]}}, \"image\": {\"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\"}, \"primary_network_interface\": {\"allow_ip_spoofing\": true, \"name\": \"my-network-interface\", \"primary_ip\": {\"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"security_groups\": [{\"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}, \"zone\": {\"name\": \"us-south-1\"}}";
    String createInstanceTemplatePath = "/instance/templates";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceAvailabilityPrototype model
    InstanceAvailabilityPrototype instanceAvailabilityPrototypeModel = new InstanceAvailabilityPrototype.Builder()
      .hostFailure("restart")
      .build();

    // Construct an instance of the TrustedProfileIdentityTrustedProfileById model
    TrustedProfileIdentityTrustedProfileById trustedProfileIdentityModel = new TrustedProfileIdentityTrustedProfileById.Builder()
      .id("Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5")
      .build();

    // Construct an instance of the InstanceDefaultTrustedProfilePrototype model
    InstanceDefaultTrustedProfilePrototype instanceDefaultTrustedProfilePrototypeModel = new InstanceDefaultTrustedProfilePrototype.Builder()
      .autoLink(false)
      .target(trustedProfileIdentityModel)
      .build();

    // Construct an instance of the KeyIdentityById model
    KeyIdentityById keyIdentityModel = new KeyIdentityById.Builder()
      .id("363f6d70-0000-0001-0000-00000013b96c")
      .build();

    // Construct an instance of the InstanceMetadataServicePrototype model
    InstanceMetadataServicePrototype instanceMetadataServicePrototypeModel = new InstanceMetadataServicePrototype.Builder()
      .enabled(false)
      .build();

    // Construct an instance of the NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext model
    NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext networkInterfaceIpPrototypeModel = new NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the NetworkInterfacePrototype model
    NetworkInterfacePrototype networkInterfacePrototypeModel = new NetworkInterfacePrototype.Builder()
      .allowIpSpoofing(true)
      .name("my-network-interface")
      .primaryIp(networkInterfaceIpPrototypeModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .build();

    // Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById model
    InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById instancePlacementTargetPrototypeModel = new InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById.Builder()
      .id("1e09281b-f177-46fb-baf1-bc152b2e391a")
      .build();

    // Construct an instance of the InstanceProfileIdentityByName model
    InstanceProfileIdentityByName instanceProfileIdentityModel = new InstanceProfileIdentityByName.Builder()
      .name("bx2-2x8")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById model
    VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById volumeAttachmentPrototypeVolumeModel = new VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById.Builder()
      .id("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
      .build();

    // Construct an instance of the VolumeAttachmentPrototype model
    VolumeAttachmentPrototype volumeAttachmentPrototypeModel = new VolumeAttachmentPrototype.Builder()
      .deleteVolumeOnInstanceDelete(false)
      .name("my-volume-attachment")
      .volume(volumeAttachmentPrototypeVolumeModel)
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("dc201ab2-8536-4904-86a8-084d84582133")
      .build();

    // Construct an instance of the EncryptionKeyIdentityByCRN model
    EncryptionKeyIdentityByCRN encryptionKeyIdentityModel = new EncryptionKeyIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
      .build();

    // Construct an instance of the VolumeProfileIdentityByName model
    VolumeProfileIdentityByName volumeProfileIdentityModel = new VolumeProfileIdentityByName.Builder()
      .name("general-purpose")
      .build();

    // Construct an instance of the VolumePrototypeInstanceByImageContext model
    VolumePrototypeInstanceByImageContext volumePrototypeInstanceByImageContextModel = new VolumePrototypeInstanceByImageContext.Builder()
      .capacity(Long.valueOf("250"))
      .encryptionKey(encryptionKeyIdentityModel)
      .iops(Long.valueOf("10000"))
      .name("my-volume")
      .profile(volumeProfileIdentityModel)
      .userTags(java.util.Arrays.asList("testString"))
      .build();

    // Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
    VolumeAttachmentPrototypeInstanceByImageContext volumeAttachmentPrototypeInstanceByImageContextModel = new VolumeAttachmentPrototypeInstanceByImageContext.Builder()
      .deleteVolumeOnInstanceDelete(true)
      .name("my-volume-attachment")
      .volume(volumePrototypeInstanceByImageContextModel)
      .build();

    // Construct an instance of the ImageIdentityById model
    ImageIdentityById imageIdentityModel = new ImageIdentityById.Builder()
      .id("3f9a2d96-830e-4100-9b4c-663225a3f872")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the InstanceTemplatePrototypeInstanceByImage model
    InstanceTemplatePrototypeInstanceByImage instanceTemplatePrototypeModel = new InstanceTemplatePrototypeInstanceByImage.Builder()
      .availabilityPolicy(instanceAvailabilityPrototypeModel)
      .defaultTrustedProfile(instanceDefaultTrustedProfilePrototypeModel)
      .keys(java.util.Arrays.asList(keyIdentityModel))
      .metadataService(instanceMetadataServicePrototypeModel)
      .name("my-instance-template")
      .networkInterfaces(java.util.Arrays.asList(networkInterfacePrototypeModel))
      .placementTarget(instancePlacementTargetPrototypeModel)
      .profile(instanceProfileIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .totalVolumeBandwidth(Long.valueOf("500"))
      .userData("testString")
      .volumeAttachments(java.util.Arrays.asList(volumeAttachmentPrototypeModel))
      .vpc(vpcIdentityModel)
      .bootVolumeAttachment(volumeAttachmentPrototypeInstanceByImageContextModel)
      .image(imageIdentityModel)
      .primaryNetworkInterface(networkInterfacePrototypeModel)
      .zone(zoneIdentityModel)
      .build();

    // Construct an instance of the CreateInstanceTemplateOptions model
    CreateInstanceTemplateOptions createInstanceTemplateOptionsModel = new CreateInstanceTemplateOptions.Builder()
      .instanceTemplatePrototype(instanceTemplatePrototypeModel)
      .build();

    // Invoke createInstanceTemplate() with a valid options model and verify the result
    Response<InstanceTemplate> response = vpcService.createInstanceTemplate(createInstanceTemplateOptionsModel).execute();
    assertNotNull(response);
    InstanceTemplate responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceTemplatePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceTemplate operation with and without retries enabled
  @Test
  public void testCreateInstanceTemplateWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceTemplateWOptions();

    vpcService.disableRetries();
    testCreateInstanceTemplateWOptions();
  }

  // Test the createInstanceTemplate operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceTemplateNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceTemplate(null).execute();
  }

  // Test the deleteInstanceTemplate operation with a valid options model parameter
  @Test
  public void testDeleteInstanceTemplateWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceTemplatePath = "/instance/templates/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceTemplateOptions model
    DeleteInstanceTemplateOptions deleteInstanceTemplateOptionsModel = new DeleteInstanceTemplateOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteInstanceTemplate() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceTemplate(deleteInstanceTemplateOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceTemplatePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceTemplate operation with and without retries enabled
  @Test
  public void testDeleteInstanceTemplateWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceTemplateWOptions();

    vpcService.disableRetries();
    testDeleteInstanceTemplateWOptions();
  }

  // Test the deleteInstanceTemplate operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceTemplateNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceTemplate(null).execute();
  }

  // Test the getInstanceTemplate operation with a valid options model parameter
  @Test
  public void testGetInstanceTemplateWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"availability_policy\": {\"host_failure\": \"restart\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"default_trusted_profile\": {\"auto_link\": false, \"target\": {\"id\": \"Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5\"}}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"keys\": [{\"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\"}], \"metadata_service\": {\"enabled\": false}, \"name\": \"my-instance-template\", \"network_interfaces\": [{\"allow_ip_spoofing\": true, \"name\": \"my-network-interface\", \"primary_ip\": {\"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"security_groups\": [{\"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}], \"placement_target\": {\"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\"}, \"profile\": {\"name\": \"bx2-4x16\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"total_volume_bandwidth\": 500, \"user_data\": \"userData\", \"volume_attachments\": [{\"delete_volume_on_instance_delete\": false, \"name\": \"my-volume-attachment\", \"volume\": {\"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\"}}], \"vpc\": {\"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\"}, \"boot_volume_attachment\": {\"delete_volume_on_instance_delete\": true, \"name\": \"my-volume-attachment\", \"volume\": {\"capacity\": 250, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"iops\": 10000, \"name\": \"my-volume\", \"profile\": {\"name\": \"general-purpose\"}, \"user_tags\": [\"userTags\"]}}, \"image\": {\"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\"}, \"primary_network_interface\": {\"allow_ip_spoofing\": true, \"name\": \"my-network-interface\", \"primary_ip\": {\"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"security_groups\": [{\"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}, \"zone\": {\"name\": \"us-south-1\"}}";
    String getInstanceTemplatePath = "/instance/templates/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceTemplateOptions model
    GetInstanceTemplateOptions getInstanceTemplateOptionsModel = new GetInstanceTemplateOptions.Builder()
      .id("testString")
      .build();

    // Invoke getInstanceTemplate() with a valid options model and verify the result
    Response<InstanceTemplate> response = vpcService.getInstanceTemplate(getInstanceTemplateOptionsModel).execute();
    assertNotNull(response);
    InstanceTemplate responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceTemplatePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceTemplate operation with and without retries enabled
  @Test
  public void testGetInstanceTemplateWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceTemplateWOptions();

    vpcService.disableRetries();
    testGetInstanceTemplateWOptions();
  }

  // Test the getInstanceTemplate operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceTemplateNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceTemplate(null).execute();
  }

  // Test the updateInstanceTemplate operation with a valid options model parameter
  @Test
  public void testUpdateInstanceTemplateWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"availability_policy\": {\"host_failure\": \"restart\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"default_trusted_profile\": {\"auto_link\": false, \"target\": {\"id\": \"Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5\"}}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"keys\": [{\"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\"}], \"metadata_service\": {\"enabled\": false}, \"name\": \"my-instance-template\", \"network_interfaces\": [{\"allow_ip_spoofing\": true, \"name\": \"my-network-interface\", \"primary_ip\": {\"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"security_groups\": [{\"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}], \"placement_target\": {\"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\"}, \"profile\": {\"name\": \"bx2-4x16\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"total_volume_bandwidth\": 500, \"user_data\": \"userData\", \"volume_attachments\": [{\"delete_volume_on_instance_delete\": false, \"name\": \"my-volume-attachment\", \"volume\": {\"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\"}}], \"vpc\": {\"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\"}, \"boot_volume_attachment\": {\"delete_volume_on_instance_delete\": true, \"name\": \"my-volume-attachment\", \"volume\": {\"capacity\": 250, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"iops\": 10000, \"name\": \"my-volume\", \"profile\": {\"name\": \"general-purpose\"}, \"user_tags\": [\"userTags\"]}}, \"image\": {\"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\"}, \"primary_network_interface\": {\"allow_ip_spoofing\": true, \"name\": \"my-network-interface\", \"primary_ip\": {\"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"security_groups\": [{\"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}, \"zone\": {\"name\": \"us-south-1\"}}";
    String updateInstanceTemplatePath = "/instance/templates/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceTemplatePatch model
    InstanceTemplatePatch instanceTemplatePatchModel = new InstanceTemplatePatch.Builder()
      .name("my-instance-template")
      .build();
    Map<String, Object> instanceTemplatePatchModelAsPatch = instanceTemplatePatchModel.asPatch();

    // Construct an instance of the UpdateInstanceTemplateOptions model
    UpdateInstanceTemplateOptions updateInstanceTemplateOptionsModel = new UpdateInstanceTemplateOptions.Builder()
      .id("testString")
      .instanceTemplatePatch(instanceTemplatePatchModelAsPatch)
      .build();

    // Invoke updateInstanceTemplate() with a valid options model and verify the result
    Response<InstanceTemplate> response = vpcService.updateInstanceTemplate(updateInstanceTemplateOptionsModel).execute();
    assertNotNull(response);
    InstanceTemplate responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceTemplatePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceTemplate operation with and without retries enabled
  @Test
  public void testUpdateInstanceTemplateWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceTemplateWOptions();

    vpcService.disableRetries();
    testUpdateInstanceTemplateWOptions();
  }

  // Test the updateInstanceTemplate operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceTemplateNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceTemplate(null).execute();
  }

  // Test the listInstances operation with a valid options model parameter
  @Test
  public void testListInstancesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20\"}, \"instances\": [{\"availability_policy\": {\"host_failure\": \"restart\"}, \"bandwidth\": 1000, \"boot_volume_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}}, \"catalog_offering\": {\"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"dedicated_host\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}, \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}], \"gpu\": {\"count\": 1, \"manufacturer\": \"nvidia\", \"memory\": 1, \"model\": \"Tesla V100\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"memory\": 8, \"metadata_service\": {\"enabled\": false}, \"name\": \"my-instance\", \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"placement_target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"instance\", \"startable\": false, \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_start_storage\", \"message\": \"The virtual server instance is unusable because the encryption key for the boot volume\nhas been deleted\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"total_network_bandwidth\": 500, \"total_volume_bandwidth\": 500, \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4}, \"volume_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listInstancesPath = "/instances";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstancesOptions model
    ListInstancesOptions listInstancesOptionsModel = new ListInstancesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .vpcId("testString")
      .vpcCrn("testString")
      .vpcName("testString")
      .dedicatedHostId("testString")
      .dedicatedHostCrn("testString")
      .dedicatedHostName("testString")
      .placementGroupId("testString")
      .placementGroupCrn("testString")
      .placementGroupName("testString")
      .build();

    // Invoke listInstances() with a valid options model and verify the result
    Response<InstanceCollection> response = vpcService.listInstances(listInstancesOptionsModel).execute();
    assertNotNull(response);
    InstanceCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstancesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "testString");
    assertEquals(query.get("vpc.id"), "testString");
    assertEquals(query.get("vpc.crn"), "testString");
    assertEquals(query.get("vpc.name"), "testString");
    assertEquals(query.get("dedicated_host.id"), "testString");
    assertEquals(query.get("dedicated_host.crn"), "testString");
    assertEquals(query.get("dedicated_host.name"), "testString");
    assertEquals(query.get("placement_group.id"), "testString");
    assertEquals(query.get("placement_group.crn"), "testString");
    assertEquals(query.get("placement_group.name"), "testString");
  }

  // Test the listInstances operation with and without retries enabled
  @Test
  public void testListInstancesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstancesWOptions();

    vpcService.disableRetries();
    testListInstancesWOptions();
  }

  // Test the listInstances operation using the InstancesPager.getNext() method
  @Test
  public void testListInstancesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"instances\":[{\"availability_policy\":{\"host_failure\":\"restart\"},\"bandwidth\":1000,\"boot_volume_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"80b3e36e-41f4-40e9-bd56-beae81792a68\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"}},\"catalog_offering\":{\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"dedicated_host\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"},\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"interface_type\":\"nvme\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\",\"size\":100}],\"gpu\":{\"count\":1,\"manufacturer\":\"nvidia\",\"memory\":1,\"model\":\"Tesla V100\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\"},\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"memory\":8,\"metadata_service\":{\"enabled\":false},\"name\":\"my-instance\",\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"placement_target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-host-group\",\"resource_type\":\"dedicated_host_group\"},\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"instance\",\"startable\":false,\"status\":\"deleting\",\"status_reasons\":[{\"code\":\"cannot_start_storage\",\"message\":\"The virtual server instance is unusable because the encryption key for the boot volume\\nhas been deleted\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"total_network_bandwidth\":500,\"total_volume_bandwidth\":500,\"vcpu\":{\"architecture\":\"amd64\",\"count\":4},\"volume_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"80b3e36e-41f4-40e9-bd56-beae81792a68\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"}}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"instances\":[{\"availability_policy\":{\"host_failure\":\"restart\"},\"bandwidth\":1000,\"boot_volume_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"80b3e36e-41f4-40e9-bd56-beae81792a68\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"}},\"catalog_offering\":{\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"dedicated_host\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"},\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"interface_type\":\"nvme\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\",\"size\":100}],\"gpu\":{\"count\":1,\"manufacturer\":\"nvidia\",\"memory\":1,\"model\":\"Tesla V100\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\"},\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"memory\":8,\"metadata_service\":{\"enabled\":false},\"name\":\"my-instance\",\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"placement_target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-host-group\",\"resource_type\":\"dedicated_host_group\"},\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"instance\",\"startable\":false,\"status\":\"deleting\",\"status_reasons\":[{\"code\":\"cannot_start_storage\",\"message\":\"The virtual server instance is unusable because the encryption key for the boot volume\\nhas been deleted\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"total_network_bandwidth\":500,\"total_volume_bandwidth\":500,\"vcpu\":{\"architecture\":\"amd64\",\"count\":4},\"volume_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"80b3e36e-41f4-40e9-bd56-beae81792a68\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"}}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstancesOptions listInstancesOptions = new ListInstancesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .vpcId("testString")
      .vpcCrn("testString")
      .vpcName("testString")
      .dedicatedHostId("testString")
      .dedicatedHostCrn("testString")
      .dedicatedHostName("testString")
      .placementGroupId("testString")
      .placementGroupCrn("testString")
      .placementGroupName("testString")
      .build();

    List<Instance> allResults = new ArrayList<>();
    InstancesPager pager = new InstancesPager(vpcService, listInstancesOptions);
    while (pager.hasNext()) {
      List<Instance> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstances operation using the InstancesPager.getAll() method
  @Test
  public void testListInstancesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"instances\":[{\"availability_policy\":{\"host_failure\":\"restart\"},\"bandwidth\":1000,\"boot_volume_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"80b3e36e-41f4-40e9-bd56-beae81792a68\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"}},\"catalog_offering\":{\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"dedicated_host\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"},\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"interface_type\":\"nvme\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\",\"size\":100}],\"gpu\":{\"count\":1,\"manufacturer\":\"nvidia\",\"memory\":1,\"model\":\"Tesla V100\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\"},\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"memory\":8,\"metadata_service\":{\"enabled\":false},\"name\":\"my-instance\",\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"placement_target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-host-group\",\"resource_type\":\"dedicated_host_group\"},\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"instance\",\"startable\":false,\"status\":\"deleting\",\"status_reasons\":[{\"code\":\"cannot_start_storage\",\"message\":\"The virtual server instance is unusable because the encryption key for the boot volume\\nhas been deleted\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"total_network_bandwidth\":500,\"total_volume_bandwidth\":500,\"vcpu\":{\"architecture\":\"amd64\",\"count\":4},\"volume_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"80b3e36e-41f4-40e9-bd56-beae81792a68\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"}}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"instances\":[{\"availability_policy\":{\"host_failure\":\"restart\"},\"bandwidth\":1000,\"boot_volume_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"80b3e36e-41f4-40e9-bd56-beae81792a68\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"}},\"catalog_offering\":{\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"dedicated_host\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"},\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"interface_type\":\"nvme\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\",\"size\":100}],\"gpu\":{\"count\":1,\"manufacturer\":\"nvidia\",\"memory\":1,\"model\":\"Tesla V100\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\"},\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"memory\":8,\"metadata_service\":{\"enabled\":false},\"name\":\"my-instance\",\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"placement_target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-host-group\",\"resource_type\":\"dedicated_host_group\"},\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"instance\",\"startable\":false,\"status\":\"deleting\",\"status_reasons\":[{\"code\":\"cannot_start_storage\",\"message\":\"The virtual server instance is unusable because the encryption key for the boot volume\\nhas been deleted\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"total_network_bandwidth\":500,\"total_volume_bandwidth\":500,\"vcpu\":{\"architecture\":\"amd64\",\"count\":4},\"volume_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"80b3e36e-41f4-40e9-bd56-beae81792a68\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"}}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstancesOptions listInstancesOptions = new ListInstancesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .vpcId("testString")
      .vpcCrn("testString")
      .vpcName("testString")
      .dedicatedHostId("testString")
      .dedicatedHostCrn("testString")
      .dedicatedHostName("testString")
      .placementGroupId("testString")
      .placementGroupCrn("testString")
      .placementGroupName("testString")
      .build();

    InstancesPager pager = new InstancesPager(vpcService, listInstancesOptions);
    List<Instance> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createInstance operation with a valid options model parameter
  @Test
  public void testCreateInstanceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"availability_policy\": {\"host_failure\": \"restart\"}, \"bandwidth\": 1000, \"boot_volume_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}}, \"catalog_offering\": {\"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"dedicated_host\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}, \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}], \"gpu\": {\"count\": 1, \"manufacturer\": \"nvidia\", \"memory\": 1, \"model\": \"Tesla V100\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"memory\": 8, \"metadata_service\": {\"enabled\": false}, \"name\": \"my-instance\", \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"placement_target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"instance\", \"startable\": false, \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_start_storage\", \"message\": \"The virtual server instance is unusable because the encryption key for the boot volume\nhas been deleted\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"total_network_bandwidth\": 500, \"total_volume_bandwidth\": 500, \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4}, \"volume_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createInstancePath = "/instances";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceAvailabilityPrototype model
    InstanceAvailabilityPrototype instanceAvailabilityPrototypeModel = new InstanceAvailabilityPrototype.Builder()
      .hostFailure("restart")
      .build();

    // Construct an instance of the TrustedProfileIdentityTrustedProfileById model
    TrustedProfileIdentityTrustedProfileById trustedProfileIdentityModel = new TrustedProfileIdentityTrustedProfileById.Builder()
      .id("Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5")
      .build();

    // Construct an instance of the InstanceDefaultTrustedProfilePrototype model
    InstanceDefaultTrustedProfilePrototype instanceDefaultTrustedProfilePrototypeModel = new InstanceDefaultTrustedProfilePrototype.Builder()
      .autoLink(false)
      .target(trustedProfileIdentityModel)
      .build();

    // Construct an instance of the KeyIdentityById model
    KeyIdentityById keyIdentityModel = new KeyIdentityById.Builder()
      .id("363f6d70-0000-0001-0000-00000013b96c")
      .build();

    // Construct an instance of the InstanceMetadataServicePrototype model
    InstanceMetadataServicePrototype instanceMetadataServicePrototypeModel = new InstanceMetadataServicePrototype.Builder()
      .enabled(false)
      .build();

    // Construct an instance of the NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext model
    NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext networkInterfaceIpPrototypeModel = new NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the NetworkInterfacePrototype model
    NetworkInterfacePrototype networkInterfacePrototypeModel = new NetworkInterfacePrototype.Builder()
      .allowIpSpoofing(true)
      .name("my-network-interface")
      .primaryIp(networkInterfaceIpPrototypeModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .build();

    // Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById model
    InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById instancePlacementTargetPrototypeModel = new InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById.Builder()
      .id("0787-8c2a09be-ee18-4af2-8ef4-6a6060732221")
      .build();

    // Construct an instance of the InstanceProfileIdentityByName model
    InstanceProfileIdentityByName instanceProfileIdentityModel = new InstanceProfileIdentityByName.Builder()
      .name("bx2-2x8")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the VolumeProfileIdentityByName model
    VolumeProfileIdentityByName volumeProfileIdentityModel = new VolumeProfileIdentityByName.Builder()
      .name("5iops-tier")
      .build();

    // Construct an instance of the EncryptionKeyIdentityByCRN model
    EncryptionKeyIdentityByCRN encryptionKeyIdentityModel = new EncryptionKeyIdentityByCRN.Builder()
      .crn("crn:[...]")
      .build();

    // Construct an instance of the VolumeAttachmentPrototypeVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
    VolumeAttachmentPrototypeVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity volumeAttachmentPrototypeVolumeModel = new VolumeAttachmentPrototypeVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity.Builder()
      .iops(Long.valueOf("10000"))
      .name("my-data-volume")
      .profile(volumeProfileIdentityModel)
      .userTags(java.util.Arrays.asList("testString"))
      .capacity(Long.valueOf("1000"))
      .encryptionKey(encryptionKeyIdentityModel)
      .build();

    // Construct an instance of the VolumeAttachmentPrototype model
    VolumeAttachmentPrototype volumeAttachmentPrototypeModel = new VolumeAttachmentPrototype.Builder()
      .deleteVolumeOnInstanceDelete(false)
      .name("my-volume-attachment")
      .volume(volumeAttachmentPrototypeVolumeModel)
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("f0aae929-7047-46d1-92e1-9102b07a7f6f")
      .build();

    // Construct an instance of the VolumePrototypeInstanceByImageContext model
    VolumePrototypeInstanceByImageContext volumePrototypeInstanceByImageContextModel = new VolumePrototypeInstanceByImageContext.Builder()
      .capacity(Long.valueOf("250"))
      .encryptionKey(encryptionKeyIdentityModel)
      .iops(Long.valueOf("10000"))
      .name("my-boot-volume")
      .profile(volumeProfileIdentityModel)
      .userTags(java.util.Arrays.asList("testString"))
      .build();

    // Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
    VolumeAttachmentPrototypeInstanceByImageContext volumeAttachmentPrototypeInstanceByImageContextModel = new VolumeAttachmentPrototypeInstanceByImageContext.Builder()
      .deleteVolumeOnInstanceDelete(true)
      .name("my-volume-attachment")
      .volume(volumePrototypeInstanceByImageContextModel)
      .build();

    // Construct an instance of the ImageIdentityById model
    ImageIdentityById imageIdentityModel = new ImageIdentityById.Builder()
      .id("9aaf3bcb-dcd7-4de7-bb60-24e39ff9d366")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the InstancePrototypeInstanceByImage model
    InstancePrototypeInstanceByImage instancePrototypeModel = new InstancePrototypeInstanceByImage.Builder()
      .availabilityPolicy(instanceAvailabilityPrototypeModel)
      .defaultTrustedProfile(instanceDefaultTrustedProfilePrototypeModel)
      .keys(java.util.Arrays.asList(keyIdentityModel))
      .metadataService(instanceMetadataServicePrototypeModel)
      .name("my-instance")
      .networkInterfaces(java.util.Arrays.asList(networkInterfacePrototypeModel))
      .placementTarget(instancePlacementTargetPrototypeModel)
      .profile(instanceProfileIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .totalVolumeBandwidth(Long.valueOf("500"))
      .userData("testString")
      .volumeAttachments(java.util.Arrays.asList(volumeAttachmentPrototypeModel))
      .vpc(vpcIdentityModel)
      .bootVolumeAttachment(volumeAttachmentPrototypeInstanceByImageContextModel)
      .image(imageIdentityModel)
      .primaryNetworkInterface(networkInterfacePrototypeModel)
      .zone(zoneIdentityModel)
      .build();

    // Construct an instance of the CreateInstanceOptions model
    CreateInstanceOptions createInstanceOptionsModel = new CreateInstanceOptions.Builder()
      .instancePrototype(instancePrototypeModel)
      .build();

    // Invoke createInstance() with a valid options model and verify the result
    Response<Instance> response = vpcService.createInstance(createInstanceOptionsModel).execute();
    assertNotNull(response);
    Instance responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstancePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstance operation with and without retries enabled
  @Test
  public void testCreateInstanceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceWOptions();

    vpcService.disableRetries();
    testCreateInstanceWOptions();
  }

  // Test the createInstance operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstance(null).execute();
  }

  // Test the deleteInstance operation with a valid options model parameter
  @Test
  public void testDeleteInstanceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstancePath = "/instances/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceOptions model
    DeleteInstanceOptions deleteInstanceOptionsModel = new DeleteInstanceOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteInstance() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstance(deleteInstanceOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstancePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstance operation with and without retries enabled
  @Test
  public void testDeleteInstanceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceWOptions();

    vpcService.disableRetries();
    testDeleteInstanceWOptions();
  }

  // Test the deleteInstance operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstance(null).execute();
  }

  // Test the getInstance operation with a valid options model parameter
  @Test
  public void testGetInstanceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"availability_policy\": {\"host_failure\": \"restart\"}, \"bandwidth\": 1000, \"boot_volume_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}}, \"catalog_offering\": {\"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"dedicated_host\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}, \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}], \"gpu\": {\"count\": 1, \"manufacturer\": \"nvidia\", \"memory\": 1, \"model\": \"Tesla V100\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"memory\": 8, \"metadata_service\": {\"enabled\": false}, \"name\": \"my-instance\", \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"placement_target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"instance\", \"startable\": false, \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_start_storage\", \"message\": \"The virtual server instance is unusable because the encryption key for the boot volume\nhas been deleted\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"total_network_bandwidth\": 500, \"total_volume_bandwidth\": 500, \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4}, \"volume_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getInstancePath = "/instances/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceOptions model
    GetInstanceOptions getInstanceOptionsModel = new GetInstanceOptions.Builder()
      .id("testString")
      .build();

    // Invoke getInstance() with a valid options model and verify the result
    Response<Instance> response = vpcService.getInstance(getInstanceOptionsModel).execute();
    assertNotNull(response);
    Instance responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstancePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstance operation with and without retries enabled
  @Test
  public void testGetInstanceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceWOptions();

    vpcService.disableRetries();
    testGetInstanceWOptions();
  }

  // Test the getInstance operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstance(null).execute();
  }

  // Test the updateInstance operation with a valid options model parameter
  @Test
  public void testUpdateInstanceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"availability_policy\": {\"host_failure\": \"restart\"}, \"bandwidth\": 1000, \"boot_volume_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}}, \"catalog_offering\": {\"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/123456:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"dedicated_host\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}, \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}], \"gpu\": {\"count\": 1, \"manufacturer\": \"nvidia\", \"memory\": 1, \"model\": \"Tesla V100\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"memory\": 8, \"metadata_service\": {\"enabled\": false}, \"name\": \"my-instance\", \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"placement_target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"instance\", \"startable\": false, \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_start_storage\", \"message\": \"The virtual server instance is unusable because the encryption key for the boot volume\nhas been deleted\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"total_network_bandwidth\": 500, \"total_volume_bandwidth\": 500, \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4}, \"volume_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateInstancePath = "/instances/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceAvailabilityPolicyPatch model
    InstanceAvailabilityPolicyPatch instanceAvailabilityPolicyPatchModel = new InstanceAvailabilityPolicyPatch.Builder()
      .hostFailure("restart")
      .build();

    // Construct an instance of the InstanceMetadataServicePatch model
    InstanceMetadataServicePatch instanceMetadataServicePatchModel = new InstanceMetadataServicePatch.Builder()
      .enabled(true)
      .build();

    // Construct an instance of the InstancePlacementTargetPatchDedicatedHostIdentityDedicatedHostIdentityById model
    InstancePlacementTargetPatchDedicatedHostIdentityDedicatedHostIdentityById instancePlacementTargetPatchModel = new InstancePlacementTargetPatchDedicatedHostIdentityDedicatedHostIdentityById.Builder()
      .id("1e09281b-f177-46fb-baf1-bc152b2e391a")
      .build();

    // Construct an instance of the InstancePatchProfileInstanceProfileIdentityByName model
    InstancePatchProfileInstanceProfileIdentityByName instancePatchProfileModel = new InstancePatchProfileInstanceProfileIdentityByName.Builder()
      .name("bx2-4x16")
      .build();

    // Construct an instance of the InstancePatch model
    InstancePatch instancePatchModel = new InstancePatch.Builder()
      .availabilityPolicy(instanceAvailabilityPolicyPatchModel)
      .metadataService(instanceMetadataServicePatchModel)
      .name("my-instance")
      .placementTarget(instancePlacementTargetPatchModel)
      .profile(instancePatchProfileModel)
      .totalVolumeBandwidth(Long.valueOf("500"))
      .build();
    Map<String, Object> instancePatchModelAsPatch = instancePatchModel.asPatch();

    // Construct an instance of the UpdateInstanceOptions model
    UpdateInstanceOptions updateInstanceOptionsModel = new UpdateInstanceOptions.Builder()
      .id("testString")
      .instancePatch(instancePatchModelAsPatch)
      .build();

    // Invoke updateInstance() with a valid options model and verify the result
    Response<Instance> response = vpcService.updateInstance(updateInstanceOptionsModel).execute();
    assertNotNull(response);
    Instance responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstancePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstance operation with and without retries enabled
  @Test
  public void testUpdateInstanceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceWOptions();

    vpcService.disableRetries();
    testUpdateInstanceWOptions();
  }

  // Test the updateInstance operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstance(null).execute();
  }

  // Test the getInstanceInitialization operation with a valid options model parameter
  @Test
  public void testGetInstanceInitializationWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"default_trusted_profile\": {\"auto_link\": true, \"target\": {\"crn\": \"crn:v1:bluemix:public:iam-identity::a/123456::profile:Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5\", \"id\": \"Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5\", \"resource_type\": \"trusted_profile\"}}, \"keys\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"name\": \"my-key\"}], \"password\": {\"encrypted_password\": \"VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku\", \"encryption_key\": {\"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\"}}}";
    String getInstanceInitializationPath = "/instances/testString/initialization";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceInitializationOptions model
    GetInstanceInitializationOptions getInstanceInitializationOptionsModel = new GetInstanceInitializationOptions.Builder()
      .id("testString")
      .build();

    // Invoke getInstanceInitialization() with a valid options model and verify the result
    Response<InstanceInitialization> response = vpcService.getInstanceInitialization(getInstanceInitializationOptionsModel).execute();
    assertNotNull(response);
    InstanceInitialization responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceInitializationPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceInitialization operation with and without retries enabled
  @Test
  public void testGetInstanceInitializationWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceInitializationWOptions();

    vpcService.disableRetries();
    testGetInstanceInitializationWOptions();
  }

  // Test the getInstanceInitialization operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceInitializationNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceInitialization(null).execute();
  }

  // Test the createInstanceAction operation with a valid options model parameter
  @Test
  public void testCreateInstanceActionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"completed_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"force\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed\", \"id\": \"109a1b6e-1242-4de1-be44-38705e9474ed\", \"started_at\": \"2019-01-01T12:00:00.000Z\", \"status\": \"completed\", \"type\": \"reboot\"}";
    String createInstanceActionPath = "/instances/testString/actions";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateInstanceActionOptions model
    CreateInstanceActionOptions createInstanceActionOptionsModel = new CreateInstanceActionOptions.Builder()
      .instanceId("testString")
      .type("reboot")
      .force(true)
      .build();

    // Invoke createInstanceAction() with a valid options model and verify the result
    Response<InstanceAction> response = vpcService.createInstanceAction(createInstanceActionOptionsModel).execute();
    assertNotNull(response);
    InstanceAction responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceActionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceAction operation with and without retries enabled
  @Test
  public void testCreateInstanceActionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceActionWOptions();

    vpcService.disableRetries();
    testCreateInstanceActionWOptions();
  }

  // Test the createInstanceAction operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceActionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceAction(null).execute();
  }

  // Test the createInstanceConsoleAccessToken operation with a valid options model parameter
  @Test
  public void testCreateInstanceConsoleAccessTokenWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_token\": \"VGhpcyBJcyBhIHRva2Vu\", \"console_type\": \"serial\", \"created_at\": \"2020-07-27T21:50:14.000Z\", \"expires_at\": \"2020-07-27T21:51:14.000Z\", \"force\": false, \"href\": \"wss://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/console?access_token=VGhpcyBJcyBhIHRva2Vu\"}";
    String createInstanceConsoleAccessTokenPath = "/instances/testString/console_access_token";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateInstanceConsoleAccessTokenOptions model
    CreateInstanceConsoleAccessTokenOptions createInstanceConsoleAccessTokenOptionsModel = new CreateInstanceConsoleAccessTokenOptions.Builder()
      .instanceId("testString")
      .consoleType("serial")
      .force(false)
      .build();

    // Invoke createInstanceConsoleAccessToken() with a valid options model and verify the result
    Response<InstanceConsoleAccessToken> response = vpcService.createInstanceConsoleAccessToken(createInstanceConsoleAccessTokenOptionsModel).execute();
    assertNotNull(response);
    InstanceConsoleAccessToken responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceConsoleAccessTokenPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceConsoleAccessToken operation with and without retries enabled
  @Test
  public void testCreateInstanceConsoleAccessTokenWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceConsoleAccessTokenWOptions();

    vpcService.disableRetries();
    testCreateInstanceConsoleAccessTokenWOptions();
  }

  // Test the createInstanceConsoleAccessToken operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceConsoleAccessTokenNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceConsoleAccessToken(null).execute();
  }

  // Test the listInstanceDisks operation with a valid options model parameter
  @Test
  public void testListInstanceDisksWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}]}";
    String listInstanceDisksPath = "/instances/testString/disks";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceDisksOptions model
    ListInstanceDisksOptions listInstanceDisksOptionsModel = new ListInstanceDisksOptions.Builder()
      .instanceId("testString")
      .build();

    // Invoke listInstanceDisks() with a valid options model and verify the result
    Response<InstanceDiskCollection> response = vpcService.listInstanceDisks(listInstanceDisksOptionsModel).execute();
    assertNotNull(response);
    InstanceDiskCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceDisksPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceDisks operation with and without retries enabled
  @Test
  public void testListInstanceDisksWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceDisksWOptions();

    vpcService.disableRetries();
    testListInstanceDisksWOptions();
  }

  // Test the listInstanceDisks operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceDisksNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceDisks(null).execute();
  }

  // Test the getInstanceDisk operation with a valid options model parameter
  @Test
  public void testGetInstanceDiskWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}";
    String getInstanceDiskPath = "/instances/testString/disks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceDiskOptions model
    GetInstanceDiskOptions getInstanceDiskOptionsModel = new GetInstanceDiskOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceDisk() with a valid options model and verify the result
    Response<InstanceDisk> response = vpcService.getInstanceDisk(getInstanceDiskOptionsModel).execute();
    assertNotNull(response);
    InstanceDisk responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceDiskPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceDisk operation with and without retries enabled
  @Test
  public void testGetInstanceDiskWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceDiskWOptions();

    vpcService.disableRetries();
    testGetInstanceDiskWOptions();
  }

  // Test the getInstanceDisk operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceDiskNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceDisk(null).execute();
  }

  // Test the updateInstanceDisk operation with a valid options model parameter
  @Test
  public void testUpdateInstanceDiskWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}";
    String updateInstanceDiskPath = "/instances/testString/disks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceDiskPatch model
    InstanceDiskPatch instanceDiskPatchModel = new InstanceDiskPatch.Builder()
      .name("my-instance-disk-updated")
      .build();
    Map<String, Object> instanceDiskPatchModelAsPatch = instanceDiskPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceDiskOptions model
    UpdateInstanceDiskOptions updateInstanceDiskOptionsModel = new UpdateInstanceDiskOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .instanceDiskPatch(instanceDiskPatchModelAsPatch)
      .build();

    // Invoke updateInstanceDisk() with a valid options model and verify the result
    Response<InstanceDisk> response = vpcService.updateInstanceDisk(updateInstanceDiskOptionsModel).execute();
    assertNotNull(response);
    InstanceDisk responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceDiskPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceDisk operation with and without retries enabled
  @Test
  public void testUpdateInstanceDiskWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceDiskWOptions();

    vpcService.disableRetries();
    testUpdateInstanceDiskWOptions();
  }

  // Test the updateInstanceDisk operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceDiskNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceDisk(null).execute();
  }

  // Test the listInstanceNetworkInterfaces operation with a valid options model parameter
  @Test
  public void testListInstanceNetworkInterfacesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"network_interfaces\": [{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\"}]}";
    String listInstanceNetworkInterfacesPath = "/instances/testString/network_interfaces";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceNetworkInterfacesOptions model
    ListInstanceNetworkInterfacesOptions listInstanceNetworkInterfacesOptionsModel = new ListInstanceNetworkInterfacesOptions.Builder()
      .instanceId("testString")
      .build();

    // Invoke listInstanceNetworkInterfaces() with a valid options model and verify the result
    Response<NetworkInterfaceUnpaginatedCollection> response = vpcService.listInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModel).execute();
    assertNotNull(response);
    NetworkInterfaceUnpaginatedCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceNetworkInterfacesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceNetworkInterfaces operation with and without retries enabled
  @Test
  public void testListInstanceNetworkInterfacesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceNetworkInterfacesWOptions();

    vpcService.disableRetries();
    testListInstanceNetworkInterfacesWOptions();
  }

  // Test the listInstanceNetworkInterfaces operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceNetworkInterfacesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceNetworkInterfaces(null).execute();
  }

  // Test the createInstanceNetworkInterface operation with a valid options model parameter
  @Test
  public void testCreateInstanceNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\"}";
    String createInstanceNetworkInterfacePath = "/instances/testString/network_interfaces";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext model
    NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext networkInterfaceIpPrototypeModel = new NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the CreateInstanceNetworkInterfaceOptions model
    CreateInstanceNetworkInterfaceOptions createInstanceNetworkInterfaceOptionsModel = new CreateInstanceNetworkInterfaceOptions.Builder()
      .instanceId("testString")
      .subnet(subnetIdentityModel)
      .allowIpSpoofing(true)
      .name("my-network-interface")
      .primaryIp(networkInterfaceIpPrototypeModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .build();

    // Invoke createInstanceNetworkInterface() with a valid options model and verify the result
    Response<NetworkInterface> response = vpcService.createInstanceNetworkInterface(createInstanceNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    NetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceNetworkInterface operation with and without retries enabled
  @Test
  public void testCreateInstanceNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testCreateInstanceNetworkInterfaceWOptions();
  }

  // Test the createInstanceNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceNetworkInterface(null).execute();
  }

  // Test the deleteInstanceNetworkInterface operation with a valid options model parameter
  @Test
  public void testDeleteInstanceNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceNetworkInterfacePath = "/instances/testString/network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceNetworkInterfaceOptions model
    DeleteInstanceNetworkInterfaceOptions deleteInstanceNetworkInterfaceOptionsModel = new DeleteInstanceNetworkInterfaceOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceNetworkInterface() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceNetworkInterface(deleteInstanceNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceNetworkInterface operation with and without retries enabled
  @Test
  public void testDeleteInstanceNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testDeleteInstanceNetworkInterfaceWOptions();
  }

  // Test the deleteInstanceNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceNetworkInterface(null).execute();
  }

  // Test the getInstanceNetworkInterface operation with a valid options model parameter
  @Test
  public void testGetInstanceNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\"}";
    String getInstanceNetworkInterfacePath = "/instances/testString/network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceNetworkInterfaceOptions model
    GetInstanceNetworkInterfaceOptions getInstanceNetworkInterfaceOptionsModel = new GetInstanceNetworkInterfaceOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceNetworkInterface() with a valid options model and verify the result
    Response<NetworkInterface> response = vpcService.getInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    NetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceNetworkInterface operation with and without retries enabled
  @Test
  public void testGetInstanceNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testGetInstanceNetworkInterfaceWOptions();
  }

  // Test the getInstanceNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceNetworkInterface(null).execute();
  }

  // Test the updateInstanceNetworkInterface operation with a valid options model parameter
  @Test
  public void testUpdateInstanceNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\"}";
    String updateInstanceNetworkInterfacePath = "/instances/testString/network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkInterfacePatch model
    NetworkInterfacePatch networkInterfacePatchModel = new NetworkInterfacePatch.Builder()
      .allowIpSpoofing(true)
      .name("my-network-interface-1")
      .build();
    Map<String, Object> networkInterfacePatchModelAsPatch = networkInterfacePatchModel.asPatch();

    // Construct an instance of the UpdateInstanceNetworkInterfaceOptions model
    UpdateInstanceNetworkInterfaceOptions updateInstanceNetworkInterfaceOptionsModel = new UpdateInstanceNetworkInterfaceOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .networkInterfacePatch(networkInterfacePatchModelAsPatch)
      .build();

    // Invoke updateInstanceNetworkInterface() with a valid options model and verify the result
    Response<NetworkInterface> response = vpcService.updateInstanceNetworkInterface(updateInstanceNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    NetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceNetworkInterface operation with and without retries enabled
  @Test
  public void testUpdateInstanceNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testUpdateInstanceNetworkInterfaceWOptions();
  }

  // Test the updateInstanceNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceNetworkInterface(null).execute();
  }

  // Test the listInstanceNetworkInterfaceFloatingIps operation with a valid options model parameter
  @Test
  public void testListInstanceNetworkInterfaceFloatingIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"floating_ips\": [{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}]}";
    String listInstanceNetworkInterfaceFloatingIpsPath = "/instances/testString/network_interfaces/testString/floating_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model
    ListInstanceNetworkInterfaceFloatingIpsOptions listInstanceNetworkInterfaceFloatingIpsOptionsModel = new ListInstanceNetworkInterfaceFloatingIpsOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .build();

    // Invoke listInstanceNetworkInterfaceFloatingIps() with a valid options model and verify the result
    Response<FloatingIPUnpaginatedCollection> response = vpcService.listInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModel).execute();
    assertNotNull(response);
    FloatingIPUnpaginatedCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceNetworkInterfaceFloatingIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceNetworkInterfaceFloatingIps operation with and without retries enabled
  @Test
  public void testListInstanceNetworkInterfaceFloatingIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceNetworkInterfaceFloatingIpsWOptions();

    vpcService.disableRetries();
    testListInstanceNetworkInterfaceFloatingIpsWOptions();
  }

  // Test the listInstanceNetworkInterfaceFloatingIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceNetworkInterfaceFloatingIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceNetworkInterfaceFloatingIps(null).execute();
  }

  // Test the removeInstanceNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testRemoveInstanceNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String removeInstanceNetworkInterfaceFloatingIpPath = "/instances/testString/network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RemoveInstanceNetworkInterfaceFloatingIpOptions model
    RemoveInstanceNetworkInterfaceFloatingIpOptions removeInstanceNetworkInterfaceFloatingIpOptionsModel = new RemoveInstanceNetworkInterfaceFloatingIpOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke removeInstanceNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<Void> response = vpcService.removeInstanceNetworkInterfaceFloatingIp(removeInstanceNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, removeInstanceNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the removeInstanceNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testRemoveInstanceNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRemoveInstanceNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testRemoveInstanceNetworkInterfaceFloatingIpWOptions();
  }

  // Test the removeInstanceNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRemoveInstanceNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.removeInstanceNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the getInstanceNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testGetInstanceNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getInstanceNetworkInterfaceFloatingIpPath = "/instances/testString/network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceNetworkInterfaceFloatingIpOptions model
    GetInstanceNetworkInterfaceFloatingIpOptions getInstanceNetworkInterfaceFloatingIpOptionsModel = new GetInstanceNetworkInterfaceFloatingIpOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.getInstanceNetworkInterfaceFloatingIp(getInstanceNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testGetInstanceNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testGetInstanceNetworkInterfaceFloatingIpWOptions();
  }

  // Test the getInstanceNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the addInstanceNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testAddInstanceNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String addInstanceNetworkInterfaceFloatingIpPath = "/instances/testString/network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the AddInstanceNetworkInterfaceFloatingIpOptions model
    AddInstanceNetworkInterfaceFloatingIpOptions addInstanceNetworkInterfaceFloatingIpOptionsModel = new AddInstanceNetworkInterfaceFloatingIpOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke addInstanceNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.addInstanceNetworkInterfaceFloatingIp(addInstanceNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, addInstanceNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the addInstanceNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testAddInstanceNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testAddInstanceNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testAddInstanceNetworkInterfaceFloatingIpWOptions();
  }

  // Test the addInstanceNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testAddInstanceNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.addInstanceNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the listInstanceNetworkInterfaceIps operation with a valid options model parameter
  @Test
  public void testListInstanceNetworkInterfaceIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e/ips?limit=20\"}, \"ips\": [{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e/ips?start=a404e343444b4e1095c9edba76672d67&limit=20\"}, \"total_count\": 132}";
    String listInstanceNetworkInterfaceIpsPath = "/instances/testString/network_interfaces/testString/ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceNetworkInterfaceIpsOptions model
    ListInstanceNetworkInterfaceIpsOptions listInstanceNetworkInterfaceIpsOptionsModel = new ListInstanceNetworkInterfaceIpsOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceNetworkInterfaceIps() with a valid options model and verify the result
    Response<ReservedIPCollectionNetworkInterfaceContext> response = vpcService.listInstanceNetworkInterfaceIps(listInstanceNetworkInterfaceIpsOptionsModel).execute();
    assertNotNull(response);
    ReservedIPCollectionNetworkInterfaceContext responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceNetworkInterfaceIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceNetworkInterfaceIps operation with and without retries enabled
  @Test
  public void testListInstanceNetworkInterfaceIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceNetworkInterfaceIpsWOptions();

    vpcService.disableRetries();
    testListInstanceNetworkInterfaceIpsWOptions();
  }

  // Test the listInstanceNetworkInterfaceIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceNetworkInterfaceIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceNetworkInterfaceIps(null).execute();
  }

  // Test the listInstanceNetworkInterfaceIps operation using the InstanceNetworkInterfaceIpsPager.getNext() method
  @Test
  public void testListInstanceNetworkInterfaceIpsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceNetworkInterfaceIpsOptions listInstanceNetworkInterfaceIpsOptions = new ListInstanceNetworkInterfaceIpsOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<ReservedIP> allResults = new ArrayList<>();
    InstanceNetworkInterfaceIpsPager pager = new InstanceNetworkInterfaceIpsPager(vpcService, listInstanceNetworkInterfaceIpsOptions);
    while (pager.hasNext()) {
      List<ReservedIP> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceNetworkInterfaceIps operation using the InstanceNetworkInterfaceIpsPager.getAll() method
  @Test
  public void testListInstanceNetworkInterfaceIpsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceNetworkInterfaceIpsOptions listInstanceNetworkInterfaceIpsOptions = new ListInstanceNetworkInterfaceIpsOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .limit(Long.valueOf("10"))
      .build();

    InstanceNetworkInterfaceIpsPager pager = new InstanceNetworkInterfaceIpsPager(vpcService, listInstanceNetworkInterfaceIpsOptions);
    List<ReservedIP> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getInstanceNetworkInterfaceIp operation with a valid options model parameter
  @Test
  public void testGetInstanceNetworkInterfaceIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String getInstanceNetworkInterfaceIpPath = "/instances/testString/network_interfaces/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceNetworkInterfaceIpOptions model
    GetInstanceNetworkInterfaceIpOptions getInstanceNetworkInterfaceIpOptionsModel = new GetInstanceNetworkInterfaceIpOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceNetworkInterfaceIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.getInstanceNetworkInterfaceIp(getInstanceNetworkInterfaceIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceNetworkInterfaceIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceNetworkInterfaceIp operation with and without retries enabled
  @Test
  public void testGetInstanceNetworkInterfaceIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceNetworkInterfaceIpWOptions();

    vpcService.disableRetries();
    testGetInstanceNetworkInterfaceIpWOptions();
  }

  // Test the getInstanceNetworkInterfaceIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceNetworkInterfaceIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceNetworkInterfaceIp(null).execute();
  }

  // Test the listInstanceVolumeAttachments operation with a valid options model parameter
  @Test
  public void testListInstanceVolumeAttachmentsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"volume_attachments\": [{\"bandwidth\": 250, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_volume_on_instance_delete\": true, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"status\": \"attached\", \"type\": \"boot\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}}]}";
    String listInstanceVolumeAttachmentsPath = "/instances/testString/volume_attachments";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceVolumeAttachmentsOptions model
    ListInstanceVolumeAttachmentsOptions listInstanceVolumeAttachmentsOptionsModel = new ListInstanceVolumeAttachmentsOptions.Builder()
      .instanceId("testString")
      .build();

    // Invoke listInstanceVolumeAttachments() with a valid options model and verify the result
    Response<VolumeAttachmentCollection> response = vpcService.listInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModel).execute();
    assertNotNull(response);
    VolumeAttachmentCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceVolumeAttachmentsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceVolumeAttachments operation with and without retries enabled
  @Test
  public void testListInstanceVolumeAttachmentsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceVolumeAttachmentsWOptions();

    vpcService.disableRetries();
    testListInstanceVolumeAttachmentsWOptions();
  }

  // Test the listInstanceVolumeAttachments operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceVolumeAttachmentsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceVolumeAttachments(null).execute();
  }

  // Test the createInstanceVolumeAttachment operation with a valid options model parameter
  @Test
  public void testCreateInstanceVolumeAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": 250, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_volume_on_instance_delete\": true, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"status\": \"attached\", \"type\": \"boot\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}}";
    String createInstanceVolumeAttachmentPath = "/instances/testString/volume_attachments";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById model
    VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById volumeAttachmentPrototypeVolumeModel = new VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById.Builder()
      .id("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
      .build();

    // Construct an instance of the CreateInstanceVolumeAttachmentOptions model
    CreateInstanceVolumeAttachmentOptions createInstanceVolumeAttachmentOptionsModel = new CreateInstanceVolumeAttachmentOptions.Builder()
      .instanceId("testString")
      .volume(volumeAttachmentPrototypeVolumeModel)
      .deleteVolumeOnInstanceDelete(false)
      .name("my-volume-attachment")
      .build();

    // Invoke createInstanceVolumeAttachment() with a valid options model and verify the result
    Response<VolumeAttachment> response = vpcService.createInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModel).execute();
    assertNotNull(response);
    VolumeAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceVolumeAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceVolumeAttachment operation with and without retries enabled
  @Test
  public void testCreateInstanceVolumeAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceVolumeAttachmentWOptions();

    vpcService.disableRetries();
    testCreateInstanceVolumeAttachmentWOptions();
  }

  // Test the createInstanceVolumeAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceVolumeAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceVolumeAttachment(null).execute();
  }

  // Test the deleteInstanceVolumeAttachment operation with a valid options model parameter
  @Test
  public void testDeleteInstanceVolumeAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceVolumeAttachmentPath = "/instances/testString/volume_attachments/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceVolumeAttachmentOptions model
    DeleteInstanceVolumeAttachmentOptions deleteInstanceVolumeAttachmentOptionsModel = new DeleteInstanceVolumeAttachmentOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceVolumeAttachment() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceVolumeAttachment(deleteInstanceVolumeAttachmentOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceVolumeAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceVolumeAttachment operation with and without retries enabled
  @Test
  public void testDeleteInstanceVolumeAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceVolumeAttachmentWOptions();

    vpcService.disableRetries();
    testDeleteInstanceVolumeAttachmentWOptions();
  }

  // Test the deleteInstanceVolumeAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceVolumeAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceVolumeAttachment(null).execute();
  }

  // Test the getInstanceVolumeAttachment operation with a valid options model parameter
  @Test
  public void testGetInstanceVolumeAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": 250, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_volume_on_instance_delete\": true, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"status\": \"attached\", \"type\": \"boot\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}}";
    String getInstanceVolumeAttachmentPath = "/instances/testString/volume_attachments/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceVolumeAttachmentOptions model
    GetInstanceVolumeAttachmentOptions getInstanceVolumeAttachmentOptionsModel = new GetInstanceVolumeAttachmentOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceVolumeAttachment() with a valid options model and verify the result
    Response<VolumeAttachment> response = vpcService.getInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModel).execute();
    assertNotNull(response);
    VolumeAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceVolumeAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceVolumeAttachment operation with and without retries enabled
  @Test
  public void testGetInstanceVolumeAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceVolumeAttachmentWOptions();

    vpcService.disableRetries();
    testGetInstanceVolumeAttachmentWOptions();
  }

  // Test the getInstanceVolumeAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceVolumeAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceVolumeAttachment(null).execute();
  }

  // Test the updateInstanceVolumeAttachment operation with a valid options model parameter
  @Test
  public void testUpdateInstanceVolumeAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": 250, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_volume_on_instance_delete\": true, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"status\": \"attached\", \"type\": \"boot\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}}";
    String updateInstanceVolumeAttachmentPath = "/instances/testString/volume_attachments/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VolumeAttachmentPatch model
    VolumeAttachmentPatch volumeAttachmentPatchModel = new VolumeAttachmentPatch.Builder()
      .deleteVolumeOnInstanceDelete(true)
      .name("my-volume-attachment")
      .build();
    Map<String, Object> volumeAttachmentPatchModelAsPatch = volumeAttachmentPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceVolumeAttachmentOptions model
    UpdateInstanceVolumeAttachmentOptions updateInstanceVolumeAttachmentOptionsModel = new UpdateInstanceVolumeAttachmentOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .volumeAttachmentPatch(volumeAttachmentPatchModelAsPatch)
      .build();

    // Invoke updateInstanceVolumeAttachment() with a valid options model and verify the result
    Response<VolumeAttachment> response = vpcService.updateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModel).execute();
    assertNotNull(response);
    VolumeAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceVolumeAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceVolumeAttachment operation with and without retries enabled
  @Test
  public void testUpdateInstanceVolumeAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceVolumeAttachmentWOptions();

    vpcService.disableRetries();
    testUpdateInstanceVolumeAttachmentWOptions();
  }

  // Test the updateInstanceVolumeAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceVolumeAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceVolumeAttachment(null).execute();
  }

  // Test the listInstanceGroups operation with a valid options model parameter
  @Test
  public void testListInstanceGroupsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups?limit=20\"}, \"instance_groups\": [{\"application_port\": 22, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"name\": \"my-instance-template\"}, \"load_balancer_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"managers\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager\"}], \"membership_count\": 10, \"name\": \"my-instance-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"deleting\", \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listInstanceGroupsPath = "/instance_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceGroupsOptions model
    ListInstanceGroupsOptions listInstanceGroupsOptionsModel = new ListInstanceGroupsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceGroups() with a valid options model and verify the result
    Response<InstanceGroupCollection> response = vpcService.listInstanceGroups(listInstanceGroupsOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceGroupsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceGroups operation with and without retries enabled
  @Test
  public void testListInstanceGroupsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceGroupsWOptions();

    vpcService.disableRetries();
    testListInstanceGroupsWOptions();
  }

  // Test the listInstanceGroups operation using the InstanceGroupsPager.getNext() method
  @Test
  public void testListInstanceGroupsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"instance_groups\":[{\"application_port\":22,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"name\":\"my-instance-template\"},\"load_balancer_pool\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"},\"managers\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager\"}],\"membership_count\":10,\"name\":\"my-instance-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"deleting\",\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"instance_groups\":[{\"application_port\":22,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"name\":\"my-instance-template\"},\"load_balancer_pool\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"},\"managers\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager\"}],\"membership_count\":10,\"name\":\"my-instance-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"deleting\",\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupsOptions listInstanceGroupsOptions = new ListInstanceGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<InstanceGroup> allResults = new ArrayList<>();
    InstanceGroupsPager pager = new InstanceGroupsPager(vpcService, listInstanceGroupsOptions);
    while (pager.hasNext()) {
      List<InstanceGroup> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceGroups operation using the InstanceGroupsPager.getAll() method
  @Test
  public void testListInstanceGroupsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"instance_groups\":[{\"application_port\":22,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"name\":\"my-instance-template\"},\"load_balancer_pool\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"},\"managers\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager\"}],\"membership_count\":10,\"name\":\"my-instance-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"deleting\",\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"instance_groups\":[{\"application_port\":22,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"name\":\"my-instance-template\"},\"load_balancer_pool\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"},\"managers\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager\"}],\"membership_count\":10,\"name\":\"my-instance-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"deleting\",\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupsOptions listInstanceGroupsOptions = new ListInstanceGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    InstanceGroupsPager pager = new InstanceGroupsPager(vpcService, listInstanceGroupsOptions);
    List<InstanceGroup> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createInstanceGroup operation with a valid options model parameter
  @Test
  public void testCreateInstanceGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"application_port\": 22, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"name\": \"my-instance-template\"}, \"load_balancer_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"managers\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager\"}], \"membership_count\": 10, \"name\": \"my-instance-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"deleting\", \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createInstanceGroupPath = "/instance_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceTemplateIdentityById model
    InstanceTemplateIdentityById instanceTemplateIdentityModel = new InstanceTemplateIdentityById.Builder()
      .id("a6b1a881-2ce8-41a3-80fc-36316a73f803")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the LoadBalancerIdentityById model
    LoadBalancerIdentityById loadBalancerIdentityModel = new LoadBalancerIdentityById.Builder()
      .id("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
      .build();

    // Construct an instance of the LoadBalancerPoolIdentityById model
    LoadBalancerPoolIdentityById loadBalancerPoolIdentityModel = new LoadBalancerPoolIdentityById.Builder()
      .id("70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateInstanceGroupOptions model
    CreateInstanceGroupOptions createInstanceGroupOptionsModel = new CreateInstanceGroupOptions.Builder()
      .instanceTemplate(instanceTemplateIdentityModel)
      .subnets(java.util.Arrays.asList(subnetIdentityModel))
      .applicationPort(Long.valueOf("22"))
      .loadBalancer(loadBalancerIdentityModel)
      .loadBalancerPool(loadBalancerPoolIdentityModel)
      .membershipCount(Long.valueOf("10"))
      .name("my-instance-group")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createInstanceGroup() with a valid options model and verify the result
    Response<InstanceGroup> response = vpcService.createInstanceGroup(createInstanceGroupOptionsModel).execute();
    assertNotNull(response);
    InstanceGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceGroup operation with and without retries enabled
  @Test
  public void testCreateInstanceGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceGroupWOptions();

    vpcService.disableRetries();
    testCreateInstanceGroupWOptions();
  }

  // Test the createInstanceGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceGroup(null).execute();
  }

  // Test the deleteInstanceGroup operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupPath = "/instance_groups/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupOptions model
    DeleteInstanceGroupOptions deleteInstanceGroupOptionsModel = new DeleteInstanceGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteInstanceGroup() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroup(deleteInstanceGroupOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroup operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupWOptions();
  }

  // Test the deleteInstanceGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroup(null).execute();
  }

  // Test the getInstanceGroup operation with a valid options model parameter
  @Test
  public void testGetInstanceGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"application_port\": 22, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"name\": \"my-instance-template\"}, \"load_balancer_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"managers\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager\"}], \"membership_count\": 10, \"name\": \"my-instance-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"deleting\", \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getInstanceGroupPath = "/instance_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceGroupOptions model
    GetInstanceGroupOptions getInstanceGroupOptionsModel = new GetInstanceGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke getInstanceGroup() with a valid options model and verify the result
    Response<InstanceGroup> response = vpcService.getInstanceGroup(getInstanceGroupOptionsModel).execute();
    assertNotNull(response);
    InstanceGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceGroup operation with and without retries enabled
  @Test
  public void testGetInstanceGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceGroupWOptions();

    vpcService.disableRetries();
    testGetInstanceGroupWOptions();
  }

  // Test the getInstanceGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceGroup(null).execute();
  }

  // Test the updateInstanceGroup operation with a valid options model parameter
  @Test
  public void testUpdateInstanceGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"application_port\": 22, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"name\": \"my-instance-template\"}, \"load_balancer_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"managers\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager\"}], \"membership_count\": 10, \"name\": \"my-instance-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"deleting\", \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateInstanceGroupPath = "/instance_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceTemplateIdentityById model
    InstanceTemplateIdentityById instanceTemplateIdentityModel = new InstanceTemplateIdentityById.Builder()
      .id("a6b1a881-2ce8-41a3-80fc-36316a73f803")
      .build();

    // Construct an instance of the LoadBalancerIdentityById model
    LoadBalancerIdentityById loadBalancerIdentityModel = new LoadBalancerIdentityById.Builder()
      .id("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
      .build();

    // Construct an instance of the LoadBalancerPoolIdentityById model
    LoadBalancerPoolIdentityById loadBalancerPoolIdentityModel = new LoadBalancerPoolIdentityById.Builder()
      .id("70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the InstanceGroupPatch model
    InstanceGroupPatch instanceGroupPatchModel = new InstanceGroupPatch.Builder()
      .applicationPort(Long.valueOf("22"))
      .instanceTemplate(instanceTemplateIdentityModel)
      .loadBalancer(loadBalancerIdentityModel)
      .loadBalancerPool(loadBalancerPoolIdentityModel)
      .membershipCount(Long.valueOf("10"))
      .name("my-instance-group")
      .subnets(java.util.Arrays.asList(subnetIdentityModel))
      .build();
    Map<String, Object> instanceGroupPatchModelAsPatch = instanceGroupPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceGroupOptions model
    UpdateInstanceGroupOptions updateInstanceGroupOptionsModel = new UpdateInstanceGroupOptions.Builder()
      .id("testString")
      .instanceGroupPatch(instanceGroupPatchModelAsPatch)
      .build();

    // Invoke updateInstanceGroup() with a valid options model and verify the result
    Response<InstanceGroup> response = vpcService.updateInstanceGroup(updateInstanceGroupOptionsModel).execute();
    assertNotNull(response);
    InstanceGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceGroup operation with and without retries enabled
  @Test
  public void testUpdateInstanceGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceGroupWOptions();

    vpcService.disableRetries();
    testUpdateInstanceGroupWOptions();
  }

  // Test the updateInstanceGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceGroup(null).execute();
  }

  // Test the deleteInstanceGroupLoadBalancer operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupLoadBalancerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupLoadBalancerPath = "/instance_groups/testString/load_balancer";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupLoadBalancerOptions model
    DeleteInstanceGroupLoadBalancerOptions deleteInstanceGroupLoadBalancerOptionsModel = new DeleteInstanceGroupLoadBalancerOptions.Builder()
      .instanceGroupId("testString")
      .build();

    // Invoke deleteInstanceGroupLoadBalancer() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroupLoadBalancer(deleteInstanceGroupLoadBalancerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupLoadBalancerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroupLoadBalancer operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupLoadBalancerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupLoadBalancerWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupLoadBalancerWOptions();
  }

  // Test the deleteInstanceGroupLoadBalancer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupLoadBalancerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroupLoadBalancer(null).execute();
  }

  // Test the listInstanceGroupManagers operation with a valid options model parameter
  @Test
  public void testListInstanceGroupManagersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?limit=20\"}, \"limit\": 20, \"managers\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"management_enabled\": false, \"name\": \"my-instance-group-manager\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"aggregation_window\": 120, \"cooldown\": 210, \"manager_type\": \"autoscale\", \"max_membership_count\": 10, \"min_membership_count\": 10, \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager-policy\"}]}], \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listInstanceGroupManagersPath = "/instance_groups/testString/managers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceGroupManagersOptions model
    ListInstanceGroupManagersOptions listInstanceGroupManagersOptionsModel = new ListInstanceGroupManagersOptions.Builder()
      .instanceGroupId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceGroupManagers() with a valid options model and verify the result
    Response<InstanceGroupManagerCollection> response = vpcService.listInstanceGroupManagers(listInstanceGroupManagersOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceGroupManagersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceGroupManagers operation with and without retries enabled
  @Test
  public void testListInstanceGroupManagersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceGroupManagersWOptions();

    vpcService.disableRetries();
    testListInstanceGroupManagersWOptions();
  }

  // Test the listInstanceGroupManagers operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceGroupManagersNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceGroupManagers(null).execute();
  }

  // Test the listInstanceGroupManagers operation using the InstanceGroupManagersPager.getNext() method
  @Test
  public void testListInstanceGroupManagersWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"managers\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"management_enabled\":false,\"name\":\"my-instance-group-manager\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"aggregation_window\":120,\"cooldown\":210,\"manager_type\":\"autoscale\",\"max_membership_count\":10,\"min_membership_count\":10,\"policies\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager-policy\"}]}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"managers\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"management_enabled\":false,\"name\":\"my-instance-group-manager\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"aggregation_window\":120,\"cooldown\":210,\"manager_type\":\"autoscale\",\"max_membership_count\":10,\"min_membership_count\":10,\"policies\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager-policy\"}]}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupManagersOptions listInstanceGroupManagersOptions = new ListInstanceGroupManagersOptions.Builder()
      .instanceGroupId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<InstanceGroupManager> allResults = new ArrayList<>();
    InstanceGroupManagersPager pager = new InstanceGroupManagersPager(vpcService, listInstanceGroupManagersOptions);
    while (pager.hasNext()) {
      List<InstanceGroupManager> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceGroupManagers operation using the InstanceGroupManagersPager.getAll() method
  @Test
  public void testListInstanceGroupManagersWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"managers\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"management_enabled\":false,\"name\":\"my-instance-group-manager\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"aggregation_window\":120,\"cooldown\":210,\"manager_type\":\"autoscale\",\"max_membership_count\":10,\"min_membership_count\":10,\"policies\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager-policy\"}]}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"managers\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"management_enabled\":false,\"name\":\"my-instance-group-manager\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"aggregation_window\":120,\"cooldown\":210,\"manager_type\":\"autoscale\",\"max_membership_count\":10,\"min_membership_count\":10,\"policies\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager-policy\"}]}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupManagersOptions listInstanceGroupManagersOptions = new ListInstanceGroupManagersOptions.Builder()
      .instanceGroupId("testString")
      .limit(Long.valueOf("10"))
      .build();

    InstanceGroupManagersPager pager = new InstanceGroupManagersPager(vpcService, listInstanceGroupManagersOptions);
    List<InstanceGroupManager> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createInstanceGroupManager operation with a valid options model parameter
  @Test
  public void testCreateInstanceGroupManagerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"management_enabled\": false, \"name\": \"my-instance-group-manager\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"aggregation_window\": 120, \"cooldown\": 210, \"manager_type\": \"autoscale\", \"max_membership_count\": 10, \"min_membership_count\": 10, \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager-policy\"}]}";
    String createInstanceGroupManagerPath = "/instance_groups/testString/managers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
    InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype instanceGroupManagerPrototypeModel = new InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype.Builder()
      .managementEnabled(true)
      .name("my-instance-group-manager")
      .aggregationWindow(Long.valueOf("120"))
      .cooldown(Long.valueOf("210"))
      .managerType("autoscale")
      .maxMembershipCount(Long.valueOf("10"))
      .minMembershipCount(Long.valueOf("10"))
      .build();

    // Construct an instance of the CreateInstanceGroupManagerOptions model
    CreateInstanceGroupManagerOptions createInstanceGroupManagerOptionsModel = new CreateInstanceGroupManagerOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerPrototype(instanceGroupManagerPrototypeModel)
      .build();

    // Invoke createInstanceGroupManager() with a valid options model and verify the result
    Response<InstanceGroupManager> response = vpcService.createInstanceGroupManager(createInstanceGroupManagerOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManager responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceGroupManagerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceGroupManager operation with and without retries enabled
  @Test
  public void testCreateInstanceGroupManagerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceGroupManagerWOptions();

    vpcService.disableRetries();
    testCreateInstanceGroupManagerWOptions();
  }

  // Test the createInstanceGroupManager operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceGroupManagerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceGroupManager(null).execute();
  }

  // Test the deleteInstanceGroupManager operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupManagerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupManagerPath = "/instance_groups/testString/managers/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupManagerOptions model
    DeleteInstanceGroupManagerOptions deleteInstanceGroupManagerOptionsModel = new DeleteInstanceGroupManagerOptions.Builder()
      .instanceGroupId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceGroupManager() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroupManager(deleteInstanceGroupManagerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupManagerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroupManager operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupManagerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupManagerWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupManagerWOptions();
  }

  // Test the deleteInstanceGroupManager operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupManagerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroupManager(null).execute();
  }

  // Test the getInstanceGroupManager operation with a valid options model parameter
  @Test
  public void testGetInstanceGroupManagerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"management_enabled\": false, \"name\": \"my-instance-group-manager\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"aggregation_window\": 120, \"cooldown\": 210, \"manager_type\": \"autoscale\", \"max_membership_count\": 10, \"min_membership_count\": 10, \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager-policy\"}]}";
    String getInstanceGroupManagerPath = "/instance_groups/testString/managers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceGroupManagerOptions model
    GetInstanceGroupManagerOptions getInstanceGroupManagerOptionsModel = new GetInstanceGroupManagerOptions.Builder()
      .instanceGroupId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceGroupManager() with a valid options model and verify the result
    Response<InstanceGroupManager> response = vpcService.getInstanceGroupManager(getInstanceGroupManagerOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManager responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceGroupManagerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceGroupManager operation with and without retries enabled
  @Test
  public void testGetInstanceGroupManagerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceGroupManagerWOptions();

    vpcService.disableRetries();
    testGetInstanceGroupManagerWOptions();
  }

  // Test the getInstanceGroupManager operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceGroupManagerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceGroupManager(null).execute();
  }

  // Test the updateInstanceGroupManager operation with a valid options model parameter
  @Test
  public void testUpdateInstanceGroupManagerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"management_enabled\": false, \"name\": \"my-instance-group-manager\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"aggregation_window\": 120, \"cooldown\": 210, \"manager_type\": \"autoscale\", \"max_membership_count\": 10, \"min_membership_count\": 10, \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager-policy\"}]}";
    String updateInstanceGroupManagerPath = "/instance_groups/testString/managers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupManagerPatch model
    InstanceGroupManagerPatch instanceGroupManagerPatchModel = new InstanceGroupManagerPatch.Builder()
      .aggregationWindow(Long.valueOf("120"))
      .cooldown(Long.valueOf("210"))
      .managementEnabled(true)
      .maxMembershipCount(Long.valueOf("10"))
      .minMembershipCount(Long.valueOf("10"))
      .name("my-instance-group-manager")
      .build();
    Map<String, Object> instanceGroupManagerPatchModelAsPatch = instanceGroupManagerPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceGroupManagerOptions model
    UpdateInstanceGroupManagerOptions updateInstanceGroupManagerOptionsModel = new UpdateInstanceGroupManagerOptions.Builder()
      .instanceGroupId("testString")
      .id("testString")
      .instanceGroupManagerPatch(instanceGroupManagerPatchModelAsPatch)
      .build();

    // Invoke updateInstanceGroupManager() with a valid options model and verify the result
    Response<InstanceGroupManager> response = vpcService.updateInstanceGroupManager(updateInstanceGroupManagerOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManager responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceGroupManagerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceGroupManager operation with and without retries enabled
  @Test
  public void testUpdateInstanceGroupManagerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceGroupManagerWOptions();

    vpcService.disableRetries();
    testUpdateInstanceGroupManagerWOptions();
  }

  // Test the updateInstanceGroupManager operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceGroupManagerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceGroupManager(null).execute();
  }

  // Test the listInstanceGroupManagerActions operation with a valid options model parameter
  @Test
  public void testListInstanceGroupManagerActionsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"actions\": [{\"auto_delete\": true, \"auto_delete_timeout\": 24, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager-action\", \"resource_type\": \"instance_group_manager_action\", \"status\": \"active\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"action_type\": \"scheduled\", \"cron_spec\": \"30 */2 * * 1-5\", \"last_applied_at\": \"2019-01-01T12:00:00.000Z\", \"next_run_at\": \"2019-01-01T12:00:00.000Z\", \"group\": {\"membership_count\": 10}}], \"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listInstanceGroupManagerActionsPath = "/instance_groups/testString/managers/testString/actions";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceGroupManagerActionsOptions model
    ListInstanceGroupManagerActionsOptions listInstanceGroupManagerActionsOptionsModel = new ListInstanceGroupManagerActionsOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceGroupManagerActions() with a valid options model and verify the result
    Response<InstanceGroupManagerActionsCollection> response = vpcService.listInstanceGroupManagerActions(listInstanceGroupManagerActionsOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerActionsCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceGroupManagerActionsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceGroupManagerActions operation with and without retries enabled
  @Test
  public void testListInstanceGroupManagerActionsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceGroupManagerActionsWOptions();

    vpcService.disableRetries();
    testListInstanceGroupManagerActionsWOptions();
  }

  // Test the listInstanceGroupManagerActions operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceGroupManagerActionsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceGroupManagerActions(null).execute();
  }

  // Test the listInstanceGroupManagerActions operation using the InstanceGroupManagerActionsPager.getNext() method
  @Test
  public void testListInstanceGroupManagerActionsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"actions\":[{\"auto_delete\":true,\"auto_delete_timeout\":24,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager-action\",\"resource_type\":\"instance_group_manager_action\",\"status\":\"active\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"action_type\":\"scheduled\",\"cron_spec\":\"30 */2 * * 1-5\",\"last_applied_at\":\"2019-01-01T12:00:00.000Z\",\"next_run_at\":\"2019-01-01T12:00:00.000Z\",\"group\":{\"membership_count\":10}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"actions\":[{\"auto_delete\":true,\"auto_delete_timeout\":24,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager-action\",\"resource_type\":\"instance_group_manager_action\",\"status\":\"active\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"action_type\":\"scheduled\",\"cron_spec\":\"30 */2 * * 1-5\",\"last_applied_at\":\"2019-01-01T12:00:00.000Z\",\"next_run_at\":\"2019-01-01T12:00:00.000Z\",\"group\":{\"membership_count\":10}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupManagerActionsOptions listInstanceGroupManagerActionsOptions = new ListInstanceGroupManagerActionsOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<InstanceGroupManagerAction> allResults = new ArrayList<>();
    InstanceGroupManagerActionsPager pager = new InstanceGroupManagerActionsPager(vpcService, listInstanceGroupManagerActionsOptions);
    while (pager.hasNext()) {
      List<InstanceGroupManagerAction> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceGroupManagerActions operation using the InstanceGroupManagerActionsPager.getAll() method
  @Test
  public void testListInstanceGroupManagerActionsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"actions\":[{\"auto_delete\":true,\"auto_delete_timeout\":24,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager-action\",\"resource_type\":\"instance_group_manager_action\",\"status\":\"active\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"action_type\":\"scheduled\",\"cron_spec\":\"30 */2 * * 1-5\",\"last_applied_at\":\"2019-01-01T12:00:00.000Z\",\"next_run_at\":\"2019-01-01T12:00:00.000Z\",\"group\":{\"membership_count\":10}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"actions\":[{\"auto_delete\":true,\"auto_delete_timeout\":24,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager-action\",\"resource_type\":\"instance_group_manager_action\",\"status\":\"active\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"action_type\":\"scheduled\",\"cron_spec\":\"30 */2 * * 1-5\",\"last_applied_at\":\"2019-01-01T12:00:00.000Z\",\"next_run_at\":\"2019-01-01T12:00:00.000Z\",\"group\":{\"membership_count\":10}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupManagerActionsOptions listInstanceGroupManagerActionsOptions = new ListInstanceGroupManagerActionsOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    InstanceGroupManagerActionsPager pager = new InstanceGroupManagerActionsPager(vpcService, listInstanceGroupManagerActionsOptions);
    List<InstanceGroupManagerAction> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createInstanceGroupManagerAction operation with a valid options model parameter
  @Test
  public void testCreateInstanceGroupManagerActionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"auto_delete\": true, \"auto_delete_timeout\": 24, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager-action\", \"resource_type\": \"instance_group_manager_action\", \"status\": \"active\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"action_type\": \"scheduled\", \"cron_spec\": \"30 */2 * * 1-5\", \"last_applied_at\": \"2019-01-01T12:00:00.000Z\", \"next_run_at\": \"2019-01-01T12:00:00.000Z\", \"group\": {\"membership_count\": 10}}";
    String createInstanceGroupManagerActionPath = "/instance_groups/testString/managers/testString/actions";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupManagerScheduledActionGroupPrototype model
    InstanceGroupManagerScheduledActionGroupPrototype instanceGroupManagerScheduledActionGroupPrototypeModel = new InstanceGroupManagerScheduledActionGroupPrototype.Builder()
      .membershipCount(Long.valueOf("10"))
      .build();

    // Construct an instance of the InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup model
    InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup instanceGroupManagerActionPrototypeModel = new InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup.Builder()
      .name("my-instance-group-manager-action")
      .runAt(DateUtils.parseAsDateTime("2019-01-01T12:00:00.000Z"))
      .group(instanceGroupManagerScheduledActionGroupPrototypeModel)
      .build();

    // Construct an instance of the CreateInstanceGroupManagerActionOptions model
    CreateInstanceGroupManagerActionOptions createInstanceGroupManagerActionOptionsModel = new CreateInstanceGroupManagerActionOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .instanceGroupManagerActionPrototype(instanceGroupManagerActionPrototypeModel)
      .build();

    // Invoke createInstanceGroupManagerAction() with a valid options model and verify the result
    Response<InstanceGroupManagerAction> response = vpcService.createInstanceGroupManagerAction(createInstanceGroupManagerActionOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerAction responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceGroupManagerActionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceGroupManagerAction operation with and without retries enabled
  @Test
  public void testCreateInstanceGroupManagerActionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceGroupManagerActionWOptions();

    vpcService.disableRetries();
    testCreateInstanceGroupManagerActionWOptions();
  }

  // Test the createInstanceGroupManagerAction operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceGroupManagerActionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceGroupManagerAction(null).execute();
  }

  // Test the deleteInstanceGroupManagerAction operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupManagerActionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupManagerActionPath = "/instance_groups/testString/managers/testString/actions/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupManagerActionOptions model
    DeleteInstanceGroupManagerActionOptions deleteInstanceGroupManagerActionOptionsModel = new DeleteInstanceGroupManagerActionOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceGroupManagerAction() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroupManagerAction(deleteInstanceGroupManagerActionOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupManagerActionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroupManagerAction operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupManagerActionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupManagerActionWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupManagerActionWOptions();
  }

  // Test the deleteInstanceGroupManagerAction operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupManagerActionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroupManagerAction(null).execute();
  }

  // Test the getInstanceGroupManagerAction operation with a valid options model parameter
  @Test
  public void testGetInstanceGroupManagerActionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"auto_delete\": true, \"auto_delete_timeout\": 24, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager-action\", \"resource_type\": \"instance_group_manager_action\", \"status\": \"active\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"action_type\": \"scheduled\", \"cron_spec\": \"30 */2 * * 1-5\", \"last_applied_at\": \"2019-01-01T12:00:00.000Z\", \"next_run_at\": \"2019-01-01T12:00:00.000Z\", \"group\": {\"membership_count\": 10}}";
    String getInstanceGroupManagerActionPath = "/instance_groups/testString/managers/testString/actions/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceGroupManagerActionOptions model
    GetInstanceGroupManagerActionOptions getInstanceGroupManagerActionOptionsModel = new GetInstanceGroupManagerActionOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceGroupManagerAction() with a valid options model and verify the result
    Response<InstanceGroupManagerAction> response = vpcService.getInstanceGroupManagerAction(getInstanceGroupManagerActionOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerAction responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceGroupManagerActionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceGroupManagerAction operation with and without retries enabled
  @Test
  public void testGetInstanceGroupManagerActionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceGroupManagerActionWOptions();

    vpcService.disableRetries();
    testGetInstanceGroupManagerActionWOptions();
  }

  // Test the getInstanceGroupManagerAction operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceGroupManagerActionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceGroupManagerAction(null).execute();
  }

  // Test the updateInstanceGroupManagerAction operation with a valid options model parameter
  @Test
  public void testUpdateInstanceGroupManagerActionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"auto_delete\": true, \"auto_delete_timeout\": 24, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager-action\", \"resource_type\": \"instance_group_manager_action\", \"status\": \"active\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"action_type\": \"scheduled\", \"cron_spec\": \"30 */2 * * 1-5\", \"last_applied_at\": \"2019-01-01T12:00:00.000Z\", \"next_run_at\": \"2019-01-01T12:00:00.000Z\", \"group\": {\"membership_count\": 10}}";
    String updateInstanceGroupManagerActionPath = "/instance_groups/testString/managers/testString/actions/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupManagerActionGroupPatch model
    InstanceGroupManagerActionGroupPatch instanceGroupManagerActionGroupPatchModel = new InstanceGroupManagerActionGroupPatch.Builder()
      .membershipCount(Long.valueOf("10"))
      .build();

    // Construct an instance of the InstanceGroupManagerActionManagerPatch model
    InstanceGroupManagerActionManagerPatch instanceGroupManagerActionManagerPatchModel = new InstanceGroupManagerActionManagerPatch.Builder()
      .maxMembershipCount(Long.valueOf("10"))
      .minMembershipCount(Long.valueOf("10"))
      .build();

    // Construct an instance of the InstanceGroupManagerActionPatch model
    InstanceGroupManagerActionPatch instanceGroupManagerActionPatchModel = new InstanceGroupManagerActionPatch.Builder()
      .cronSpec("30 */2 * * 1-5")
      .group(instanceGroupManagerActionGroupPatchModel)
      .manager(instanceGroupManagerActionManagerPatchModel)
      .name("my-instance-group-manager-action")
      .runAt(DateUtils.parseAsDateTime("2019-01-01T12:00:00.000Z"))
      .build();
    Map<String, Object> instanceGroupManagerActionPatchModelAsPatch = instanceGroupManagerActionPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceGroupManagerActionOptions model
    UpdateInstanceGroupManagerActionOptions updateInstanceGroupManagerActionOptionsModel = new UpdateInstanceGroupManagerActionOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .id("testString")
      .instanceGroupManagerActionPatch(instanceGroupManagerActionPatchModelAsPatch)
      .build();

    // Invoke updateInstanceGroupManagerAction() with a valid options model and verify the result
    Response<InstanceGroupManagerAction> response = vpcService.updateInstanceGroupManagerAction(updateInstanceGroupManagerActionOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerAction responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceGroupManagerActionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceGroupManagerAction operation with and without retries enabled
  @Test
  public void testUpdateInstanceGroupManagerActionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceGroupManagerActionWOptions();

    vpcService.disableRetries();
    testUpdateInstanceGroupManagerActionWOptions();
  }

  // Test the updateInstanceGroupManagerAction operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceGroupManagerActionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceGroupManagerAction(null).execute();
  }

  // Test the listInstanceGroupManagerPolicies operation with a valid options model parameter
  @Test
  public void testListInstanceGroupManagerPoliciesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"policies\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager-policy\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"metric_type\": \"cpu\", \"metric_value\": 11, \"policy_type\": \"target\"}], \"total_count\": 132}";
    String listInstanceGroupManagerPoliciesPath = "/instance_groups/testString/managers/testString/policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceGroupManagerPoliciesOptions model
    ListInstanceGroupManagerPoliciesOptions listInstanceGroupManagerPoliciesOptionsModel = new ListInstanceGroupManagerPoliciesOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceGroupManagerPolicies() with a valid options model and verify the result
    Response<InstanceGroupManagerPolicyCollection> response = vpcService.listInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerPolicyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceGroupManagerPoliciesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceGroupManagerPolicies operation with and without retries enabled
  @Test
  public void testListInstanceGroupManagerPoliciesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceGroupManagerPoliciesWOptions();

    vpcService.disableRetries();
    testListInstanceGroupManagerPoliciesWOptions();
  }

  // Test the listInstanceGroupManagerPolicies operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceGroupManagerPoliciesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceGroupManagerPolicies(null).execute();
  }

  // Test the listInstanceGroupManagerPolicies operation using the InstanceGroupManagerPoliciesPager.getNext() method
  @Test
  public void testListInstanceGroupManagerPoliciesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager-policy\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"metric_type\":\"cpu\",\"metric_value\":11,\"policy_type\":\"target\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager-policy\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"metric_type\":\"cpu\",\"metric_value\":11,\"policy_type\":\"target\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupManagerPoliciesOptions listInstanceGroupManagerPoliciesOptions = new ListInstanceGroupManagerPoliciesOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<InstanceGroupManagerPolicy> allResults = new ArrayList<>();
    InstanceGroupManagerPoliciesPager pager = new InstanceGroupManagerPoliciesPager(vpcService, listInstanceGroupManagerPoliciesOptions);
    while (pager.hasNext()) {
      List<InstanceGroupManagerPolicy> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceGroupManagerPolicies operation using the InstanceGroupManagerPoliciesPager.getAll() method
  @Test
  public void testListInstanceGroupManagerPoliciesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager-policy\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"metric_type\":\"cpu\",\"metric_value\":11,\"policy_type\":\"target\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance-group-manager-policy\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"metric_type\":\"cpu\",\"metric_value\":11,\"policy_type\":\"target\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupManagerPoliciesOptions listInstanceGroupManagerPoliciesOptions = new ListInstanceGroupManagerPoliciesOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    InstanceGroupManagerPoliciesPager pager = new InstanceGroupManagerPoliciesPager(vpcService, listInstanceGroupManagerPoliciesOptions);
    List<InstanceGroupManagerPolicy> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createInstanceGroupManagerPolicy operation with a valid options model parameter
  @Test
  public void testCreateInstanceGroupManagerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager-policy\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"metric_type\": \"cpu\", \"metric_value\": 11, \"policy_type\": \"target\"}";
    String createInstanceGroupManagerPolicyPath = "/instance_groups/testString/managers/testString/policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
    InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype instanceGroupManagerPolicyPrototypeModel = new InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype.Builder()
      .name("my-instance-group-manager-policy")
      .metricType("cpu")
      .metricValue(Long.valueOf("26"))
      .policyType("target")
      .build();

    // Construct an instance of the CreateInstanceGroupManagerPolicyOptions model
    CreateInstanceGroupManagerPolicyOptions createInstanceGroupManagerPolicyOptionsModel = new CreateInstanceGroupManagerPolicyOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .instanceGroupManagerPolicyPrototype(instanceGroupManagerPolicyPrototypeModel)
      .build();

    // Invoke createInstanceGroupManagerPolicy() with a valid options model and verify the result
    Response<InstanceGroupManagerPolicy> response = vpcService.createInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceGroupManagerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceGroupManagerPolicy operation with and without retries enabled
  @Test
  public void testCreateInstanceGroupManagerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceGroupManagerPolicyWOptions();

    vpcService.disableRetries();
    testCreateInstanceGroupManagerPolicyWOptions();
  }

  // Test the createInstanceGroupManagerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceGroupManagerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceGroupManagerPolicy(null).execute();
  }

  // Test the deleteInstanceGroupManagerPolicy operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupManagerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupManagerPolicyPath = "/instance_groups/testString/managers/testString/policies/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupManagerPolicyOptions model
    DeleteInstanceGroupManagerPolicyOptions deleteInstanceGroupManagerPolicyOptionsModel = new DeleteInstanceGroupManagerPolicyOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceGroupManagerPolicy() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroupManagerPolicy(deleteInstanceGroupManagerPolicyOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupManagerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroupManagerPolicy operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupManagerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupManagerPolicyWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupManagerPolicyWOptions();
  }

  // Test the deleteInstanceGroupManagerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupManagerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroupManagerPolicy(null).execute();
  }

  // Test the getInstanceGroupManagerPolicy operation with a valid options model parameter
  @Test
  public void testGetInstanceGroupManagerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager-policy\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"metric_type\": \"cpu\", \"metric_value\": 11, \"policy_type\": \"target\"}";
    String getInstanceGroupManagerPolicyPath = "/instance_groups/testString/managers/testString/policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceGroupManagerPolicyOptions model
    GetInstanceGroupManagerPolicyOptions getInstanceGroupManagerPolicyOptionsModel = new GetInstanceGroupManagerPolicyOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceGroupManagerPolicy() with a valid options model and verify the result
    Response<InstanceGroupManagerPolicy> response = vpcService.getInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceGroupManagerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceGroupManagerPolicy operation with and without retries enabled
  @Test
  public void testGetInstanceGroupManagerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceGroupManagerPolicyWOptions();

    vpcService.disableRetries();
    testGetInstanceGroupManagerPolicyWOptions();
  }

  // Test the getInstanceGroupManagerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceGroupManagerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceGroupManagerPolicy(null).execute();
  }

  // Test the updateInstanceGroupManagerPolicy operation with a valid options model parameter
  @Test
  public void testUpdateInstanceGroupManagerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group-manager-policy\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"metric_type\": \"cpu\", \"metric_value\": 11, \"policy_type\": \"target\"}";
    String updateInstanceGroupManagerPolicyPath = "/instance_groups/testString/managers/testString/policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupManagerPolicyPatch model
    InstanceGroupManagerPolicyPatch instanceGroupManagerPolicyPatchModel = new InstanceGroupManagerPolicyPatch.Builder()
      .metricType("cpu")
      .metricValue(Long.valueOf("26"))
      .name("my-instance-group-manager-policy")
      .build();
    Map<String, Object> instanceGroupManagerPolicyPatchModelAsPatch = instanceGroupManagerPolicyPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceGroupManagerPolicyOptions model
    UpdateInstanceGroupManagerPolicyOptions updateInstanceGroupManagerPolicyOptionsModel = new UpdateInstanceGroupManagerPolicyOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .id("testString")
      .instanceGroupManagerPolicyPatch(instanceGroupManagerPolicyPatchModelAsPatch)
      .build();

    // Invoke updateInstanceGroupManagerPolicy() with a valid options model and verify the result
    Response<InstanceGroupManagerPolicy> response = vpcService.updateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceGroupManagerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceGroupManagerPolicy operation with and without retries enabled
  @Test
  public void testUpdateInstanceGroupManagerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceGroupManagerPolicyWOptions();

    vpcService.disableRetries();
    testUpdateInstanceGroupManagerPolicyWOptions();
  }

  // Test the updateInstanceGroupManagerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceGroupManagerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceGroupManagerPolicy(null).execute();
  }

  // Test the deleteInstanceGroupMemberships operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupMembershipsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupMembershipsPath = "/instance_groups/testString/memberships";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupMembershipsOptions model
    DeleteInstanceGroupMembershipsOptions deleteInstanceGroupMembershipsOptionsModel = new DeleteInstanceGroupMembershipsOptions.Builder()
      .instanceGroupId("testString")
      .build();

    // Invoke deleteInstanceGroupMemberships() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroupMemberships(deleteInstanceGroupMembershipsOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupMembershipsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroupMemberships operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupMembershipsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupMembershipsWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupMembershipsWOptions();
  }

  // Test the deleteInstanceGroupMemberships operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupMembershipsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroupMemberships(null).execute();
  }

  // Test the listInstanceGroupMemberships operation with a valid options model parameter
  @Test
  public void testListInstanceGroupMembershipsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?limit=20\"}, \"limit\": 20, \"memberships\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_instance_on_membership_delete\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}, \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"name\": \"my-instance-template\"}, \"name\": \"my-instance-group-membership\", \"pool_member\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}, \"status\": \"deleting\", \"updated_at\": \"2019-01-01T12:00:00.000Z\"}], \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listInstanceGroupMembershipsPath = "/instance_groups/testString/memberships";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceGroupMembershipsOptions model
    ListInstanceGroupMembershipsOptions listInstanceGroupMembershipsOptionsModel = new ListInstanceGroupMembershipsOptions.Builder()
      .instanceGroupId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceGroupMemberships() with a valid options model and verify the result
    Response<InstanceGroupMembershipCollection> response = vpcService.listInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupMembershipCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceGroupMembershipsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceGroupMemberships operation with and without retries enabled
  @Test
  public void testListInstanceGroupMembershipsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceGroupMembershipsWOptions();

    vpcService.disableRetries();
    testListInstanceGroupMembershipsWOptions();
  }

  // Test the listInstanceGroupMemberships operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceGroupMembershipsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceGroupMemberships(null).execute();
  }

  // Test the listInstanceGroupMemberships operation using the InstanceGroupMembershipsPager.getNext() method
  @Test
  public void testListInstanceGroupMembershipsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"memberships\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"delete_instance_on_membership_delete\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance\"},\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"name\":\"my-instance-template\"},\"name\":\"my-instance-group-membership\",\"pool_member\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\"},\"status\":\"deleting\",\"updated_at\":\"2019-01-01T12:00:00.000Z\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"memberships\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"delete_instance_on_membership_delete\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance\"},\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"name\":\"my-instance-template\"},\"name\":\"my-instance-group-membership\",\"pool_member\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\"},\"status\":\"deleting\",\"updated_at\":\"2019-01-01T12:00:00.000Z\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupMembershipsOptions listInstanceGroupMembershipsOptions = new ListInstanceGroupMembershipsOptions.Builder()
      .instanceGroupId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<InstanceGroupMembership> allResults = new ArrayList<>();
    InstanceGroupMembershipsPager pager = new InstanceGroupMembershipsPager(vpcService, listInstanceGroupMembershipsOptions);
    while (pager.hasNext()) {
      List<InstanceGroupMembership> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceGroupMemberships operation using the InstanceGroupMembershipsPager.getAll() method
  @Test
  public void testListInstanceGroupMembershipsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"memberships\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"delete_instance_on_membership_delete\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance\"},\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"name\":\"my-instance-template\"},\"name\":\"my-instance-group-membership\",\"pool_member\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\"},\"status\":\"deleting\",\"updated_at\":\"2019-01-01T12:00:00.000Z\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"memberships\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"delete_instance_on_membership_delete\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance\"},\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"a6b1a881-2ce8-41a3-80fc-36316a73f803\",\"name\":\"my-instance-template\"},\"name\":\"my-instance-group-membership\",\"pool_member\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\"},\"status\":\"deleting\",\"updated_at\":\"2019-01-01T12:00:00.000Z\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupMembershipsOptions listInstanceGroupMembershipsOptions = new ListInstanceGroupMembershipsOptions.Builder()
      .instanceGroupId("testString")
      .limit(Long.valueOf("10"))
      .build();

    InstanceGroupMembershipsPager pager = new InstanceGroupMembershipsPager(vpcService, listInstanceGroupMembershipsOptions);
    List<InstanceGroupMembership> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the deleteInstanceGroupMembership operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupMembershipWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupMembershipPath = "/instance_groups/testString/memberships/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupMembershipOptions model
    DeleteInstanceGroupMembershipOptions deleteInstanceGroupMembershipOptionsModel = new DeleteInstanceGroupMembershipOptions.Builder()
      .instanceGroupId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceGroupMembership() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroupMembership(deleteInstanceGroupMembershipOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupMembershipPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroupMembership operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupMembershipWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupMembershipWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupMembershipWOptions();
  }

  // Test the deleteInstanceGroupMembership operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupMembershipNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroupMembership(null).execute();
  }

  // Test the getInstanceGroupMembership operation with a valid options model parameter
  @Test
  public void testGetInstanceGroupMembershipWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_instance_on_membership_delete\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}, \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"name\": \"my-instance-template\"}, \"name\": \"my-instance-group-membership\", \"pool_member\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}, \"status\": \"deleting\", \"updated_at\": \"2019-01-01T12:00:00.000Z\"}";
    String getInstanceGroupMembershipPath = "/instance_groups/testString/memberships/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceGroupMembershipOptions model
    GetInstanceGroupMembershipOptions getInstanceGroupMembershipOptionsModel = new GetInstanceGroupMembershipOptions.Builder()
      .instanceGroupId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceGroupMembership() with a valid options model and verify the result
    Response<InstanceGroupMembership> response = vpcService.getInstanceGroupMembership(getInstanceGroupMembershipOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupMembership responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceGroupMembershipPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceGroupMembership operation with and without retries enabled
  @Test
  public void testGetInstanceGroupMembershipWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceGroupMembershipWOptions();

    vpcService.disableRetries();
    testGetInstanceGroupMembershipWOptions();
  }

  // Test the getInstanceGroupMembership operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceGroupMembershipNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceGroupMembership(null).execute();
  }

  // Test the updateInstanceGroupMembership operation with a valid options model parameter
  @Test
  public void testUpdateInstanceGroupMembershipWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_instance_on_membership_delete\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}, \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"name\": \"my-instance-template\"}, \"name\": \"my-instance-group-membership\", \"pool_member\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}, \"status\": \"deleting\", \"updated_at\": \"2019-01-01T12:00:00.000Z\"}";
    String updateInstanceGroupMembershipPath = "/instance_groups/testString/memberships/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupMembershipPatch model
    InstanceGroupMembershipPatch instanceGroupMembershipPatchModel = new InstanceGroupMembershipPatch.Builder()
      .name("my-instance-group-membership")
      .build();
    Map<String, Object> instanceGroupMembershipPatchModelAsPatch = instanceGroupMembershipPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceGroupMembershipOptions model
    UpdateInstanceGroupMembershipOptions updateInstanceGroupMembershipOptionsModel = new UpdateInstanceGroupMembershipOptions.Builder()
      .instanceGroupId("testString")
      .id("testString")
      .instanceGroupMembershipPatch(instanceGroupMembershipPatchModelAsPatch)
      .build();

    // Invoke updateInstanceGroupMembership() with a valid options model and verify the result
    Response<InstanceGroupMembership> response = vpcService.updateInstanceGroupMembership(updateInstanceGroupMembershipOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupMembership responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceGroupMembershipPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceGroupMembership operation with and without retries enabled
  @Test
  public void testUpdateInstanceGroupMembershipWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceGroupMembershipWOptions();

    vpcService.disableRetries();
    testUpdateInstanceGroupMembershipWOptions();
  }

  // Test the updateInstanceGroupMembership operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceGroupMembershipNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceGroupMembership(null).execute();
  }

  // Test the listDedicatedHostGroups operation with a valid options model parameter
  @Test
  public void testListDedicatedHostGroupsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups?limit=20\"}, \"groups\": [{\"class\": \"mx2\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"dedicated_hosts\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-host-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host_group\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listDedicatedHostGroupsPath = "/dedicated_host/groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListDedicatedHostGroupsOptions model
    ListDedicatedHostGroupsOptions listDedicatedHostGroupsOptionsModel = new ListDedicatedHostGroupsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("testString")
      .name("testString")
      .build();

    // Invoke listDedicatedHostGroups() with a valid options model and verify the result
    Response<DedicatedHostGroupCollection> response = vpcService.listDedicatedHostGroups(listDedicatedHostGroupsOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostGroupCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listDedicatedHostGroupsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("zone.name"), "testString");
    assertEquals(query.get("name"), "testString");
  }

  // Test the listDedicatedHostGroups operation with and without retries enabled
  @Test
  public void testListDedicatedHostGroupsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListDedicatedHostGroupsWOptions();

    vpcService.disableRetries();
    testListDedicatedHostGroupsWOptions();
  }

  // Test the listDedicatedHostGroups operation using the DedicatedHostGroupsPager.getNext() method
  @Test
  public void testListDedicatedHostGroupsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"groups\":[{\"class\":\"mx2\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"dedicated_hosts\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-host-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host_group\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"groups\":[{\"class\":\"mx2\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"dedicated_hosts\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-host-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host_group\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListDedicatedHostGroupsOptions listDedicatedHostGroupsOptions = new ListDedicatedHostGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("testString")
      .name("testString")
      .build();

    List<DedicatedHostGroup> allResults = new ArrayList<>();
    DedicatedHostGroupsPager pager = new DedicatedHostGroupsPager(vpcService, listDedicatedHostGroupsOptions);
    while (pager.hasNext()) {
      List<DedicatedHostGroup> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listDedicatedHostGroups operation using the DedicatedHostGroupsPager.getAll() method
  @Test
  public void testListDedicatedHostGroupsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"groups\":[{\"class\":\"mx2\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"dedicated_hosts\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-host-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host_group\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"groups\":[{\"class\":\"mx2\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"dedicated_hosts\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-host-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host_group\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListDedicatedHostGroupsOptions listDedicatedHostGroupsOptions = new ListDedicatedHostGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("testString")
      .name("testString")
      .build();

    DedicatedHostGroupsPager pager = new DedicatedHostGroupsPager(vpcService, listDedicatedHostGroupsOptions);
    List<DedicatedHostGroup> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createDedicatedHostGroup operation with a valid options model parameter
  @Test
  public void testCreateDedicatedHostGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"class\": \"mx2\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"dedicated_hosts\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-host-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host_group\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createDedicatedHostGroupPath = "/dedicated_host/groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the CreateDedicatedHostGroupOptions model
    CreateDedicatedHostGroupOptions createDedicatedHostGroupOptionsModel = new CreateDedicatedHostGroupOptions.Builder()
      .xClass("mx2")
      .family("balanced")
      .name("testString")
      .resourceGroup(resourceGroupIdentityModel)
      .zone(zoneIdentityModel)
      .build();

    // Invoke createDedicatedHostGroup() with a valid options model and verify the result
    Response<DedicatedHostGroup> response = vpcService.createDedicatedHostGroup(createDedicatedHostGroupOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createDedicatedHostGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createDedicatedHostGroup operation with and without retries enabled
  @Test
  public void testCreateDedicatedHostGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateDedicatedHostGroupWOptions();

    vpcService.disableRetries();
    testCreateDedicatedHostGroupWOptions();
  }

  // Test the deleteDedicatedHostGroup operation with a valid options model parameter
  @Test
  public void testDeleteDedicatedHostGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteDedicatedHostGroupPath = "/dedicated_host/groups/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteDedicatedHostGroupOptions model
    DeleteDedicatedHostGroupOptions deleteDedicatedHostGroupOptionsModel = new DeleteDedicatedHostGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteDedicatedHostGroup() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteDedicatedHostGroup(deleteDedicatedHostGroupOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteDedicatedHostGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteDedicatedHostGroup operation with and without retries enabled
  @Test
  public void testDeleteDedicatedHostGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteDedicatedHostGroupWOptions();

    vpcService.disableRetries();
    testDeleteDedicatedHostGroupWOptions();
  }

  // Test the deleteDedicatedHostGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteDedicatedHostGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteDedicatedHostGroup(null).execute();
  }

  // Test the getDedicatedHostGroup operation with a valid options model parameter
  @Test
  public void testGetDedicatedHostGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"class\": \"mx2\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"dedicated_hosts\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-host-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host_group\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getDedicatedHostGroupPath = "/dedicated_host/groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetDedicatedHostGroupOptions model
    GetDedicatedHostGroupOptions getDedicatedHostGroupOptionsModel = new GetDedicatedHostGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke getDedicatedHostGroup() with a valid options model and verify the result
    Response<DedicatedHostGroup> response = vpcService.getDedicatedHostGroup(getDedicatedHostGroupOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getDedicatedHostGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getDedicatedHostGroup operation with and without retries enabled
  @Test
  public void testGetDedicatedHostGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetDedicatedHostGroupWOptions();

    vpcService.disableRetries();
    testGetDedicatedHostGroupWOptions();
  }

  // Test the getDedicatedHostGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetDedicatedHostGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getDedicatedHostGroup(null).execute();
  }

  // Test the updateDedicatedHostGroup operation with a valid options model parameter
  @Test
  public void testUpdateDedicatedHostGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"class\": \"mx2\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"dedicated_hosts\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-host-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host_group\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateDedicatedHostGroupPath = "/dedicated_host/groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the DedicatedHostGroupPatch model
    DedicatedHostGroupPatch dedicatedHostGroupPatchModel = new DedicatedHostGroupPatch.Builder()
      .name("my-host-group-updated")
      .build();
    Map<String, Object> dedicatedHostGroupPatchModelAsPatch = dedicatedHostGroupPatchModel.asPatch();

    // Construct an instance of the UpdateDedicatedHostGroupOptions model
    UpdateDedicatedHostGroupOptions updateDedicatedHostGroupOptionsModel = new UpdateDedicatedHostGroupOptions.Builder()
      .id("testString")
      .dedicatedHostGroupPatch(dedicatedHostGroupPatchModelAsPatch)
      .build();

    // Invoke updateDedicatedHostGroup() with a valid options model and verify the result
    Response<DedicatedHostGroup> response = vpcService.updateDedicatedHostGroup(updateDedicatedHostGroupOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateDedicatedHostGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateDedicatedHostGroup operation with and without retries enabled
  @Test
  public void testUpdateDedicatedHostGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateDedicatedHostGroupWOptions();

    vpcService.disableRetries();
    testUpdateDedicatedHostGroupWOptions();
  }

  // Test the updateDedicatedHostGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateDedicatedHostGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateDedicatedHostGroup(null).execute();
  }

  // Test the listDedicatedHostProfiles operation with a valid options model parameter
  @Test
  public void testListDedicatedHostProfilesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/profiles?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/profiles?start=9da91&limit=20\"}, \"profiles\": [{\"class\": \"mx2\", \"disks\": [{\"interface_type\": {\"type\": \"fixed\", \"value\": \"nvme\"}, \"quantity\": {\"type\": \"fixed\", \"value\": 4}, \"size\": {\"type\": \"fixed\", \"value\": 3200}, \"supported_instance_interface_types\": {\"type\": \"fixed\", \"value\": [\"nvme\"]}}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"memory\": {\"type\": \"fixed\", \"value\": 16}, \"name\": \"mx2-host-152x1216\", \"socket_count\": {\"type\": \"fixed\", \"value\": 2}, \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}], \"vcpu_architecture\": {\"type\": \"fixed\", \"value\": \"amd64\"}, \"vcpu_count\": {\"type\": \"fixed\", \"value\": 16}}], \"total_count\": 132}";
    String listDedicatedHostProfilesPath = "/dedicated_host/profiles";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListDedicatedHostProfilesOptions model
    ListDedicatedHostProfilesOptions listDedicatedHostProfilesOptionsModel = new ListDedicatedHostProfilesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listDedicatedHostProfiles() with a valid options model and verify the result
    Response<DedicatedHostProfileCollection> response = vpcService.listDedicatedHostProfiles(listDedicatedHostProfilesOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostProfileCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listDedicatedHostProfilesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listDedicatedHostProfiles operation with and without retries enabled
  @Test
  public void testListDedicatedHostProfilesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListDedicatedHostProfilesWOptions();

    vpcService.disableRetries();
    testListDedicatedHostProfilesWOptions();
  }

  // Test the listDedicatedHostProfiles operation using the DedicatedHostProfilesPager.getNext() method
  @Test
  public void testListDedicatedHostProfilesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"class\":\"mx2\",\"disks\":[{\"interface_type\":{\"type\":\"fixed\",\"value\":\"nvme\"},\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":3200},\"supported_instance_interface_types\":{\"type\":\"fixed\",\"value\":[\"nvme\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"mx2-host-152x1216\",\"socket_count\":{\"type\":\"fixed\",\"value\":2},\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"}],\"vcpu_architecture\":{\"type\":\"fixed\",\"value\":\"amd64\"},\"vcpu_count\":{\"type\":\"fixed\",\"value\":16}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"class\":\"mx2\",\"disks\":[{\"interface_type\":{\"type\":\"fixed\",\"value\":\"nvme\"},\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":3200},\"supported_instance_interface_types\":{\"type\":\"fixed\",\"value\":[\"nvme\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"mx2-host-152x1216\",\"socket_count\":{\"type\":\"fixed\",\"value\":2},\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"}],\"vcpu_architecture\":{\"type\":\"fixed\",\"value\":\"amd64\"},\"vcpu_count\":{\"type\":\"fixed\",\"value\":16}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListDedicatedHostProfilesOptions listDedicatedHostProfilesOptions = new ListDedicatedHostProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<DedicatedHostProfile> allResults = new ArrayList<>();
    DedicatedHostProfilesPager pager = new DedicatedHostProfilesPager(vpcService, listDedicatedHostProfilesOptions);
    while (pager.hasNext()) {
      List<DedicatedHostProfile> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listDedicatedHostProfiles operation using the DedicatedHostProfilesPager.getAll() method
  @Test
  public void testListDedicatedHostProfilesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"class\":\"mx2\",\"disks\":[{\"interface_type\":{\"type\":\"fixed\",\"value\":\"nvme\"},\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":3200},\"supported_instance_interface_types\":{\"type\":\"fixed\",\"value\":[\"nvme\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"mx2-host-152x1216\",\"socket_count\":{\"type\":\"fixed\",\"value\":2},\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"}],\"vcpu_architecture\":{\"type\":\"fixed\",\"value\":\"amd64\"},\"vcpu_count\":{\"type\":\"fixed\",\"value\":16}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"class\":\"mx2\",\"disks\":[{\"interface_type\":{\"type\":\"fixed\",\"value\":\"nvme\"},\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":3200},\"supported_instance_interface_types\":{\"type\":\"fixed\",\"value\":[\"nvme\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"mx2-host-152x1216\",\"socket_count\":{\"type\":\"fixed\",\"value\":2},\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"}],\"vcpu_architecture\":{\"type\":\"fixed\",\"value\":\"amd64\"},\"vcpu_count\":{\"type\":\"fixed\",\"value\":16}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListDedicatedHostProfilesOptions listDedicatedHostProfilesOptions = new ListDedicatedHostProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    DedicatedHostProfilesPager pager = new DedicatedHostProfilesPager(vpcService, listDedicatedHostProfilesOptions);
    List<DedicatedHostProfile> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getDedicatedHostProfile operation with a valid options model parameter
  @Test
  public void testGetDedicatedHostProfileWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"class\": \"mx2\", \"disks\": [{\"interface_type\": {\"type\": \"fixed\", \"value\": \"nvme\"}, \"quantity\": {\"type\": \"fixed\", \"value\": 4}, \"size\": {\"type\": \"fixed\", \"value\": 3200}, \"supported_instance_interface_types\": {\"type\": \"fixed\", \"value\": [\"nvme\"]}}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"memory\": {\"type\": \"fixed\", \"value\": 16}, \"name\": \"mx2-host-152x1216\", \"socket_count\": {\"type\": \"fixed\", \"value\": 2}, \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}], \"vcpu_architecture\": {\"type\": \"fixed\", \"value\": \"amd64\"}, \"vcpu_count\": {\"type\": \"fixed\", \"value\": 16}}";
    String getDedicatedHostProfilePath = "/dedicated_host/profiles/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetDedicatedHostProfileOptions model
    GetDedicatedHostProfileOptions getDedicatedHostProfileOptionsModel = new GetDedicatedHostProfileOptions.Builder()
      .name("testString")
      .build();

    // Invoke getDedicatedHostProfile() with a valid options model and verify the result
    Response<DedicatedHostProfile> response = vpcService.getDedicatedHostProfile(getDedicatedHostProfileOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostProfile responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getDedicatedHostProfilePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getDedicatedHostProfile operation with and without retries enabled
  @Test
  public void testGetDedicatedHostProfileWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetDedicatedHostProfileWOptions();

    vpcService.disableRetries();
    testGetDedicatedHostProfileWOptions();
  }

  // Test the getDedicatedHostProfile operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetDedicatedHostProfileNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getDedicatedHostProfile(null).execute();
  }

  // Test the listDedicatedHosts operation with a valid options model parameter
  @Test
  public void testListDedicatedHostsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"dedicated_hosts\": [{\"available_memory\": 128, \"available_vcpu\": {\"architecture\": \"amd64\", \"count\": 4}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"disks\": [{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}], \"group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance_placement_enabled\": true, \"instances\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}], \"lifecycle_state\": \"stable\", \"memory\": 128, \"name\": \"my-host\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"mx2-host-152x1216\"}, \"provisionable\": false, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host\", \"socket_count\": 4, \"state\": \"available\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}], \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listDedicatedHostsPath = "/dedicated_hosts";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListDedicatedHostsOptions model
    ListDedicatedHostsOptions listDedicatedHostsOptionsModel = new ListDedicatedHostsOptions.Builder()
      .dedicatedHostGroupId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("testString")
      .name("testString")
      .build();

    // Invoke listDedicatedHosts() with a valid options model and verify the result
    Response<DedicatedHostCollection> response = vpcService.listDedicatedHosts(listDedicatedHostsOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listDedicatedHostsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("dedicated_host_group.id"), "testString");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("zone.name"), "testString");
    assertEquals(query.get("name"), "testString");
  }

  // Test the listDedicatedHosts operation with and without retries enabled
  @Test
  public void testListDedicatedHostsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListDedicatedHostsWOptions();

    vpcService.disableRetries();
    testListDedicatedHostsWOptions();
  }

  // Test the listDedicatedHosts operation using the DedicatedHostsPager.getNext() method
  @Test
  public void testListDedicatedHostsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"dedicated_hosts\":[{\"available_memory\":128,\"available_vcpu\":{\"architecture\":\"amd64\",\"count\":4},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"disks\":[{\"available\":9,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"instance_disks\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\"}],\"interface_type\":\"nvme\",\"lifecycle_state\":\"stable\",\"name\":\"my-dedicated-host-disk\",\"provisionable\":false,\"resource_type\":\"dedicated_host_disk\",\"size\":4,\"supported_instance_interface_types\":[\"nvme\"]}],\"group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-host-group\",\"resource_type\":\"dedicated_host_group\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance_placement_enabled\":true,\"instances\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance\"}],\"lifecycle_state\":\"stable\",\"memory\":128,\"name\":\"my-host\",\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"mx2-host-152x1216\"},\"provisionable\":false,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host\",\"socket_count\":4,\"state\":\"available\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"}],\"vcpu\":{\"architecture\":\"amd64\",\"count\":4},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"dedicated_hosts\":[{\"available_memory\":128,\"available_vcpu\":{\"architecture\":\"amd64\",\"count\":4},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"disks\":[{\"available\":9,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"instance_disks\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\"}],\"interface_type\":\"nvme\",\"lifecycle_state\":\"stable\",\"name\":\"my-dedicated-host-disk\",\"provisionable\":false,\"resource_type\":\"dedicated_host_disk\",\"size\":4,\"supported_instance_interface_types\":[\"nvme\"]}],\"group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-host-group\",\"resource_type\":\"dedicated_host_group\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance_placement_enabled\":true,\"instances\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance\"}],\"lifecycle_state\":\"stable\",\"memory\":128,\"name\":\"my-host\",\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"mx2-host-152x1216\"},\"provisionable\":false,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host\",\"socket_count\":4,\"state\":\"available\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"}],\"vcpu\":{\"architecture\":\"amd64\",\"count\":4},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListDedicatedHostsOptions listDedicatedHostsOptions = new ListDedicatedHostsOptions.Builder()
      .dedicatedHostGroupId("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("testString")
      .name("testString")
      .build();

    List<DedicatedHost> allResults = new ArrayList<>();
    DedicatedHostsPager pager = new DedicatedHostsPager(vpcService, listDedicatedHostsOptions);
    while (pager.hasNext()) {
      List<DedicatedHost> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listDedicatedHosts operation using the DedicatedHostsPager.getAll() method
  @Test
  public void testListDedicatedHostsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"dedicated_hosts\":[{\"available_memory\":128,\"available_vcpu\":{\"architecture\":\"amd64\",\"count\":4},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"disks\":[{\"available\":9,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"instance_disks\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\"}],\"interface_type\":\"nvme\",\"lifecycle_state\":\"stable\",\"name\":\"my-dedicated-host-disk\",\"provisionable\":false,\"resource_type\":\"dedicated_host_disk\",\"size\":4,\"supported_instance_interface_types\":[\"nvme\"]}],\"group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-host-group\",\"resource_type\":\"dedicated_host_group\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance_placement_enabled\":true,\"instances\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance\"}],\"lifecycle_state\":\"stable\",\"memory\":128,\"name\":\"my-host\",\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"mx2-host-152x1216\"},\"provisionable\":false,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host\",\"socket_count\":4,\"state\":\"available\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"}],\"vcpu\":{\"architecture\":\"amd64\",\"count\":4},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"dedicated_hosts\":[{\"available_memory\":128,\"available_vcpu\":{\"architecture\":\"amd64\",\"count\":4},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"disks\":[{\"available\":9,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"instance_disks\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\"}],\"interface_type\":\"nvme\",\"lifecycle_state\":\"stable\",\"name\":\"my-dedicated-host-disk\",\"provisionable\":false,\"resource_type\":\"dedicated_host_disk\",\"size\":4,\"supported_instance_interface_types\":[\"nvme\"]}],\"group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-host-group\",\"resource_type\":\"dedicated_host_group\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance_placement_enabled\":true,\"instances\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance\"}],\"lifecycle_state\":\"stable\",\"memory\":128,\"name\":\"my-host\",\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"mx2-host-152x1216\"},\"provisionable\":false,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host\",\"socket_count\":4,\"state\":\"available\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\"}],\"vcpu\":{\"architecture\":\"amd64\",\"count\":4},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListDedicatedHostsOptions listDedicatedHostsOptions = new ListDedicatedHostsOptions.Builder()
      .dedicatedHostGroupId("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("testString")
      .name("testString")
      .build();

    DedicatedHostsPager pager = new DedicatedHostsPager(vpcService, listDedicatedHostsOptions);
    List<DedicatedHost> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createDedicatedHost operation with a valid options model parameter
  @Test
  public void testCreateDedicatedHostWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_memory\": 128, \"available_vcpu\": {\"architecture\": \"amd64\", \"count\": 4}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"disks\": [{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}], \"group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance_placement_enabled\": true, \"instances\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}], \"lifecycle_state\": \"stable\", \"memory\": 128, \"name\": \"my-host\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"mx2-host-152x1216\"}, \"provisionable\": false, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host\", \"socket_count\": 4, \"state\": \"available\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}], \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createDedicatedHostPath = "/dedicated_hosts";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the DedicatedHostProfileIdentityByName model
    DedicatedHostProfileIdentityByName dedicatedHostProfileIdentityModel = new DedicatedHostProfileIdentityByName.Builder()
      .name("m-62x496")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the DedicatedHostGroupIdentityById model
    DedicatedHostGroupIdentityById dedicatedHostGroupIdentityModel = new DedicatedHostGroupIdentityById.Builder()
      .id("0c8eccb4-271c-4518-956c-32bfce5cf83b")
      .build();

    // Construct an instance of the DedicatedHostPrototypeDedicatedHostByGroup model
    DedicatedHostPrototypeDedicatedHostByGroup dedicatedHostPrototypeModel = new DedicatedHostPrototypeDedicatedHostByGroup.Builder()
      .instancePlacementEnabled(true)
      .name("my-host")
      .profile(dedicatedHostProfileIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .group(dedicatedHostGroupIdentityModel)
      .build();

    // Construct an instance of the CreateDedicatedHostOptions model
    CreateDedicatedHostOptions createDedicatedHostOptionsModel = new CreateDedicatedHostOptions.Builder()
      .dedicatedHostPrototype(dedicatedHostPrototypeModel)
      .build();

    // Invoke createDedicatedHost() with a valid options model and verify the result
    Response<DedicatedHost> response = vpcService.createDedicatedHost(createDedicatedHostOptionsModel).execute();
    assertNotNull(response);
    DedicatedHost responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createDedicatedHostPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createDedicatedHost operation with and without retries enabled
  @Test
  public void testCreateDedicatedHostWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateDedicatedHostWOptions();

    vpcService.disableRetries();
    testCreateDedicatedHostWOptions();
  }

  // Test the createDedicatedHost operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateDedicatedHostNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createDedicatedHost(null).execute();
  }

  // Test the listDedicatedHostDisks operation with a valid options model parameter
  @Test
  public void testListDedicatedHostDisksWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"disks\": [{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}]}";
    String listDedicatedHostDisksPath = "/dedicated_hosts/testString/disks";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListDedicatedHostDisksOptions model
    ListDedicatedHostDisksOptions listDedicatedHostDisksOptionsModel = new ListDedicatedHostDisksOptions.Builder()
      .dedicatedHostId("testString")
      .build();

    // Invoke listDedicatedHostDisks() with a valid options model and verify the result
    Response<DedicatedHostDiskCollection> response = vpcService.listDedicatedHostDisks(listDedicatedHostDisksOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostDiskCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listDedicatedHostDisksPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listDedicatedHostDisks operation with and without retries enabled
  @Test
  public void testListDedicatedHostDisksWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListDedicatedHostDisksWOptions();

    vpcService.disableRetries();
    testListDedicatedHostDisksWOptions();
  }

  // Test the listDedicatedHostDisks operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListDedicatedHostDisksNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listDedicatedHostDisks(null).execute();
  }

  // Test the getDedicatedHostDisk operation with a valid options model parameter
  @Test
  public void testGetDedicatedHostDiskWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}";
    String getDedicatedHostDiskPath = "/dedicated_hosts/testString/disks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetDedicatedHostDiskOptions model
    GetDedicatedHostDiskOptions getDedicatedHostDiskOptionsModel = new GetDedicatedHostDiskOptions.Builder()
      .dedicatedHostId("testString")
      .id("testString")
      .build();

    // Invoke getDedicatedHostDisk() with a valid options model and verify the result
    Response<DedicatedHostDisk> response = vpcService.getDedicatedHostDisk(getDedicatedHostDiskOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostDisk responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getDedicatedHostDiskPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getDedicatedHostDisk operation with and without retries enabled
  @Test
  public void testGetDedicatedHostDiskWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetDedicatedHostDiskWOptions();

    vpcService.disableRetries();
    testGetDedicatedHostDiskWOptions();
  }

  // Test the getDedicatedHostDisk operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetDedicatedHostDiskNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getDedicatedHostDisk(null).execute();
  }

  // Test the updateDedicatedHostDisk operation with a valid options model parameter
  @Test
  public void testUpdateDedicatedHostDiskWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}";
    String updateDedicatedHostDiskPath = "/dedicated_hosts/testString/disks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the DedicatedHostDiskPatch model
    DedicatedHostDiskPatch dedicatedHostDiskPatchModel = new DedicatedHostDiskPatch.Builder()
      .name("my-disk-updated")
      .build();
    Map<String, Object> dedicatedHostDiskPatchModelAsPatch = dedicatedHostDiskPatchModel.asPatch();

    // Construct an instance of the UpdateDedicatedHostDiskOptions model
    UpdateDedicatedHostDiskOptions updateDedicatedHostDiskOptionsModel = new UpdateDedicatedHostDiskOptions.Builder()
      .dedicatedHostId("testString")
      .id("testString")
      .dedicatedHostDiskPatch(dedicatedHostDiskPatchModelAsPatch)
      .build();

    // Invoke updateDedicatedHostDisk() with a valid options model and verify the result
    Response<DedicatedHostDisk> response = vpcService.updateDedicatedHostDisk(updateDedicatedHostDiskOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostDisk responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateDedicatedHostDiskPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateDedicatedHostDisk operation with and without retries enabled
  @Test
  public void testUpdateDedicatedHostDiskWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateDedicatedHostDiskWOptions();

    vpcService.disableRetries();
    testUpdateDedicatedHostDiskWOptions();
  }

  // Test the updateDedicatedHostDisk operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateDedicatedHostDiskNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateDedicatedHostDisk(null).execute();
  }

  // Test the deleteDedicatedHost operation with a valid options model parameter
  @Test
  public void testDeleteDedicatedHostWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteDedicatedHostPath = "/dedicated_hosts/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteDedicatedHostOptions model
    DeleteDedicatedHostOptions deleteDedicatedHostOptionsModel = new DeleteDedicatedHostOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteDedicatedHost() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteDedicatedHost(deleteDedicatedHostOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteDedicatedHostPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteDedicatedHost operation with and without retries enabled
  @Test
  public void testDeleteDedicatedHostWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteDedicatedHostWOptions();

    vpcService.disableRetries();
    testDeleteDedicatedHostWOptions();
  }

  // Test the deleteDedicatedHost operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteDedicatedHostNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteDedicatedHost(null).execute();
  }

  // Test the getDedicatedHost operation with a valid options model parameter
  @Test
  public void testGetDedicatedHostWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_memory\": 128, \"available_vcpu\": {\"architecture\": \"amd64\", \"count\": 4}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"disks\": [{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}], \"group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance_placement_enabled\": true, \"instances\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}], \"lifecycle_state\": \"stable\", \"memory\": 128, \"name\": \"my-host\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"mx2-host-152x1216\"}, \"provisionable\": false, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host\", \"socket_count\": 4, \"state\": \"available\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}], \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getDedicatedHostPath = "/dedicated_hosts/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetDedicatedHostOptions model
    GetDedicatedHostOptions getDedicatedHostOptionsModel = new GetDedicatedHostOptions.Builder()
      .id("testString")
      .build();

    // Invoke getDedicatedHost() with a valid options model and verify the result
    Response<DedicatedHost> response = vpcService.getDedicatedHost(getDedicatedHostOptionsModel).execute();
    assertNotNull(response);
    DedicatedHost responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getDedicatedHostPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getDedicatedHost operation with and without retries enabled
  @Test
  public void testGetDedicatedHostWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetDedicatedHostWOptions();

    vpcService.disableRetries();
    testGetDedicatedHostWOptions();
  }

  // Test the getDedicatedHost operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetDedicatedHostNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getDedicatedHost(null).execute();
  }

  // Test the updateDedicatedHost operation with a valid options model parameter
  @Test
  public void testUpdateDedicatedHostWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_memory\": 128, \"available_vcpu\": {\"architecture\": \"amd64\", \"count\": 4}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"disks\": [{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}], \"group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance_placement_enabled\": true, \"instances\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}], \"lifecycle_state\": \"stable\", \"memory\": 128, \"name\": \"my-host\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"mx2-host-152x1216\"}, \"provisionable\": false, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host\", \"socket_count\": 4, \"state\": \"available\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\"}], \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateDedicatedHostPath = "/dedicated_hosts/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the DedicatedHostPatch model
    DedicatedHostPatch dedicatedHostPatchModel = new DedicatedHostPatch.Builder()
      .instancePlacementEnabled(true)
      .name("my-host")
      .build();
    Map<String, Object> dedicatedHostPatchModelAsPatch = dedicatedHostPatchModel.asPatch();

    // Construct an instance of the UpdateDedicatedHostOptions model
    UpdateDedicatedHostOptions updateDedicatedHostOptionsModel = new UpdateDedicatedHostOptions.Builder()
      .id("testString")
      .dedicatedHostPatch(dedicatedHostPatchModelAsPatch)
      .build();

    // Invoke updateDedicatedHost() with a valid options model and verify the result
    Response<DedicatedHost> response = vpcService.updateDedicatedHost(updateDedicatedHostOptionsModel).execute();
    assertNotNull(response);
    DedicatedHost responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateDedicatedHostPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateDedicatedHost operation with and without retries enabled
  @Test
  public void testUpdateDedicatedHostWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateDedicatedHostWOptions();

    vpcService.disableRetries();
    testUpdateDedicatedHostWOptions();
  }

  // Test the updateDedicatedHost operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateDedicatedHostNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateDedicatedHost(null).execute();
  }

  // Test the listBackupPolicies operation with a valid options model parameter
  @Test
  public void testListBackupPoliciesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policies\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::backup-policy:r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"id\": \"r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"last_job_completed_at\": \"2019-01-01T12:00:00.000Z\", \"lifecycle_state\": \"stable\", \"match_resource_types\": [\"volume\"], \"match_user_tags\": [\"matchUserTags\"], \"name\": \"my-backup-policy\", \"plans\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"backup_policy\"}], \"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listBackupPoliciesPath = "/backup_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBackupPoliciesOptions model
    ListBackupPoliciesOptions listBackupPoliciesOptionsModel = new ListBackupPoliciesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .tag("testString")
      .build();

    // Invoke listBackupPolicies() with a valid options model and verify the result
    Response<BackupPolicyCollection> response = vpcService.listBackupPolicies(listBackupPoliciesOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBackupPoliciesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "testString");
    assertEquals(query.get("tag"), "testString");
  }

  // Test the listBackupPolicies operation with and without retries enabled
  @Test
  public void testListBackupPoliciesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBackupPoliciesWOptions();

    vpcService.disableRetries();
    testListBackupPoliciesWOptions();
  }

  // Test the listBackupPolicies operation using the BackupPoliciesPager.getNext() method
  @Test
  public void testListBackupPoliciesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"backup_policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::backup-policy:r134-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"id\":\"r134-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"last_job_completed_at\":\"2019-01-01T12:00:00.000Z\",\"lifecycle_state\":\"stable\",\"match_resource_types\":[\"volume\"],\"match_user_tags\":[\"matchUserTags\"],\"name\":\"my-backup-policy\",\"plans\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"resource_type\":\"backup_policy_plan\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"backup_policy\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"backup_policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::backup-policy:r134-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"id\":\"r134-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"last_job_completed_at\":\"2019-01-01T12:00:00.000Z\",\"lifecycle_state\":\"stable\",\"match_resource_types\":[\"volume\"],\"match_user_tags\":[\"matchUserTags\"],\"name\":\"my-backup-policy\",\"plans\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"resource_type\":\"backup_policy_plan\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"backup_policy\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBackupPoliciesOptions listBackupPoliciesOptions = new ListBackupPoliciesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .tag("testString")
      .build();

    List<BackupPolicy> allResults = new ArrayList<>();
    BackupPoliciesPager pager = new BackupPoliciesPager(vpcService, listBackupPoliciesOptions);
    while (pager.hasNext()) {
      List<BackupPolicy> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listBackupPolicies operation using the BackupPoliciesPager.getAll() method
  @Test
  public void testListBackupPoliciesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"backup_policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::backup-policy:r134-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"id\":\"r134-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"last_job_completed_at\":\"2019-01-01T12:00:00.000Z\",\"lifecycle_state\":\"stable\",\"match_resource_types\":[\"volume\"],\"match_user_tags\":[\"matchUserTags\"],\"name\":\"my-backup-policy\",\"plans\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"resource_type\":\"backup_policy_plan\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"backup_policy\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"backup_policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::backup-policy:r134-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"id\":\"r134-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"last_job_completed_at\":\"2019-01-01T12:00:00.000Z\",\"lifecycle_state\":\"stable\",\"match_resource_types\":[\"volume\"],\"match_user_tags\":[\"matchUserTags\"],\"name\":\"my-backup-policy\",\"plans\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"resource_type\":\"backup_policy_plan\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"backup_policy\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBackupPoliciesOptions listBackupPoliciesOptions = new ListBackupPoliciesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .tag("testString")
      .build();

    BackupPoliciesPager pager = new BackupPoliciesPager(vpcService, listBackupPoliciesOptions);
    List<BackupPolicy> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createBackupPolicy operation with a valid options model parameter
  @Test
  public void testCreateBackupPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::backup-policy:r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"id\": \"r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"last_job_completed_at\": \"2019-01-01T12:00:00.000Z\", \"lifecycle_state\": \"stable\", \"match_resource_types\": [\"volume\"], \"match_user_tags\": [\"matchUserTags\"], \"name\": \"my-backup-policy\", \"plans\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"backup_policy\"}";
    String createBackupPolicyPath = "/backup_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the BackupPolicyPlanDeletionTriggerPrototype model
    BackupPolicyPlanDeletionTriggerPrototype backupPolicyPlanDeletionTriggerPrototypeModel = new BackupPolicyPlanDeletionTriggerPrototype.Builder()
      .deleteAfter(Long.valueOf("20"))
      .deleteOverCount(Long.valueOf("20"))
      .build();

    // Construct an instance of the BackupPolicyPlanPrototype model
    BackupPolicyPlanPrototype backupPolicyPlanPrototypeModel = new BackupPolicyPlanPrototype.Builder()
      .active(true)
      .attachUserTags(java.util.Arrays.asList("my-daily-backup-plan"))
      .copyUserTags(true)
      .cronSpec("30 */2 * * 1-5")
      .deletionTrigger(backupPolicyPlanDeletionTriggerPrototypeModel)
      .name("my-policy-plan")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateBackupPolicyOptions model
    CreateBackupPolicyOptions createBackupPolicyOptionsModel = new CreateBackupPolicyOptions.Builder()
      .matchResourceTypes(java.util.Arrays.asList("volume"))
      .matchUserTags(java.util.Arrays.asList("my-daily-backup-policy"))
      .name("my-backup-policy")
      .plans(java.util.Arrays.asList(backupPolicyPlanPrototypeModel))
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createBackupPolicy() with a valid options model and verify the result
    Response<BackupPolicy> response = vpcService.createBackupPolicy(createBackupPolicyOptionsModel).execute();
    assertNotNull(response);
    BackupPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createBackupPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createBackupPolicy operation with and without retries enabled
  @Test
  public void testCreateBackupPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateBackupPolicyWOptions();

    vpcService.disableRetries();
    testCreateBackupPolicyWOptions();
  }

  // Test the listBackupPolicyJobs operation with a valid options model parameter
  @Test
  public void testListBackupPolicyJobsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/7241e2a8-601f-11ea-8503-000c29475bed/jobs?limit=20\"}, \"jobs\": [{\"auto_delete\": true, \"auto_delete_after\": 90, \"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}, \"completed_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/0fe9e5d8-0a4d-4818-96ec-e99708644a58/jobs/4cf9171a-0043-4434-8727-15b53dbc374c\", \"id\": \"4cf9171a-0043-4434-8727-15b53dbc374c\", \"job_type\": \"creation\", \"resource_type\": \"backup_policy_job\", \"source\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}, \"status\": \"failed\", \"status_reasons\": [{\"code\": \"source_volume_busy\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshooting-backup-for-vpc\"}], \"target_snapshots\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"resource_type\": \"snapshot\"}]}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/7241e2a8-601f-11ea-8503-000c29475bed/jobss?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listBackupPolicyJobsPath = "/backup_policies/testString/jobs";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBackupPolicyJobsOptions model
    ListBackupPolicyJobsOptions listBackupPolicyJobsOptionsModel = new ListBackupPolicyJobsOptions.Builder()
      .backupPolicyId("testString")
      .status("testString")
      .backupPolicyPlanId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .sourceId("testString")
      .targetSnapshotsId("testString")
      .targetSnapshotsCrn("testString")
      .build();

    // Invoke listBackupPolicyJobs() with a valid options model and verify the result
    Response<BackupPolicyJobCollection> response = vpcService.listBackupPolicyJobs(listBackupPolicyJobsOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyJobCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBackupPolicyJobsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("status"), "testString");
    assertEquals(query.get("backup_policy_plan.id"), "testString");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "name");
    assertEquals(query.get("source.id"), "testString");
    assertEquals(query.get("target_snapshots[].id"), "testString");
    assertEquals(query.get("target_snapshots[].crn"), "testString");
  }

  // Test the listBackupPolicyJobs operation with and without retries enabled
  @Test
  public void testListBackupPolicyJobsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBackupPolicyJobsWOptions();

    vpcService.disableRetries();
    testListBackupPolicyJobsWOptions();
  }

  // Test the listBackupPolicyJobs operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBackupPolicyJobsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBackupPolicyJobs(null).execute();
  }

  // Test the listBackupPolicyJobs operation using the BackupPolicyJobsPager.getNext() method
  @Test
  public void testListBackupPolicyJobsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"jobs\":[{\"auto_delete\":true,\"auto_delete_after\":90,\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"resource_type\":\"backup_policy_plan\"},\"completed_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/0fe9e5d8-0a4d-4818-96ec-e99708644a58/jobs/4cf9171a-0043-4434-8727-15b53dbc374c\",\"id\":\"4cf9171a-0043-4434-8727-15b53dbc374c\",\"job_type\":\"creation\",\"resource_type\":\"backup_policy_job\",\"source\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"},\"status\":\"failed\",\"status_reasons\":[{\"code\":\"source_volume_busy\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshooting-backup-for-vpc\"}],\"target_snapshots\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"resource_type\":\"snapshot\"}]}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"jobs\":[{\"auto_delete\":true,\"auto_delete_after\":90,\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"resource_type\":\"backup_policy_plan\"},\"completed_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/0fe9e5d8-0a4d-4818-96ec-e99708644a58/jobs/4cf9171a-0043-4434-8727-15b53dbc374c\",\"id\":\"4cf9171a-0043-4434-8727-15b53dbc374c\",\"job_type\":\"creation\",\"resource_type\":\"backup_policy_job\",\"source\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"},\"status\":\"failed\",\"status_reasons\":[{\"code\":\"source_volume_busy\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshooting-backup-for-vpc\"}],\"target_snapshots\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"resource_type\":\"snapshot\"}]}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBackupPolicyJobsOptions listBackupPolicyJobsOptions = new ListBackupPolicyJobsOptions.Builder()
      .backupPolicyId("testString")
      .status("testString")
      .backupPolicyPlanId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .sourceId("testString")
      .targetSnapshotsId("testString")
      .targetSnapshotsCrn("testString")
      .build();

    List<BackupPolicyJob> allResults = new ArrayList<>();
    BackupPolicyJobsPager pager = new BackupPolicyJobsPager(vpcService, listBackupPolicyJobsOptions);
    while (pager.hasNext()) {
      List<BackupPolicyJob> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listBackupPolicyJobs operation using the BackupPolicyJobsPager.getAll() method
  @Test
  public void testListBackupPolicyJobsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"jobs\":[{\"auto_delete\":true,\"auto_delete_after\":90,\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"resource_type\":\"backup_policy_plan\"},\"completed_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/0fe9e5d8-0a4d-4818-96ec-e99708644a58/jobs/4cf9171a-0043-4434-8727-15b53dbc374c\",\"id\":\"4cf9171a-0043-4434-8727-15b53dbc374c\",\"job_type\":\"creation\",\"resource_type\":\"backup_policy_job\",\"source\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"},\"status\":\"failed\",\"status_reasons\":[{\"code\":\"source_volume_busy\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshooting-backup-for-vpc\"}],\"target_snapshots\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"resource_type\":\"snapshot\"}]}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"jobs\":[{\"auto_delete\":true,\"auto_delete_after\":90,\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"resource_type\":\"backup_policy_plan\"},\"completed_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/0fe9e5d8-0a4d-4818-96ec-e99708644a58/jobs/4cf9171a-0043-4434-8727-15b53dbc374c\",\"id\":\"4cf9171a-0043-4434-8727-15b53dbc374c\",\"job_type\":\"creation\",\"resource_type\":\"backup_policy_job\",\"source\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"},\"status\":\"failed\",\"status_reasons\":[{\"code\":\"source_volume_busy\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshooting-backup-for-vpc\"}],\"target_snapshots\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"resource_type\":\"snapshot\"}]}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBackupPolicyJobsOptions listBackupPolicyJobsOptions = new ListBackupPolicyJobsOptions.Builder()
      .backupPolicyId("testString")
      .status("testString")
      .backupPolicyPlanId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .sourceId("testString")
      .targetSnapshotsId("testString")
      .targetSnapshotsCrn("testString")
      .build();

    BackupPolicyJobsPager pager = new BackupPolicyJobsPager(vpcService, listBackupPolicyJobsOptions);
    List<BackupPolicyJob> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getBackupPolicyJob operation with a valid options model parameter
  @Test
  public void testGetBackupPolicyJobWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"auto_delete\": true, \"auto_delete_after\": 90, \"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}, \"completed_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/0fe9e5d8-0a4d-4818-96ec-e99708644a58/jobs/4cf9171a-0043-4434-8727-15b53dbc374c\", \"id\": \"4cf9171a-0043-4434-8727-15b53dbc374c\", \"job_type\": \"creation\", \"resource_type\": \"backup_policy_job\", \"source\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}, \"status\": \"failed\", \"status_reasons\": [{\"code\": \"source_volume_busy\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshooting-backup-for-vpc\"}], \"target_snapshots\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"resource_type\": \"snapshot\"}]}";
    String getBackupPolicyJobPath = "/backup_policies/testString/jobs/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBackupPolicyJobOptions model
    GetBackupPolicyJobOptions getBackupPolicyJobOptionsModel = new GetBackupPolicyJobOptions.Builder()
      .backupPolicyId("testString")
      .id("testString")
      .build();

    // Invoke getBackupPolicyJob() with a valid options model and verify the result
    Response<BackupPolicyJob> response = vpcService.getBackupPolicyJob(getBackupPolicyJobOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyJob responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBackupPolicyJobPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBackupPolicyJob operation with and without retries enabled
  @Test
  public void testGetBackupPolicyJobWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBackupPolicyJobWOptions();

    vpcService.disableRetries();
    testGetBackupPolicyJobWOptions();
  }

  // Test the getBackupPolicyJob operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBackupPolicyJobNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBackupPolicyJob(null).execute();
  }

  // Test the listBackupPolicyPlans operation with a valid options model parameter
  @Test
  public void testListBackupPolicyPlansWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"plans\": [{\"active\": true, \"attach_user_tags\": [\"attachUserTags\"], \"copy_user_tags\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"cron_spec\": \"30 */2 * * 1-5\", \"deletion_trigger\": {\"delete_after\": 20, \"delete_over_count\": 20}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"lifecycle_state\": \"stable\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}]}";
    String listBackupPolicyPlansPath = "/backup_policies/testString/plans";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBackupPolicyPlansOptions model
    ListBackupPolicyPlansOptions listBackupPolicyPlansOptionsModel = new ListBackupPolicyPlansOptions.Builder()
      .backupPolicyId("testString")
      .name("testString")
      .build();

    // Invoke listBackupPolicyPlans() with a valid options model and verify the result
    Response<BackupPolicyPlanCollection> response = vpcService.listBackupPolicyPlans(listBackupPolicyPlansOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyPlanCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBackupPolicyPlansPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("name"), "testString");
  }

  // Test the listBackupPolicyPlans operation with and without retries enabled
  @Test
  public void testListBackupPolicyPlansWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBackupPolicyPlansWOptions();

    vpcService.disableRetries();
    testListBackupPolicyPlansWOptions();
  }

  // Test the listBackupPolicyPlans operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBackupPolicyPlansNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBackupPolicyPlans(null).execute();
  }

  // Test the createBackupPolicyPlan operation with a valid options model parameter
  @Test
  public void testCreateBackupPolicyPlanWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"attach_user_tags\": [\"attachUserTags\"], \"copy_user_tags\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"cron_spec\": \"30 */2 * * 1-5\", \"deletion_trigger\": {\"delete_after\": 20, \"delete_over_count\": 20}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"lifecycle_state\": \"stable\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}";
    String createBackupPolicyPlanPath = "/backup_policies/testString/plans";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the BackupPolicyPlanDeletionTriggerPrototype model
    BackupPolicyPlanDeletionTriggerPrototype backupPolicyPlanDeletionTriggerPrototypeModel = new BackupPolicyPlanDeletionTriggerPrototype.Builder()
      .deleteAfter(Long.valueOf("20"))
      .deleteOverCount(Long.valueOf("20"))
      .build();

    // Construct an instance of the CreateBackupPolicyPlanOptions model
    CreateBackupPolicyPlanOptions createBackupPolicyPlanOptionsModel = new CreateBackupPolicyPlanOptions.Builder()
      .backupPolicyId("testString")
      .cronSpec("30 */2 * * 1-5")
      .active(true)
      .attachUserTags(java.util.Arrays.asList("my-daily-backup-plan"))
      .copyUserTags(true)
      .deletionTrigger(backupPolicyPlanDeletionTriggerPrototypeModel)
      .name("my-policy-plan")
      .build();

    // Invoke createBackupPolicyPlan() with a valid options model and verify the result
    Response<BackupPolicyPlan> response = vpcService.createBackupPolicyPlan(createBackupPolicyPlanOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyPlan responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createBackupPolicyPlanPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createBackupPolicyPlan operation with and without retries enabled
  @Test
  public void testCreateBackupPolicyPlanWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateBackupPolicyPlanWOptions();

    vpcService.disableRetries();
    testCreateBackupPolicyPlanWOptions();
  }

  // Test the createBackupPolicyPlan operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateBackupPolicyPlanNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createBackupPolicyPlan(null).execute();
  }

  // Test the deleteBackupPolicyPlan operation with a valid options model parameter
  @Test
  public void testDeleteBackupPolicyPlanWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"attach_user_tags\": [\"attachUserTags\"], \"copy_user_tags\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"cron_spec\": \"30 */2 * * 1-5\", \"deletion_trigger\": {\"delete_after\": 20, \"delete_over_count\": 20}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"lifecycle_state\": \"stable\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}";
    String deleteBackupPolicyPlanPath = "/backup_policies/testString/plans/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteBackupPolicyPlanOptions model
    DeleteBackupPolicyPlanOptions deleteBackupPolicyPlanOptionsModel = new DeleteBackupPolicyPlanOptions.Builder()
      .backupPolicyId("testString")
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteBackupPolicyPlan() with a valid options model and verify the result
    Response<BackupPolicyPlan> response = vpcService.deleteBackupPolicyPlan(deleteBackupPolicyPlanOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyPlan responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteBackupPolicyPlanPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteBackupPolicyPlan operation with and without retries enabled
  @Test
  public void testDeleteBackupPolicyPlanWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteBackupPolicyPlanWOptions();

    vpcService.disableRetries();
    testDeleteBackupPolicyPlanWOptions();
  }

  // Test the deleteBackupPolicyPlan operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteBackupPolicyPlanNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteBackupPolicyPlan(null).execute();
  }

  // Test the getBackupPolicyPlan operation with a valid options model parameter
  @Test
  public void testGetBackupPolicyPlanWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"attach_user_tags\": [\"attachUserTags\"], \"copy_user_tags\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"cron_spec\": \"30 */2 * * 1-5\", \"deletion_trigger\": {\"delete_after\": 20, \"delete_over_count\": 20}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"lifecycle_state\": \"stable\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}";
    String getBackupPolicyPlanPath = "/backup_policies/testString/plans/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBackupPolicyPlanOptions model
    GetBackupPolicyPlanOptions getBackupPolicyPlanOptionsModel = new GetBackupPolicyPlanOptions.Builder()
      .backupPolicyId("testString")
      .id("testString")
      .build();

    // Invoke getBackupPolicyPlan() with a valid options model and verify the result
    Response<BackupPolicyPlan> response = vpcService.getBackupPolicyPlan(getBackupPolicyPlanOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyPlan responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBackupPolicyPlanPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBackupPolicyPlan operation with and without retries enabled
  @Test
  public void testGetBackupPolicyPlanWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBackupPolicyPlanWOptions();

    vpcService.disableRetries();
    testGetBackupPolicyPlanWOptions();
  }

  // Test the getBackupPolicyPlan operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBackupPolicyPlanNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBackupPolicyPlan(null).execute();
  }

  // Test the updateBackupPolicyPlan operation with a valid options model parameter
  @Test
  public void testUpdateBackupPolicyPlanWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"attach_user_tags\": [\"attachUserTags\"], \"copy_user_tags\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"cron_spec\": \"30 */2 * * 1-5\", \"deletion_trigger\": {\"delete_after\": 20, \"delete_over_count\": 20}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"lifecycle_state\": \"stable\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}";
    String updateBackupPolicyPlanPath = "/backup_policies/testString/plans/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the BackupPolicyPlanDeletionTriggerPatch model
    BackupPolicyPlanDeletionTriggerPatch backupPolicyPlanDeletionTriggerPatchModel = new BackupPolicyPlanDeletionTriggerPatch.Builder()
      .deleteAfter(Long.valueOf("20"))
      .deleteOverCount(Long.valueOf("26"))
      .build();

    // Construct an instance of the BackupPolicyPlanPatch model
    BackupPolicyPlanPatch backupPolicyPlanPatchModel = new BackupPolicyPlanPatch.Builder()
      .active(true)
      .attachUserTags(java.util.Arrays.asList("my-daily-backup-plan"))
      .copyUserTags(true)
      .cronSpec("30 */2 * * 1-5")
      .deletionTrigger(backupPolicyPlanDeletionTriggerPatchModel)
      .name("my-policy-plan")
      .build();
    Map<String, Object> backupPolicyPlanPatchModelAsPatch = backupPolicyPlanPatchModel.asPatch();

    // Construct an instance of the UpdateBackupPolicyPlanOptions model
    UpdateBackupPolicyPlanOptions updateBackupPolicyPlanOptionsModel = new UpdateBackupPolicyPlanOptions.Builder()
      .backupPolicyId("testString")
      .id("testString")
      .backupPolicyPlanPatch(backupPolicyPlanPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateBackupPolicyPlan() with a valid options model and verify the result
    Response<BackupPolicyPlan> response = vpcService.updateBackupPolicyPlan(updateBackupPolicyPlanOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyPlan responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateBackupPolicyPlanPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateBackupPolicyPlan operation with and without retries enabled
  @Test
  public void testUpdateBackupPolicyPlanWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateBackupPolicyPlanWOptions();

    vpcService.disableRetries();
    testUpdateBackupPolicyPlanWOptions();
  }

  // Test the updateBackupPolicyPlan operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateBackupPolicyPlanNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateBackupPolicyPlan(null).execute();
  }

  // Test the deleteBackupPolicy operation with a valid options model parameter
  @Test
  public void testDeleteBackupPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::backup-policy:r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"id\": \"r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"last_job_completed_at\": \"2019-01-01T12:00:00.000Z\", \"lifecycle_state\": \"stable\", \"match_resource_types\": [\"volume\"], \"match_user_tags\": [\"matchUserTags\"], \"name\": \"my-backup-policy\", \"plans\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"backup_policy\"}";
    String deleteBackupPolicyPath = "/backup_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteBackupPolicyOptions model
    DeleteBackupPolicyOptions deleteBackupPolicyOptionsModel = new DeleteBackupPolicyOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteBackupPolicy() with a valid options model and verify the result
    Response<BackupPolicy> response = vpcService.deleteBackupPolicy(deleteBackupPolicyOptionsModel).execute();
    assertNotNull(response);
    BackupPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteBackupPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteBackupPolicy operation with and without retries enabled
  @Test
  public void testDeleteBackupPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteBackupPolicyWOptions();

    vpcService.disableRetries();
    testDeleteBackupPolicyWOptions();
  }

  // Test the deleteBackupPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteBackupPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteBackupPolicy(null).execute();
  }

  // Test the getBackupPolicy operation with a valid options model parameter
  @Test
  public void testGetBackupPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::backup-policy:r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"id\": \"r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"last_job_completed_at\": \"2019-01-01T12:00:00.000Z\", \"lifecycle_state\": \"stable\", \"match_resource_types\": [\"volume\"], \"match_user_tags\": [\"matchUserTags\"], \"name\": \"my-backup-policy\", \"plans\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"backup_policy\"}";
    String getBackupPolicyPath = "/backup_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBackupPolicyOptions model
    GetBackupPolicyOptions getBackupPolicyOptionsModel = new GetBackupPolicyOptions.Builder()
      .id("testString")
      .build();

    // Invoke getBackupPolicy() with a valid options model and verify the result
    Response<BackupPolicy> response = vpcService.getBackupPolicy(getBackupPolicyOptionsModel).execute();
    assertNotNull(response);
    BackupPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBackupPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBackupPolicy operation with and without retries enabled
  @Test
  public void testGetBackupPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBackupPolicyWOptions();

    vpcService.disableRetries();
    testGetBackupPolicyWOptions();
  }

  // Test the getBackupPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBackupPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBackupPolicy(null).execute();
  }

  // Test the updateBackupPolicy operation with a valid options model parameter
  @Test
  public void testUpdateBackupPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::backup-policy:r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"id\": \"r134-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"last_job_completed_at\": \"2019-01-01T12:00:00.000Z\", \"lifecycle_state\": \"stable\", \"match_resource_types\": [\"volume\"], \"match_user_tags\": [\"matchUserTags\"], \"name\": \"my-backup-policy\", \"plans\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"backup_policy\"}";
    String updateBackupPolicyPath = "/backup_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the BackupPolicyPatch model
    BackupPolicyPatch backupPolicyPatchModel = new BackupPolicyPatch.Builder()
      .matchUserTags(java.util.Arrays.asList("my-daily-backup-policy"))
      .name("my-backup-policy")
      .build();
    Map<String, Object> backupPolicyPatchModelAsPatch = backupPolicyPatchModel.asPatch();

    // Construct an instance of the UpdateBackupPolicyOptions model
    UpdateBackupPolicyOptions updateBackupPolicyOptionsModel = new UpdateBackupPolicyOptions.Builder()
      .id("testString")
      .backupPolicyPatch(backupPolicyPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateBackupPolicy() with a valid options model and verify the result
    Response<BackupPolicy> response = vpcService.updateBackupPolicy(updateBackupPolicyOptionsModel).execute();
    assertNotNull(response);
    BackupPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateBackupPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateBackupPolicy operation with and without retries enabled
  @Test
  public void testUpdateBackupPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateBackupPolicyWOptions();

    vpcService.disableRetries();
    testUpdateBackupPolicyWOptions();
  }

  // Test the updateBackupPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateBackupPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateBackupPolicy(null).execute();
  }

  // Test the listPlacementGroups operation with a valid options model parameter
  @Test
  public void testListPlacementGroupsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/placement_groups?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/placement_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"placement_groups\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::placement-group:r018-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r018-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"id\": \"r018-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"lifecycle_state\": \"stable\", \"name\": \"my-placement-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"placement_group\", \"strategy\": \"host_spread\"}], \"total_count\": 132}";
    String listPlacementGroupsPath = "/placement_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListPlacementGroupsOptions model
    ListPlacementGroupsOptions listPlacementGroupsOptionsModel = new ListPlacementGroupsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listPlacementGroups() with a valid options model and verify the result
    Response<PlacementGroupCollection> response = vpcService.listPlacementGroups(listPlacementGroupsOptionsModel).execute();
    assertNotNull(response);
    PlacementGroupCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listPlacementGroupsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listPlacementGroups operation with and without retries enabled
  @Test
  public void testListPlacementGroupsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListPlacementGroupsWOptions();

    vpcService.disableRetries();
    testListPlacementGroupsWOptions();
  }

  // Test the listPlacementGroups operation using the PlacementGroupsPager.getNext() method
  @Test
  public void testListPlacementGroupsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"placement_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::placement-group:r018-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r018-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"id\":\"r018-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"lifecycle_state\":\"stable\",\"name\":\"my-placement-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"placement_group\",\"strategy\":\"host_spread\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"placement_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::placement-group:r018-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r018-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"id\":\"r018-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"lifecycle_state\":\"stable\",\"name\":\"my-placement-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"placement_group\",\"strategy\":\"host_spread\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPlacementGroupsOptions listPlacementGroupsOptions = new ListPlacementGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<PlacementGroup> allResults = new ArrayList<>();
    PlacementGroupsPager pager = new PlacementGroupsPager(vpcService, listPlacementGroupsOptions);
    while (pager.hasNext()) {
      List<PlacementGroup> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listPlacementGroups operation using the PlacementGroupsPager.getAll() method
  @Test
  public void testListPlacementGroupsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"placement_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::placement-group:r018-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r018-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"id\":\"r018-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"lifecycle_state\":\"stable\",\"name\":\"my-placement-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"placement_group\",\"strategy\":\"host_spread\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"placement_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::placement-group:r018-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r018-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"id\":\"r018-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"lifecycle_state\":\"stable\",\"name\":\"my-placement-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"placement_group\",\"strategy\":\"host_spread\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPlacementGroupsOptions listPlacementGroupsOptions = new ListPlacementGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    PlacementGroupsPager pager = new PlacementGroupsPager(vpcService, listPlacementGroupsOptions);
    List<PlacementGroup> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createPlacementGroup operation with a valid options model parameter
  @Test
  public void testCreatePlacementGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::placement-group:r018-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r018-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"id\": \"r018-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"lifecycle_state\": \"stable\", \"name\": \"my-placement-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"placement_group\", \"strategy\": \"host_spread\"}";
    String createPlacementGroupPath = "/placement_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreatePlacementGroupOptions model
    CreatePlacementGroupOptions createPlacementGroupOptionsModel = new CreatePlacementGroupOptions.Builder()
      .strategy("host_spread")
      .name("my-placement-group")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createPlacementGroup() with a valid options model and verify the result
    Response<PlacementGroup> response = vpcService.createPlacementGroup(createPlacementGroupOptionsModel).execute();
    assertNotNull(response);
    PlacementGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createPlacementGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createPlacementGroup operation with and without retries enabled
  @Test
  public void testCreatePlacementGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreatePlacementGroupWOptions();

    vpcService.disableRetries();
    testCreatePlacementGroupWOptions();
  }

  // Test the createPlacementGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreatePlacementGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createPlacementGroup(null).execute();
  }

  // Test the deletePlacementGroup operation with a valid options model parameter
  @Test
  public void testDeletePlacementGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deletePlacementGroupPath = "/placement_groups/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeletePlacementGroupOptions model
    DeletePlacementGroupOptions deletePlacementGroupOptionsModel = new DeletePlacementGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke deletePlacementGroup() with a valid options model and verify the result
    Response<Void> response = vpcService.deletePlacementGroup(deletePlacementGroupOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deletePlacementGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deletePlacementGroup operation with and without retries enabled
  @Test
  public void testDeletePlacementGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeletePlacementGroupWOptions();

    vpcService.disableRetries();
    testDeletePlacementGroupWOptions();
  }

  // Test the deletePlacementGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeletePlacementGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deletePlacementGroup(null).execute();
  }

  // Test the getPlacementGroup operation with a valid options model parameter
  @Test
  public void testGetPlacementGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::placement-group:r018-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r018-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"id\": \"r018-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"lifecycle_state\": \"stable\", \"name\": \"my-placement-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"placement_group\", \"strategy\": \"host_spread\"}";
    String getPlacementGroupPath = "/placement_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetPlacementGroupOptions model
    GetPlacementGroupOptions getPlacementGroupOptionsModel = new GetPlacementGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke getPlacementGroup() with a valid options model and verify the result
    Response<PlacementGroup> response = vpcService.getPlacementGroup(getPlacementGroupOptionsModel).execute();
    assertNotNull(response);
    PlacementGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getPlacementGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getPlacementGroup operation with and without retries enabled
  @Test
  public void testGetPlacementGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetPlacementGroupWOptions();

    vpcService.disableRetries();
    testGetPlacementGroupWOptions();
  }

  // Test the getPlacementGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetPlacementGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getPlacementGroup(null).execute();
  }

  // Test the updatePlacementGroup operation with a valid options model parameter
  @Test
  public void testUpdatePlacementGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::placement-group:r018-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r018-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"id\": \"r018-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"lifecycle_state\": \"stable\", \"name\": \"my-placement-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"placement_group\", \"strategy\": \"host_spread\"}";
    String updatePlacementGroupPath = "/placement_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the PlacementGroupPatch model
    PlacementGroupPatch placementGroupPatchModel = new PlacementGroupPatch.Builder()
      .name("my-placement-group")
      .build();
    Map<String, Object> placementGroupPatchModelAsPatch = placementGroupPatchModel.asPatch();

    // Construct an instance of the UpdatePlacementGroupOptions model
    UpdatePlacementGroupOptions updatePlacementGroupOptionsModel = new UpdatePlacementGroupOptions.Builder()
      .id("testString")
      .placementGroupPatch(placementGroupPatchModelAsPatch)
      .build();

    // Invoke updatePlacementGroup() with a valid options model and verify the result
    Response<PlacementGroup> response = vpcService.updatePlacementGroup(updatePlacementGroupOptionsModel).execute();
    assertNotNull(response);
    PlacementGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updatePlacementGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updatePlacementGroup operation with and without retries enabled
  @Test
  public void testUpdatePlacementGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdatePlacementGroupWOptions();

    vpcService.disableRetries();
    testUpdatePlacementGroupWOptions();
  }

  // Test the updatePlacementGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdatePlacementGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updatePlacementGroup(null).execute();
  }

  // Test the listBareMetalServerProfiles operation with a valid options model parameter
  @Test
  public void testListBareMetalServerProfilesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"profiles\": [{\"bandwidth\": {\"type\": \"fixed\", \"value\": 20000}, \"cpu_architecture\": {\"default\": \"amd64\", \"type\": \"fixed\", \"value\": \"amd64\"}, \"cpu_core_count\": {\"type\": \"fixed\", \"value\": 80}, \"cpu_socket_count\": {\"type\": \"fixed\", \"value\": 4}, \"disks\": [{\"quantity\": {\"type\": \"fixed\", \"value\": 4}, \"size\": {\"type\": \"fixed\", \"value\": 100}, \"supported_interface_types\": {\"default\": \"fcp\", \"type\": \"enum\", \"values\": [\"fcp\"]}}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\", \"memory\": {\"type\": \"fixed\", \"value\": 16}, \"name\": \"bx2-metal-192x768\", \"os_architecture\": {\"default\": \"amd64\", \"type\": \"enum\", \"values\": [\"amd64\"]}, \"resource_type\": \"bare_metal_server_profile\", \"supported_trusted_platform_module_modes\": {\"type\": \"enum\", \"values\": [\"tpm_2\"]}}], \"total_count\": 132}";
    String listBareMetalServerProfilesPath = "/bare_metal_server/profiles";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServerProfilesOptions model
    ListBareMetalServerProfilesOptions listBareMetalServerProfilesOptionsModel = new ListBareMetalServerProfilesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listBareMetalServerProfiles() with a valid options model and verify the result
    Response<BareMetalServerProfileCollection> response = vpcService.listBareMetalServerProfiles(listBareMetalServerProfilesOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerProfileCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServerProfilesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listBareMetalServerProfiles operation with and without retries enabled
  @Test
  public void testListBareMetalServerProfilesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServerProfilesWOptions();

    vpcService.disableRetries();
    testListBareMetalServerProfilesWOptions();
  }

  // Test the listBareMetalServerProfiles operation using the BareMetalServerProfilesPager.getNext() method
  @Test
  public void testListBareMetalServerProfilesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"bandwidth\":{\"type\":\"fixed\",\"value\":20000},\"cpu_architecture\":{\"default\":\"amd64\",\"type\":\"fixed\",\"value\":\"amd64\"},\"cpu_core_count\":{\"type\":\"fixed\",\"value\":80},\"cpu_socket_count\":{\"type\":\"fixed\",\"value\":4},\"disks\":[{\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":100},\"supported_interface_types\":{\"default\":\"fcp\",\"type\":\"enum\",\"values\":[\"fcp\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"bx2-metal-192x768\",\"os_architecture\":{\"default\":\"amd64\",\"type\":\"enum\",\"values\":[\"amd64\"]},\"resource_type\":\"bare_metal_server_profile\",\"supported_trusted_platform_module_modes\":{\"type\":\"enum\",\"values\":[\"tpm_2\"]}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"bandwidth\":{\"type\":\"fixed\",\"value\":20000},\"cpu_architecture\":{\"default\":\"amd64\",\"type\":\"fixed\",\"value\":\"amd64\"},\"cpu_core_count\":{\"type\":\"fixed\",\"value\":80},\"cpu_socket_count\":{\"type\":\"fixed\",\"value\":4},\"disks\":[{\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":100},\"supported_interface_types\":{\"default\":\"fcp\",\"type\":\"enum\",\"values\":[\"fcp\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"bx2-metal-192x768\",\"os_architecture\":{\"default\":\"amd64\",\"type\":\"enum\",\"values\":[\"amd64\"]},\"resource_type\":\"bare_metal_server_profile\",\"supported_trusted_platform_module_modes\":{\"type\":\"enum\",\"values\":[\"tpm_2\"]}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServerProfilesOptions listBareMetalServerProfilesOptions = new ListBareMetalServerProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<BareMetalServerProfile> allResults = new ArrayList<>();
    BareMetalServerProfilesPager pager = new BareMetalServerProfilesPager(vpcService, listBareMetalServerProfilesOptions);
    while (pager.hasNext()) {
      List<BareMetalServerProfile> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listBareMetalServerProfiles operation using the BareMetalServerProfilesPager.getAll() method
  @Test
  public void testListBareMetalServerProfilesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"bandwidth\":{\"type\":\"fixed\",\"value\":20000},\"cpu_architecture\":{\"default\":\"amd64\",\"type\":\"fixed\",\"value\":\"amd64\"},\"cpu_core_count\":{\"type\":\"fixed\",\"value\":80},\"cpu_socket_count\":{\"type\":\"fixed\",\"value\":4},\"disks\":[{\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":100},\"supported_interface_types\":{\"default\":\"fcp\",\"type\":\"enum\",\"values\":[\"fcp\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"bx2-metal-192x768\",\"os_architecture\":{\"default\":\"amd64\",\"type\":\"enum\",\"values\":[\"amd64\"]},\"resource_type\":\"bare_metal_server_profile\",\"supported_trusted_platform_module_modes\":{\"type\":\"enum\",\"values\":[\"tpm_2\"]}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"bandwidth\":{\"type\":\"fixed\",\"value\":20000},\"cpu_architecture\":{\"default\":\"amd64\",\"type\":\"fixed\",\"value\":\"amd64\"},\"cpu_core_count\":{\"type\":\"fixed\",\"value\":80},\"cpu_socket_count\":{\"type\":\"fixed\",\"value\":4},\"disks\":[{\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":100},\"supported_interface_types\":{\"default\":\"fcp\",\"type\":\"enum\",\"values\":[\"fcp\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"bx2-metal-192x768\",\"os_architecture\":{\"default\":\"amd64\",\"type\":\"enum\",\"values\":[\"amd64\"]},\"resource_type\":\"bare_metal_server_profile\",\"supported_trusted_platform_module_modes\":{\"type\":\"enum\",\"values\":[\"tpm_2\"]}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServerProfilesOptions listBareMetalServerProfilesOptions = new ListBareMetalServerProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    BareMetalServerProfilesPager pager = new BareMetalServerProfilesPager(vpcService, listBareMetalServerProfilesOptions);
    List<BareMetalServerProfile> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getBareMetalServerProfile operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerProfileWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": {\"type\": \"fixed\", \"value\": 20000}, \"cpu_architecture\": {\"default\": \"amd64\", \"type\": \"fixed\", \"value\": \"amd64\"}, \"cpu_core_count\": {\"type\": \"fixed\", \"value\": 80}, \"cpu_socket_count\": {\"type\": \"fixed\", \"value\": 4}, \"disks\": [{\"quantity\": {\"type\": \"fixed\", \"value\": 4}, \"size\": {\"type\": \"fixed\", \"value\": 100}, \"supported_interface_types\": {\"default\": \"fcp\", \"type\": \"enum\", \"values\": [\"fcp\"]}}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\", \"memory\": {\"type\": \"fixed\", \"value\": 16}, \"name\": \"bx2-metal-192x768\", \"os_architecture\": {\"default\": \"amd64\", \"type\": \"enum\", \"values\": [\"amd64\"]}, \"resource_type\": \"bare_metal_server_profile\", \"supported_trusted_platform_module_modes\": {\"type\": \"enum\", \"values\": [\"tpm_2\"]}}";
    String getBareMetalServerProfilePath = "/bare_metal_server/profiles/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerProfileOptions model
    GetBareMetalServerProfileOptions getBareMetalServerProfileOptionsModel = new GetBareMetalServerProfileOptions.Builder()
      .name("testString")
      .build();

    // Invoke getBareMetalServerProfile() with a valid options model and verify the result
    Response<BareMetalServerProfile> response = vpcService.getBareMetalServerProfile(getBareMetalServerProfileOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerProfile responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerProfilePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerProfile operation with and without retries enabled
  @Test
  public void testGetBareMetalServerProfileWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerProfileWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerProfileWOptions();
  }

  // Test the getBareMetalServerProfile operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerProfileNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerProfile(null).execute();
  }

  // Test the listBareMetalServers operation with a valid options model parameter
  @Test
  public void testListBareMetalServersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bare_metal_servers\": [{\"bandwidth\": 20000, \"boot_target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\"}, \"cpu\": {\"architecture\": \"amd64\", \"core_count\": 80, \"socket_count\": 4, \"threads_per_core\": 2}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::bare-metal-server:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}], \"enable_secure_boot\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"memory\": 1536, \"name\": \"my-bare-metal-server\", \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\", \"name\": \"bx2-metal-192x768\", \"resource_type\": \"bare_metal_server_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"bare_metal_server\", \"status\": \"failed\", \"status_reasons\": [{\"code\": \"cannot_start_capacity\", \"message\": \"The bare metal server cannot start as there is no more capacity in this\nzone for a bare metal server with the requested profile.\", \"more_info\": \"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}], \"trusted_platform_module\": {\"enabled\": true, \"mode\": \"tpm_2\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listBareMetalServersPath = "/bare_metal_servers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServersOptions model
    ListBareMetalServersOptions listBareMetalServersOptionsModel = new ListBareMetalServersOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .vpcId("testString")
      .vpcCrn("testString")
      .vpcName("testString")
      .networkInterfacesSubnetId("testString")
      .networkInterfacesSubnetCrn("testString")
      .networkInterfacesSubnetName("testString")
      .build();

    // Invoke listBareMetalServers() with a valid options model and verify the result
    Response<BareMetalServerCollection> response = vpcService.listBareMetalServers(listBareMetalServersOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "testString");
    assertEquals(query.get("vpc.id"), "testString");
    assertEquals(query.get("vpc.crn"), "testString");
    assertEquals(query.get("vpc.name"), "testString");
    assertEquals(query.get("network_interfaces.subnet.id"), "testString");
    assertEquals(query.get("network_interfaces.subnet.crn"), "testString");
    assertEquals(query.get("network_interfaces.subnet.name"), "testString");
  }

  // Test the listBareMetalServers operation with and without retries enabled
  @Test
  public void testListBareMetalServersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServersWOptions();

    vpcService.disableRetries();
    testListBareMetalServersWOptions();
  }

  // Test the listBareMetalServers operation using the BareMetalServersPager.getNext() method
  @Test
  public void testListBareMetalServersWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"bare_metal_servers\":[{\"bandwidth\":20000,\"boot_target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\"},\"cpu\":{\"architecture\":\"amd64\",\"core_count\":80,\"socket_count\":4,\"threads_per_core\":2},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::bare-metal-server:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"interface_type\":\"fcp\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\",\"size\":100}],\"enable_secure_boot\":false,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"memory\":1536,\"name\":\"my-bare-metal-server\",\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"name\":\"bx2-metal-192x768\",\"resource_type\":\"bare_metal_server_profile\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"bare_metal_server\",\"status\":\"failed\",\"status_reasons\":[{\"code\":\"cannot_start_capacity\",\"message\":\"The bare metal server cannot start as there is no more capacity in this\\nzone for a bare metal server with the requested profile.\",\"more_info\":\"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}],\"trusted_platform_module\":{\"enabled\":true,\"mode\":\"tpm_2\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"bare_metal_servers\":[{\"bandwidth\":20000,\"boot_target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\"},\"cpu\":{\"architecture\":\"amd64\",\"core_count\":80,\"socket_count\":4,\"threads_per_core\":2},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::bare-metal-server:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"interface_type\":\"fcp\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\",\"size\":100}],\"enable_secure_boot\":false,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"memory\":1536,\"name\":\"my-bare-metal-server\",\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"name\":\"bx2-metal-192x768\",\"resource_type\":\"bare_metal_server_profile\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"bare_metal_server\",\"status\":\"failed\",\"status_reasons\":[{\"code\":\"cannot_start_capacity\",\"message\":\"The bare metal server cannot start as there is no more capacity in this\\nzone for a bare metal server with the requested profile.\",\"more_info\":\"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}],\"trusted_platform_module\":{\"enabled\":true,\"mode\":\"tpm_2\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServersOptions listBareMetalServersOptions = new ListBareMetalServersOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .vpcId("testString")
      .vpcCrn("testString")
      .vpcName("testString")
      .networkInterfacesSubnetId("testString")
      .networkInterfacesSubnetCrn("testString")
      .networkInterfacesSubnetName("testString")
      .build();

    List<BareMetalServer> allResults = new ArrayList<>();
    BareMetalServersPager pager = new BareMetalServersPager(vpcService, listBareMetalServersOptions);
    while (pager.hasNext()) {
      List<BareMetalServer> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listBareMetalServers operation using the BareMetalServersPager.getAll() method
  @Test
  public void testListBareMetalServersWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"bare_metal_servers\":[{\"bandwidth\":20000,\"boot_target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\"},\"cpu\":{\"architecture\":\"amd64\",\"core_count\":80,\"socket_count\":4,\"threads_per_core\":2},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::bare-metal-server:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"interface_type\":\"fcp\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\",\"size\":100}],\"enable_secure_boot\":false,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"memory\":1536,\"name\":\"my-bare-metal-server\",\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"name\":\"bx2-metal-192x768\",\"resource_type\":\"bare_metal_server_profile\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"bare_metal_server\",\"status\":\"failed\",\"status_reasons\":[{\"code\":\"cannot_start_capacity\",\"message\":\"The bare metal server cannot start as there is no more capacity in this\\nzone for a bare metal server with the requested profile.\",\"more_info\":\"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}],\"trusted_platform_module\":{\"enabled\":true,\"mode\":\"tpm_2\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"bare_metal_servers\":[{\"bandwidth\":20000,\"boot_target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\"},\"cpu\":{\"architecture\":\"amd64\",\"core_count\":80,\"socket_count\":4,\"threads_per_core\":2},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::bare-metal-server:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"interface_type\":\"fcp\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\",\"size\":100}],\"enable_secure_boot\":false,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"memory\":1536,\"name\":\"my-bare-metal-server\",\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"name\":\"bx2-metal-192x768\",\"resource_type\":\"bare_metal_server_profile\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"bare_metal_server\",\"status\":\"failed\",\"status_reasons\":[{\"code\":\"cannot_start_capacity\",\"message\":\"The bare metal server cannot start as there is no more capacity in this\\nzone for a bare metal server with the requested profile.\",\"more_info\":\"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}],\"trusted_platform_module\":{\"enabled\":true,\"mode\":\"tpm_2\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServersOptions listBareMetalServersOptions = new ListBareMetalServersOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .vpcId("testString")
      .vpcCrn("testString")
      .vpcName("testString")
      .networkInterfacesSubnetId("testString")
      .networkInterfacesSubnetCrn("testString")
      .networkInterfacesSubnetName("testString")
      .build();

    BareMetalServersPager pager = new BareMetalServersPager(vpcService, listBareMetalServersOptions);
    List<BareMetalServer> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createBareMetalServer operation with a valid options model parameter
  @Test
  public void testCreateBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": 20000, \"boot_target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\"}, \"cpu\": {\"architecture\": \"amd64\", \"core_count\": 80, \"socket_count\": 4, \"threads_per_core\": 2}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::bare-metal-server:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}], \"enable_secure_boot\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"memory\": 1536, \"name\": \"my-bare-metal-server\", \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\", \"name\": \"bx2-metal-192x768\", \"resource_type\": \"bare_metal_server_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"bare_metal_server\", \"status\": \"failed\", \"status_reasons\": [{\"code\": \"cannot_start_capacity\", \"message\": \"The bare metal server cannot start as there is no more capacity in this\nzone for a bare metal server with the requested profile.\", \"more_info\": \"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}], \"trusted_platform_module\": {\"enabled\": true, \"mode\": \"tpm_2\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createBareMetalServerPath = "/bare_metal_servers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ImageIdentityById model
    ImageIdentityById imageIdentityModel = new ImageIdentityById.Builder()
      .id("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
      .build();

    // Construct an instance of the KeyIdentityById model
    KeyIdentityById keyIdentityModel = new KeyIdentityById.Builder()
      .id("a6b1a881-2ce8-41a3-80fc-36316a73f803")
      .build();

    // Construct an instance of the BareMetalServerInitializationPrototype model
    BareMetalServerInitializationPrototype bareMetalServerInitializationPrototypeModel = new BareMetalServerInitializationPrototype.Builder()
      .image(imageIdentityModel)
      .keys(java.util.Arrays.asList(keyIdentityModel))
      .userData("testString")
      .build();

    // Construct an instance of the NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext model
    NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext networkInterfaceIpPrototypeModel = new NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the BareMetalServerPrimaryNetworkInterfacePrototype model
    BareMetalServerPrimaryNetworkInterfacePrototype bareMetalServerPrimaryNetworkInterfacePrototypeModel = new BareMetalServerPrimaryNetworkInterfacePrototype.Builder()
      .allowIpSpoofing(true)
      .allowedVlans(java.util.Arrays.asList(Long.valueOf("4")))
      .enableInfrastructureNat(true)
      .interfaceType("pci")
      .name("my-network-interface")
      .primaryIp(networkInterfaceIpPrototypeModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .build();

    // Construct an instance of the BareMetalServerProfileIdentityByName model
    BareMetalServerProfileIdentityByName bareMetalServerProfileIdentityModel = new BareMetalServerProfileIdentityByName.Builder()
      .name("bx2-metal-192x768")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByHiperSocketPrototype model
    BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByHiperSocketPrototype bareMetalServerNetworkInterfacePrototypeModel = new BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByHiperSocketPrototype.Builder()
      .allowIpSpoofing(true)
      .enableInfrastructureNat(true)
      .name("my-network-interface")
      .primaryIp(networkInterfaceIpPrototypeModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .interfaceType("hipersocket")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the CreateBareMetalServerOptions model
    CreateBareMetalServerOptions createBareMetalServerOptionsModel = new CreateBareMetalServerOptions.Builder()
      .initialization(bareMetalServerInitializationPrototypeModel)
      .primaryNetworkInterface(bareMetalServerPrimaryNetworkInterfacePrototypeModel)
      .profile(bareMetalServerProfileIdentityModel)
      .zone(zoneIdentityModel)
      .name("my-bare-metal-server")
      .networkInterfaces(java.util.Arrays.asList(bareMetalServerNetworkInterfacePrototypeModel))
      .resourceGroup(resourceGroupIdentityModel)
      .vpc(vpcIdentityModel)
      .build();

    // Invoke createBareMetalServer() with a valid options model and verify the result
    Response<BareMetalServer> response = vpcService.createBareMetalServer(createBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    BareMetalServer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createBareMetalServer operation with and without retries enabled
  @Test
  public void testCreateBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateBareMetalServerWOptions();

    vpcService.disableRetries();
    testCreateBareMetalServerWOptions();
  }

  // Test the createBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createBareMetalServer(null).execute();
  }

  // Test the createBareMetalServerConsoleAccessToken operation with a valid options model parameter
  @Test
  public void testCreateBareMetalServerConsoleAccessTokenWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_token\": \"VGhpcyBJcyBhIHRva2Vu\", \"console_type\": \"serial\", \"created_at\": \"2020-07-27T21:50:14.000Z\", \"expires_at\": \"2020-07-27T21:51:14.000Z\", \"force\": false, \"href\": \"wss://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/console?access_token=VGhpcyBJcyBhIHRva2Vu\"}";
    String createBareMetalServerConsoleAccessTokenPath = "/bare_metal_servers/testString/console_access_token";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateBareMetalServerConsoleAccessTokenOptions model
    CreateBareMetalServerConsoleAccessTokenOptions createBareMetalServerConsoleAccessTokenOptionsModel = new CreateBareMetalServerConsoleAccessTokenOptions.Builder()
      .bareMetalServerId("testString")
      .consoleType("serial")
      .force(false)
      .build();

    // Invoke createBareMetalServerConsoleAccessToken() with a valid options model and verify the result
    Response<BareMetalServerConsoleAccessToken> response = vpcService.createBareMetalServerConsoleAccessToken(createBareMetalServerConsoleAccessTokenOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerConsoleAccessToken responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createBareMetalServerConsoleAccessTokenPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createBareMetalServerConsoleAccessToken operation with and without retries enabled
  @Test
  public void testCreateBareMetalServerConsoleAccessTokenWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateBareMetalServerConsoleAccessTokenWOptions();

    vpcService.disableRetries();
    testCreateBareMetalServerConsoleAccessTokenWOptions();
  }

  // Test the createBareMetalServerConsoleAccessToken operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateBareMetalServerConsoleAccessTokenNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createBareMetalServerConsoleAccessToken(null).execute();
  }

  // Test the listBareMetalServerDisks operation with a valid options model parameter
  @Test
  public void testListBareMetalServerDisksWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}]}";
    String listBareMetalServerDisksPath = "/bare_metal_servers/testString/disks";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServerDisksOptions model
    ListBareMetalServerDisksOptions listBareMetalServerDisksOptionsModel = new ListBareMetalServerDisksOptions.Builder()
      .bareMetalServerId("testString")
      .build();

    // Invoke listBareMetalServerDisks() with a valid options model and verify the result
    Response<BareMetalServerDiskCollection> response = vpcService.listBareMetalServerDisks(listBareMetalServerDisksOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerDiskCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServerDisksPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listBareMetalServerDisks operation with and without retries enabled
  @Test
  public void testListBareMetalServerDisksWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServerDisksWOptions();

    vpcService.disableRetries();
    testListBareMetalServerDisksWOptions();
  }

  // Test the listBareMetalServerDisks operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBareMetalServerDisksNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBareMetalServerDisks(null).execute();
  }

  // Test the getBareMetalServerDisk operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerDiskWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}";
    String getBareMetalServerDiskPath = "/bare_metal_servers/testString/disks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerDiskOptions model
    GetBareMetalServerDiskOptions getBareMetalServerDiskOptionsModel = new GetBareMetalServerDiskOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .build();

    // Invoke getBareMetalServerDisk() with a valid options model and verify the result
    Response<BareMetalServerDisk> response = vpcService.getBareMetalServerDisk(getBareMetalServerDiskOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerDisk responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerDiskPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerDisk operation with and without retries enabled
  @Test
  public void testGetBareMetalServerDiskWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerDiskWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerDiskWOptions();
  }

  // Test the getBareMetalServerDisk operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerDiskNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerDisk(null).execute();
  }

  // Test the updateBareMetalServerDisk operation with a valid options model parameter
  @Test
  public void testUpdateBareMetalServerDiskWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}";
    String updateBareMetalServerDiskPath = "/bare_metal_servers/testString/disks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the BareMetalServerDiskPatch model
    BareMetalServerDiskPatch bareMetalServerDiskPatchModel = new BareMetalServerDiskPatch.Builder()
      .name("my-bare-metal-server-disk-updated")
      .build();
    Map<String, Object> bareMetalServerDiskPatchModelAsPatch = bareMetalServerDiskPatchModel.asPatch();

    // Construct an instance of the UpdateBareMetalServerDiskOptions model
    UpdateBareMetalServerDiskOptions updateBareMetalServerDiskOptionsModel = new UpdateBareMetalServerDiskOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .bareMetalServerDiskPatch(bareMetalServerDiskPatchModelAsPatch)
      .build();

    // Invoke updateBareMetalServerDisk() with a valid options model and verify the result
    Response<BareMetalServerDisk> response = vpcService.updateBareMetalServerDisk(updateBareMetalServerDiskOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerDisk responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateBareMetalServerDiskPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateBareMetalServerDisk operation with and without retries enabled
  @Test
  public void testUpdateBareMetalServerDiskWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateBareMetalServerDiskWOptions();

    vpcService.disableRetries();
    testUpdateBareMetalServerDiskWOptions();
  }

  // Test the updateBareMetalServerDisk operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateBareMetalServerDiskNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateBareMetalServerDisk(null).execute();
  }

  // Test the listBareMetalServerNetworkInterfaces operation with a valid options model parameter
  @Test
  public void testListBareMetalServerNetworkInterfacesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?limit=20\"}, \"limit\": 20, \"network_interfaces\": [{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": true, \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"mac_address\": \"02:00:0a:00:23:94\", \"name\": \"my-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"interface_type\": \"hipersocket\"}], \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?start=d3e721fd-c988-4670-9927-dbd5e7b07fc6&limit=20\"}, \"total_count\": 132}";
    String listBareMetalServerNetworkInterfacesPath = "/bare_metal_servers/testString/network_interfaces";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServerNetworkInterfacesOptions model
    ListBareMetalServerNetworkInterfacesOptions listBareMetalServerNetworkInterfacesOptionsModel = new ListBareMetalServerNetworkInterfacesOptions.Builder()
      .bareMetalServerId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listBareMetalServerNetworkInterfaces() with a valid options model and verify the result
    Response<BareMetalServerNetworkInterfaceCollection> response = vpcService.listBareMetalServerNetworkInterfaces(listBareMetalServerNetworkInterfacesOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerNetworkInterfaceCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServerNetworkInterfacesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listBareMetalServerNetworkInterfaces operation with and without retries enabled
  @Test
  public void testListBareMetalServerNetworkInterfacesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServerNetworkInterfacesWOptions();

    vpcService.disableRetries();
    testListBareMetalServerNetworkInterfacesWOptions();
  }

  // Test the listBareMetalServerNetworkInterfaces operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBareMetalServerNetworkInterfacesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBareMetalServerNetworkInterfaces(null).execute();
  }

  // Test the listBareMetalServerNetworkInterfaces operation using the BareMetalServerNetworkInterfacesPager.getNext() method
  @Test
  public void testListBareMetalServerNetworkInterfacesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"network_interfaces\":[{\"allow_ip_spoofing\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"enable_infrastructure_nat\":true,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"name\":\"my-floating-ip\"}],\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"mac_address\":\"02:00:0a:00:23:94\",\"name\":\"my-network-interface\",\"port_speed\":1000,\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"status\":\"available\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"type\":\"primary\",\"interface_type\":\"hipersocket\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"network_interfaces\":[{\"allow_ip_spoofing\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"enable_infrastructure_nat\":true,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"name\":\"my-floating-ip\"}],\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"mac_address\":\"02:00:0a:00:23:94\",\"name\":\"my-network-interface\",\"port_speed\":1000,\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"status\":\"available\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"type\":\"primary\",\"interface_type\":\"hipersocket\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServerNetworkInterfacesOptions listBareMetalServerNetworkInterfacesOptions = new ListBareMetalServerNetworkInterfacesOptions.Builder()
      .bareMetalServerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<BareMetalServerNetworkInterface> allResults = new ArrayList<>();
    BareMetalServerNetworkInterfacesPager pager = new BareMetalServerNetworkInterfacesPager(vpcService, listBareMetalServerNetworkInterfacesOptions);
    while (pager.hasNext()) {
      List<BareMetalServerNetworkInterface> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listBareMetalServerNetworkInterfaces operation using the BareMetalServerNetworkInterfacesPager.getAll() method
  @Test
  public void testListBareMetalServerNetworkInterfacesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"network_interfaces\":[{\"allow_ip_spoofing\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"enable_infrastructure_nat\":true,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"name\":\"my-floating-ip\"}],\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"mac_address\":\"02:00:0a:00:23:94\",\"name\":\"my-network-interface\",\"port_speed\":1000,\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"status\":\"available\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"type\":\"primary\",\"interface_type\":\"hipersocket\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"network_interfaces\":[{\"allow_ip_spoofing\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"enable_infrastructure_nat\":true,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"name\":\"my-floating-ip\"}],\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"mac_address\":\"02:00:0a:00:23:94\",\"name\":\"my-network-interface\",\"port_speed\":1000,\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"status\":\"available\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"type\":\"primary\",\"interface_type\":\"hipersocket\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServerNetworkInterfacesOptions listBareMetalServerNetworkInterfacesOptions = new ListBareMetalServerNetworkInterfacesOptions.Builder()
      .bareMetalServerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    BareMetalServerNetworkInterfacesPager pager = new BareMetalServerNetworkInterfacesPager(vpcService, listBareMetalServerNetworkInterfacesOptions);
    List<BareMetalServerNetworkInterface> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createBareMetalServerNetworkInterface operation with a valid options model parameter
  @Test
  public void testCreateBareMetalServerNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": true, \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"mac_address\": \"02:00:0a:00:23:94\", \"name\": \"my-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"interface_type\": \"hipersocket\"}";
    String createBareMetalServerNetworkInterfacePath = "/bare_metal_servers/testString/network_interfaces";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext model
    NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext networkInterfaceIpPrototypeModel = new NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByHiperSocketPrototype model
    BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByHiperSocketPrototype bareMetalServerNetworkInterfacePrototypeModel = new BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByHiperSocketPrototype.Builder()
      .allowIpSpoofing(true)
      .enableInfrastructureNat(true)
      .name("my-network-interface")
      .primaryIp(networkInterfaceIpPrototypeModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .interfaceType("hipersocket")
      .build();

    // Construct an instance of the CreateBareMetalServerNetworkInterfaceOptions model
    CreateBareMetalServerNetworkInterfaceOptions createBareMetalServerNetworkInterfaceOptionsModel = new CreateBareMetalServerNetworkInterfaceOptions.Builder()
      .bareMetalServerId("testString")
      .bareMetalServerNetworkInterfacePrototype(bareMetalServerNetworkInterfacePrototypeModel)
      .build();

    // Invoke createBareMetalServerNetworkInterface() with a valid options model and verify the result
    Response<BareMetalServerNetworkInterface> response = vpcService.createBareMetalServerNetworkInterface(createBareMetalServerNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createBareMetalServerNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createBareMetalServerNetworkInterface operation with and without retries enabled
  @Test
  public void testCreateBareMetalServerNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateBareMetalServerNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testCreateBareMetalServerNetworkInterfaceWOptions();
  }

  // Test the createBareMetalServerNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateBareMetalServerNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createBareMetalServerNetworkInterface(null).execute();
  }

  // Test the deleteBareMetalServerNetworkInterface operation with a valid options model parameter
  @Test
  public void testDeleteBareMetalServerNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteBareMetalServerNetworkInterfacePath = "/bare_metal_servers/testString/network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteBareMetalServerNetworkInterfaceOptions model
    DeleteBareMetalServerNetworkInterfaceOptions deleteBareMetalServerNetworkInterfaceOptionsModel = new DeleteBareMetalServerNetworkInterfaceOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .build();

    // Invoke deleteBareMetalServerNetworkInterface() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteBareMetalServerNetworkInterface(deleteBareMetalServerNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteBareMetalServerNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteBareMetalServerNetworkInterface operation with and without retries enabled
  @Test
  public void testDeleteBareMetalServerNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteBareMetalServerNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testDeleteBareMetalServerNetworkInterfaceWOptions();
  }

  // Test the deleteBareMetalServerNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteBareMetalServerNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteBareMetalServerNetworkInterface(null).execute();
  }

  // Test the getBareMetalServerNetworkInterface operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": true, \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"mac_address\": \"02:00:0a:00:23:94\", \"name\": \"my-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"interface_type\": \"hipersocket\"}";
    String getBareMetalServerNetworkInterfacePath = "/bare_metal_servers/testString/network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerNetworkInterfaceOptions model
    GetBareMetalServerNetworkInterfaceOptions getBareMetalServerNetworkInterfaceOptionsModel = new GetBareMetalServerNetworkInterfaceOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .build();

    // Invoke getBareMetalServerNetworkInterface() with a valid options model and verify the result
    Response<BareMetalServerNetworkInterface> response = vpcService.getBareMetalServerNetworkInterface(getBareMetalServerNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerNetworkInterface operation with and without retries enabled
  @Test
  public void testGetBareMetalServerNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerNetworkInterfaceWOptions();
  }

  // Test the getBareMetalServerNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerNetworkInterface(null).execute();
  }

  // Test the updateBareMetalServerNetworkInterface operation with a valid options model parameter
  @Test
  public void testUpdateBareMetalServerNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": true, \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"mac_address\": \"02:00:0a:00:23:94\", \"name\": \"my-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"interface_type\": \"hipersocket\"}";
    String updateBareMetalServerNetworkInterfacePath = "/bare_metal_servers/testString/network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the BareMetalServerNetworkInterfacePatch model
    BareMetalServerNetworkInterfacePatch bareMetalServerNetworkInterfacePatchModel = new BareMetalServerNetworkInterfacePatch.Builder()
      .allowIpSpoofing(true)
      .allowedVlans(java.util.Arrays.asList(Long.valueOf("4")))
      .enableInfrastructureNat(true)
      .name("my-network-interface")
      .build();
    Map<String, Object> bareMetalServerNetworkInterfacePatchModelAsPatch = bareMetalServerNetworkInterfacePatchModel.asPatch();

    // Construct an instance of the UpdateBareMetalServerNetworkInterfaceOptions model
    UpdateBareMetalServerNetworkInterfaceOptions updateBareMetalServerNetworkInterfaceOptionsModel = new UpdateBareMetalServerNetworkInterfaceOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .bareMetalServerNetworkInterfacePatch(bareMetalServerNetworkInterfacePatchModelAsPatch)
      .build();

    // Invoke updateBareMetalServerNetworkInterface() with a valid options model and verify the result
    Response<BareMetalServerNetworkInterface> response = vpcService.updateBareMetalServerNetworkInterface(updateBareMetalServerNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateBareMetalServerNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateBareMetalServerNetworkInterface operation with and without retries enabled
  @Test
  public void testUpdateBareMetalServerNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateBareMetalServerNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testUpdateBareMetalServerNetworkInterfaceWOptions();
  }

  // Test the updateBareMetalServerNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateBareMetalServerNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateBareMetalServerNetworkInterface(null).execute();
  }

  // Test the listBareMetalServerNetworkInterfaceFloatingIps operation with a valid options model parameter
  @Test
  public void testListBareMetalServerNetworkInterfaceFloatingIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"floating_ips\": [{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}]}";
    String listBareMetalServerNetworkInterfaceFloatingIpsPath = "/bare_metal_servers/testString/network_interfaces/testString/floating_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServerNetworkInterfaceFloatingIpsOptions model
    ListBareMetalServerNetworkInterfaceFloatingIpsOptions listBareMetalServerNetworkInterfaceFloatingIpsOptionsModel = new ListBareMetalServerNetworkInterfaceFloatingIpsOptions.Builder()
      .bareMetalServerId("testString")
      .networkInterfaceId("testString")
      .build();

    // Invoke listBareMetalServerNetworkInterfaceFloatingIps() with a valid options model and verify the result
    Response<FloatingIPUnpaginatedCollection> response = vpcService.listBareMetalServerNetworkInterfaceFloatingIps(listBareMetalServerNetworkInterfaceFloatingIpsOptionsModel).execute();
    assertNotNull(response);
    FloatingIPUnpaginatedCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServerNetworkInterfaceFloatingIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listBareMetalServerNetworkInterfaceFloatingIps operation with and without retries enabled
  @Test
  public void testListBareMetalServerNetworkInterfaceFloatingIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServerNetworkInterfaceFloatingIpsWOptions();

    vpcService.disableRetries();
    testListBareMetalServerNetworkInterfaceFloatingIpsWOptions();
  }

  // Test the listBareMetalServerNetworkInterfaceFloatingIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBareMetalServerNetworkInterfaceFloatingIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBareMetalServerNetworkInterfaceFloatingIps(null).execute();
  }

  // Test the removeBareMetalServerNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testRemoveBareMetalServerNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String removeBareMetalServerNetworkInterfaceFloatingIpPath = "/bare_metal_servers/testString/network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RemoveBareMetalServerNetworkInterfaceFloatingIpOptions model
    RemoveBareMetalServerNetworkInterfaceFloatingIpOptions removeBareMetalServerNetworkInterfaceFloatingIpOptionsModel = new RemoveBareMetalServerNetworkInterfaceFloatingIpOptions.Builder()
      .bareMetalServerId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke removeBareMetalServerNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<Void> response = vpcService.removeBareMetalServerNetworkInterfaceFloatingIp(removeBareMetalServerNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, removeBareMetalServerNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the removeBareMetalServerNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testRemoveBareMetalServerNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRemoveBareMetalServerNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testRemoveBareMetalServerNetworkInterfaceFloatingIpWOptions();
  }

  // Test the removeBareMetalServerNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRemoveBareMetalServerNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.removeBareMetalServerNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the getBareMetalServerNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getBareMetalServerNetworkInterfaceFloatingIpPath = "/bare_metal_servers/testString/network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerNetworkInterfaceFloatingIpOptions model
    GetBareMetalServerNetworkInterfaceFloatingIpOptions getBareMetalServerNetworkInterfaceFloatingIpOptionsModel = new GetBareMetalServerNetworkInterfaceFloatingIpOptions.Builder()
      .bareMetalServerId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke getBareMetalServerNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.getBareMetalServerNetworkInterfaceFloatingIp(getBareMetalServerNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testGetBareMetalServerNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerNetworkInterfaceFloatingIpWOptions();
  }

  // Test the getBareMetalServerNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the addBareMetalServerNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testAddBareMetalServerNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String addBareMetalServerNetworkInterfaceFloatingIpPath = "/bare_metal_servers/testString/network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the AddBareMetalServerNetworkInterfaceFloatingIpOptions model
    AddBareMetalServerNetworkInterfaceFloatingIpOptions addBareMetalServerNetworkInterfaceFloatingIpOptionsModel = new AddBareMetalServerNetworkInterfaceFloatingIpOptions.Builder()
      .bareMetalServerId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke addBareMetalServerNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.addBareMetalServerNetworkInterfaceFloatingIp(addBareMetalServerNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, addBareMetalServerNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the addBareMetalServerNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testAddBareMetalServerNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testAddBareMetalServerNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testAddBareMetalServerNetworkInterfaceFloatingIpWOptions();
  }

  // Test the addBareMetalServerNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testAddBareMetalServerNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.addBareMetalServerNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the listBareMetalServerNetworkInterfaceIps operation with a valid options model parameter
  @Test
  public void testListBareMetalServerNetworkInterfaceIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e/ips?limit=20\"}, \"ips\": [{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e/ips?start=a404e343444b4e1095c9edba76672d67&limit=20\"}, \"total_count\": 132}";
    String listBareMetalServerNetworkInterfaceIpsPath = "/bare_metal_servers/testString/network_interfaces/testString/ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServerNetworkInterfaceIpsOptions model
    ListBareMetalServerNetworkInterfaceIpsOptions listBareMetalServerNetworkInterfaceIpsOptionsModel = new ListBareMetalServerNetworkInterfaceIpsOptions.Builder()
      .bareMetalServerId("testString")
      .networkInterfaceId("testString")
      .build();

    // Invoke listBareMetalServerNetworkInterfaceIps() with a valid options model and verify the result
    Response<ReservedIPCollectionNetworkInterfaceContext> response = vpcService.listBareMetalServerNetworkInterfaceIps(listBareMetalServerNetworkInterfaceIpsOptionsModel).execute();
    assertNotNull(response);
    ReservedIPCollectionNetworkInterfaceContext responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServerNetworkInterfaceIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listBareMetalServerNetworkInterfaceIps operation with and without retries enabled
  @Test
  public void testListBareMetalServerNetworkInterfaceIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServerNetworkInterfaceIpsWOptions();

    vpcService.disableRetries();
    testListBareMetalServerNetworkInterfaceIpsWOptions();
  }

  // Test the listBareMetalServerNetworkInterfaceIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBareMetalServerNetworkInterfaceIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBareMetalServerNetworkInterfaceIps(null).execute();
  }

  // Test the getBareMetalServerNetworkInterfaceIp operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerNetworkInterfaceIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String getBareMetalServerNetworkInterfaceIpPath = "/bare_metal_servers/testString/network_interfaces/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerNetworkInterfaceIpOptions model
    GetBareMetalServerNetworkInterfaceIpOptions getBareMetalServerNetworkInterfaceIpOptionsModel = new GetBareMetalServerNetworkInterfaceIpOptions.Builder()
      .bareMetalServerId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke getBareMetalServerNetworkInterfaceIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.getBareMetalServerNetworkInterfaceIp(getBareMetalServerNetworkInterfaceIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerNetworkInterfaceIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerNetworkInterfaceIp operation with and without retries enabled
  @Test
  public void testGetBareMetalServerNetworkInterfaceIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerNetworkInterfaceIpWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerNetworkInterfaceIpWOptions();
  }

  // Test the getBareMetalServerNetworkInterfaceIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerNetworkInterfaceIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerNetworkInterfaceIp(null).execute();
  }

  // Test the deleteBareMetalServer operation with a valid options model parameter
  @Test
  public void testDeleteBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteBareMetalServerPath = "/bare_metal_servers/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteBareMetalServerOptions model
    DeleteBareMetalServerOptions deleteBareMetalServerOptionsModel = new DeleteBareMetalServerOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteBareMetalServer() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteBareMetalServer(deleteBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteBareMetalServer operation with and without retries enabled
  @Test
  public void testDeleteBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteBareMetalServerWOptions();

    vpcService.disableRetries();
    testDeleteBareMetalServerWOptions();
  }

  // Test the deleteBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteBareMetalServer(null).execute();
  }

  // Test the getBareMetalServer operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": 20000, \"boot_target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\"}, \"cpu\": {\"architecture\": \"amd64\", \"core_count\": 80, \"socket_count\": 4, \"threads_per_core\": 2}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::bare-metal-server:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}], \"enable_secure_boot\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"memory\": 1536, \"name\": \"my-bare-metal-server\", \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\", \"name\": \"bx2-metal-192x768\", \"resource_type\": \"bare_metal_server_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"bare_metal_server\", \"status\": \"failed\", \"status_reasons\": [{\"code\": \"cannot_start_capacity\", \"message\": \"The bare metal server cannot start as there is no more capacity in this\nzone for a bare metal server with the requested profile.\", \"more_info\": \"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}], \"trusted_platform_module\": {\"enabled\": true, \"mode\": \"tpm_2\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getBareMetalServerPath = "/bare_metal_servers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerOptions model
    GetBareMetalServerOptions getBareMetalServerOptionsModel = new GetBareMetalServerOptions.Builder()
      .id("testString")
      .build();

    // Invoke getBareMetalServer() with a valid options model and verify the result
    Response<BareMetalServer> response = vpcService.getBareMetalServer(getBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    BareMetalServer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServer operation with and without retries enabled
  @Test
  public void testGetBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerWOptions();
  }

  // Test the getBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServer(null).execute();
  }

  // Test the updateBareMetalServer operation with a valid options model parameter
  @Test
  public void testUpdateBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": 20000, \"boot_target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\"}, \"cpu\": {\"architecture\": \"amd64\", \"core_count\": 80, \"socket_count\": 4, \"threads_per_core\": 2}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::bare-metal-server:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}], \"enable_secure_boot\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"memory\": 1536, \"name\": \"my-bare-metal-server\", \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\", \"name\": \"bx2-metal-192x768\", \"resource_type\": \"bare_metal_server_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"bare_metal_server\", \"status\": \"failed\", \"status_reasons\": [{\"code\": \"cannot_start_capacity\", \"message\": \"The bare metal server cannot start as there is no more capacity in this\nzone for a bare metal server with the requested profile.\", \"more_info\": \"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}], \"trusted_platform_module\": {\"enabled\": true, \"mode\": \"tpm_2\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateBareMetalServerPath = "/bare_metal_servers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the BareMetalServerPatch model
    BareMetalServerPatch bareMetalServerPatchModel = new BareMetalServerPatch.Builder()
      .name("my-bare-metal-server")
      .build();
    Map<String, Object> bareMetalServerPatchModelAsPatch = bareMetalServerPatchModel.asPatch();

    // Construct an instance of the UpdateBareMetalServerOptions model
    UpdateBareMetalServerOptions updateBareMetalServerOptionsModel = new UpdateBareMetalServerOptions.Builder()
      .id("testString")
      .bareMetalServerPatch(bareMetalServerPatchModelAsPatch)
      .build();

    // Invoke updateBareMetalServer() with a valid options model and verify the result
    Response<BareMetalServer> response = vpcService.updateBareMetalServer(updateBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    BareMetalServer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateBareMetalServer operation with and without retries enabled
  @Test
  public void testUpdateBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateBareMetalServerWOptions();

    vpcService.disableRetries();
    testUpdateBareMetalServerWOptions();
  }

  // Test the updateBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateBareMetalServer(null).execute();
  }

  // Test the getBareMetalServerInitialization operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerInitializationWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"keys\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"name\": \"my-key\"}], \"user_accounts\": [{\"encrypted_password\": \"VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"id\": \"a6b1a881-2ce8-41a3-80fc-36316a73f803\", \"name\": \"my-key\"}, \"resource_type\": \"host_user_account\", \"username\": \"Administrator\"}]}";
    String getBareMetalServerInitializationPath = "/bare_metal_servers/testString/initialization";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerInitializationOptions model
    GetBareMetalServerInitializationOptions getBareMetalServerInitializationOptionsModel = new GetBareMetalServerInitializationOptions.Builder()
      .id("testString")
      .build();

    // Invoke getBareMetalServerInitialization() with a valid options model and verify the result
    Response<BareMetalServerInitialization> response = vpcService.getBareMetalServerInitialization(getBareMetalServerInitializationOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerInitialization responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerInitializationPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerInitialization operation with and without retries enabled
  @Test
  public void testGetBareMetalServerInitializationWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerInitializationWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerInitializationWOptions();
  }

  // Test the getBareMetalServerInitialization operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerInitializationNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerInitialization(null).execute();
  }

  // Test the restartBareMetalServer operation with a valid options model parameter
  @Test
  public void testRestartBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String restartBareMetalServerPath = "/bare_metal_servers/testString/restart";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RestartBareMetalServerOptions model
    RestartBareMetalServerOptions restartBareMetalServerOptionsModel = new RestartBareMetalServerOptions.Builder()
      .id("testString")
      .build();

    // Invoke restartBareMetalServer() with a valid options model and verify the result
    Response<Void> response = vpcService.restartBareMetalServer(restartBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, restartBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the restartBareMetalServer operation with and without retries enabled
  @Test
  public void testRestartBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRestartBareMetalServerWOptions();

    vpcService.disableRetries();
    testRestartBareMetalServerWOptions();
  }

  // Test the restartBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRestartBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.restartBareMetalServer(null).execute();
  }

  // Test the startBareMetalServer operation with a valid options model parameter
  @Test
  public void testStartBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String startBareMetalServerPath = "/bare_metal_servers/testString/start";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the StartBareMetalServerOptions model
    StartBareMetalServerOptions startBareMetalServerOptionsModel = new StartBareMetalServerOptions.Builder()
      .id("testString")
      .build();

    // Invoke startBareMetalServer() with a valid options model and verify the result
    Response<Void> response = vpcService.startBareMetalServer(startBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, startBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the startBareMetalServer operation with and without retries enabled
  @Test
  public void testStartBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testStartBareMetalServerWOptions();

    vpcService.disableRetries();
    testStartBareMetalServerWOptions();
  }

  // Test the startBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testStartBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.startBareMetalServer(null).execute();
  }

  // Test the stopBareMetalServer operation with a valid options model parameter
  @Test
  public void testStopBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String stopBareMetalServerPath = "/bare_metal_servers/testString/stop";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the StopBareMetalServerOptions model
    StopBareMetalServerOptions stopBareMetalServerOptionsModel = new StopBareMetalServerOptions.Builder()
      .id("testString")
      .type("hard")
      .build();

    // Invoke stopBareMetalServer() with a valid options model and verify the result
    Response<Void> response = vpcService.stopBareMetalServer(stopBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, stopBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the stopBareMetalServer operation with and without retries enabled
  @Test
  public void testStopBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testStopBareMetalServerWOptions();

    vpcService.disableRetries();
    testStopBareMetalServerWOptions();
  }

  // Test the stopBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testStopBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.stopBareMetalServer(null).execute();
  }

  // Test the listVolumeProfiles operation with a valid options model parameter
  @Test
  public void testListVolumeProfilesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"profiles\": [{\"family\": \"tiered\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\", \"name\": \"general-purpose\"}], \"total_count\": 132}";
    String listVolumeProfilesPath = "/volume/profiles";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVolumeProfilesOptions model
    ListVolumeProfilesOptions listVolumeProfilesOptionsModel = new ListVolumeProfilesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listVolumeProfiles() with a valid options model and verify the result
    Response<VolumeProfileCollection> response = vpcService.listVolumeProfiles(listVolumeProfilesOptionsModel).execute();
    assertNotNull(response);
    VolumeProfileCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVolumeProfilesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listVolumeProfiles operation with and without retries enabled
  @Test
  public void testListVolumeProfilesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVolumeProfilesWOptions();

    vpcService.disableRetries();
    testListVolumeProfilesWOptions();
  }

  // Test the listVolumeProfiles operation using the VolumeProfilesPager.getNext() method
  @Test
  public void testListVolumeProfilesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"family\":\"tiered\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"name\":\"general-purpose\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"family\":\"tiered\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"name\":\"general-purpose\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVolumeProfilesOptions listVolumeProfilesOptions = new ListVolumeProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<VolumeProfile> allResults = new ArrayList<>();
    VolumeProfilesPager pager = new VolumeProfilesPager(vpcService, listVolumeProfilesOptions);
    while (pager.hasNext()) {
      List<VolumeProfile> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVolumeProfiles operation using the VolumeProfilesPager.getAll() method
  @Test
  public void testListVolumeProfilesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"family\":\"tiered\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"name\":\"general-purpose\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"family\":\"tiered\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"name\":\"general-purpose\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVolumeProfilesOptions listVolumeProfilesOptions = new ListVolumeProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    VolumeProfilesPager pager = new VolumeProfilesPager(vpcService, listVolumeProfilesOptions);
    List<VolumeProfile> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getVolumeProfile operation with a valid options model parameter
  @Test
  public void testGetVolumeProfileWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"family\": \"tiered\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\", \"name\": \"general-purpose\"}";
    String getVolumeProfilePath = "/volume/profiles/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVolumeProfileOptions model
    GetVolumeProfileOptions getVolumeProfileOptionsModel = new GetVolumeProfileOptions.Builder()
      .name("testString")
      .build();

    // Invoke getVolumeProfile() with a valid options model and verify the result
    Response<VolumeProfile> response = vpcService.getVolumeProfile(getVolumeProfileOptionsModel).execute();
    assertNotNull(response);
    VolumeProfile responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVolumeProfilePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVolumeProfile operation with and without retries enabled
  @Test
  public void testGetVolumeProfileWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVolumeProfileWOptions();

    vpcService.disableRetries();
    testGetVolumeProfileWOptions();
  }

  // Test the getVolumeProfile operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVolumeProfileNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVolumeProfile(null).execute();
  }

  // Test the listVolumes operation with a valid options model parameter
  @Test
  public void testListVolumesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"volumes\": [{\"active\": true, \"bandwidth\": 1000, \"busy\": true, \"capacity\": 1000, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"health_reasons\": [{\"code\": \"initializing_from_snapshot\", \"message\": \"Performance will be degraded while this volume is being initialized from its snapshot\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"iops\": 10000, \"name\": \"my-volume\", \"operating_system\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\", \"name\": \"general-purpose\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"resource_type\": \"snapshot\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_tags\": [\"userTags\"], \"volume_attachments\": [{\"delete_volume_on_instance_delete\": true, \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}, \"name\": \"my-volume-attachment\", \"type\": \"boot\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}]}";
    String listVolumesPath = "/volumes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVolumesOptions model
    ListVolumesOptions listVolumesOptionsModel = new ListVolumesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .name("testString")
      .zoneName("testString")
      .build();

    // Invoke listVolumes() with a valid options model and verify the result
    Response<VolumeCollection> response = vpcService.listVolumes(listVolumesOptionsModel).execute();
    assertNotNull(response);
    VolumeCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVolumesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("name"), "testString");
    assertEquals(query.get("zone.name"), "testString");
  }

  // Test the listVolumes operation with and without retries enabled
  @Test
  public void testListVolumesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVolumesWOptions();

    vpcService.disableRetries();
    testListVolumesWOptions();
  }

  // Test the listVolumes operation using the VolumesPager.getNext() method
  @Test
  public void testListVolumesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"volumes\":[{\"active\":true,\"bandwidth\":1000,\"busy\":true,\"capacity\":1000,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"health_reasons\":[{\"code\":\"initializing_from_snapshot\",\"message\":\"Performance will be degraded while this volume is being initialized from its snapshot\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"iops\":10000,\"name\":\"my-volume\",\"operating_system\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\"},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"name\":\"general-purpose\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"resource_type\":\"snapshot\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"user_tags\":[\"userTags\"],\"volume_attachments\":[{\"delete_volume_on_instance_delete\":true,\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"80b3e36e-41f4-40e9-bd56-beae81792a68\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance\"},\"name\":\"my-volume-attachment\",\"type\":\"boot\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"volumes\":[{\"active\":true,\"bandwidth\":1000,\"busy\":true,\"capacity\":1000,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"health_reasons\":[{\"code\":\"initializing_from_snapshot\",\"message\":\"Performance will be degraded while this volume is being initialized from its snapshot\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"iops\":10000,\"name\":\"my-volume\",\"operating_system\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\"},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"name\":\"general-purpose\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"resource_type\":\"snapshot\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"user_tags\":[\"userTags\"],\"volume_attachments\":[{\"delete_volume_on_instance_delete\":true,\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"80b3e36e-41f4-40e9-bd56-beae81792a68\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance\"},\"name\":\"my-volume-attachment\",\"type\":\"boot\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVolumesOptions listVolumesOptions = new ListVolumesOptions.Builder()
      .limit(Long.valueOf("10"))
      .name("testString")
      .zoneName("testString")
      .build();

    List<Volume> allResults = new ArrayList<>();
    VolumesPager pager = new VolumesPager(vpcService, listVolumesOptions);
    while (pager.hasNext()) {
      List<Volume> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVolumes operation using the VolumesPager.getAll() method
  @Test
  public void testListVolumesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"volumes\":[{\"active\":true,\"bandwidth\":1000,\"busy\":true,\"capacity\":1000,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"health_reasons\":[{\"code\":\"initializing_from_snapshot\",\"message\":\"Performance will be degraded while this volume is being initialized from its snapshot\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"iops\":10000,\"name\":\"my-volume\",\"operating_system\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\"},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"name\":\"general-purpose\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"resource_type\":\"snapshot\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"user_tags\":[\"userTags\"],\"volume_attachments\":[{\"delete_volume_on_instance_delete\":true,\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"80b3e36e-41f4-40e9-bd56-beae81792a68\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance\"},\"name\":\"my-volume-attachment\",\"type\":\"boot\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"volumes\":[{\"active\":true,\"bandwidth\":1000,\"busy\":true,\"capacity\":1000,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"health_reasons\":[{\"code\":\"initializing_from_snapshot\",\"message\":\"Performance will be degraded while this volume is being initialized from its snapshot\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"iops\":10000,\"name\":\"my-volume\",\"operating_system\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\"},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"name\":\"general-purpose\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"resource_type\":\"snapshot\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"user_tags\":[\"userTags\"],\"volume_attachments\":[{\"delete_volume_on_instance_delete\":true,\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"80b3e36e-41f4-40e9-bd56-beae81792a68\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-instance\"},\"name\":\"my-volume-attachment\",\"type\":\"boot\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVolumesOptions listVolumesOptions = new ListVolumesOptions.Builder()
      .limit(Long.valueOf("10"))
      .name("testString")
      .zoneName("testString")
      .build();

    VolumesPager pager = new VolumesPager(vpcService, listVolumesOptions);
    List<Volume> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVolume operation with a valid options model parameter
  @Test
  public void testCreateVolumeWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"bandwidth\": 1000, \"busy\": true, \"capacity\": 1000, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"health_reasons\": [{\"code\": \"initializing_from_snapshot\", \"message\": \"Performance will be degraded while this volume is being initialized from its snapshot\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"iops\": 10000, \"name\": \"my-volume\", \"operating_system\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\", \"name\": \"general-purpose\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"resource_type\": \"snapshot\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_tags\": [\"userTags\"], \"volume_attachments\": [{\"delete_volume_on_instance_delete\": true, \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}, \"name\": \"my-volume-attachment\", \"type\": \"boot\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createVolumePath = "/volumes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VolumeProfileIdentityByName model
    VolumeProfileIdentityByName volumeProfileIdentityModel = new VolumeProfileIdentityByName.Builder()
      .name("5iops-tier")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the EncryptionKeyIdentityByCRN model
    EncryptionKeyIdentityByCRN encryptionKeyIdentityModel = new EncryptionKeyIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
      .build();

    // Construct an instance of the VolumePrototypeVolumeByCapacity model
    VolumePrototypeVolumeByCapacity volumePrototypeModel = new VolumePrototypeVolumeByCapacity.Builder()
      .iops(Long.valueOf("10000"))
      .name("my-volume")
      .profile(volumeProfileIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .userTags(java.util.Arrays.asList("testString"))
      .zone(zoneIdentityModel)
      .capacity(Long.valueOf("100"))
      .encryptionKey(encryptionKeyIdentityModel)
      .build();

    // Construct an instance of the CreateVolumeOptions model
    CreateVolumeOptions createVolumeOptionsModel = new CreateVolumeOptions.Builder()
      .volumePrototype(volumePrototypeModel)
      .build();

    // Invoke createVolume() with a valid options model and verify the result
    Response<Volume> response = vpcService.createVolume(createVolumeOptionsModel).execute();
    assertNotNull(response);
    Volume responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVolumePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVolume operation with and without retries enabled
  @Test
  public void testCreateVolumeWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVolumeWOptions();

    vpcService.disableRetries();
    testCreateVolumeWOptions();
  }

  // Test the createVolume operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVolumeNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVolume(null).execute();
  }

  // Test the deleteVolume operation with a valid options model parameter
  @Test
  public void testDeleteVolumeWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVolumePath = "/volumes/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVolumeOptions model
    DeleteVolumeOptions deleteVolumeOptionsModel = new DeleteVolumeOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteVolume() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVolume(deleteVolumeOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVolumePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVolume operation with and without retries enabled
  @Test
  public void testDeleteVolumeWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVolumeWOptions();

    vpcService.disableRetries();
    testDeleteVolumeWOptions();
  }

  // Test the deleteVolume operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVolumeNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVolume(null).execute();
  }

  // Test the getVolume operation with a valid options model parameter
  @Test
  public void testGetVolumeWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"bandwidth\": 1000, \"busy\": true, \"capacity\": 1000, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"health_reasons\": [{\"code\": \"initializing_from_snapshot\", \"message\": \"Performance will be degraded while this volume is being initialized from its snapshot\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"iops\": 10000, \"name\": \"my-volume\", \"operating_system\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\", \"name\": \"general-purpose\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"resource_type\": \"snapshot\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_tags\": [\"userTags\"], \"volume_attachments\": [{\"delete_volume_on_instance_delete\": true, \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}, \"name\": \"my-volume-attachment\", \"type\": \"boot\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getVolumePath = "/volumes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVolumeOptions model
    GetVolumeOptions getVolumeOptionsModel = new GetVolumeOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVolume() with a valid options model and verify the result
    Response<Volume> response = vpcService.getVolume(getVolumeOptionsModel).execute();
    assertNotNull(response);
    Volume responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVolumePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVolume operation with and without retries enabled
  @Test
  public void testGetVolumeWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVolumeWOptions();

    vpcService.disableRetries();
    testGetVolumeWOptions();
  }

  // Test the getVolume operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVolumeNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVolume(null).execute();
  }

  // Test the updateVolume operation with a valid options model parameter
  @Test
  public void testUpdateVolumeWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"bandwidth\": 1000, \"busy\": true, \"capacity\": 1000, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"health_reasons\": [{\"code\": \"initializing_from_snapshot\", \"message\": \"Performance will be degraded while this volume is being initialized from its snapshot\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"iops\": 10000, \"name\": \"my-volume\", \"operating_system\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\", \"name\": \"general-purpose\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"resource_type\": \"snapshot\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_tags\": [\"userTags\"], \"volume_attachments\": [{\"delete_volume_on_instance_delete\": true, \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"80b3e36e-41f4-40e9-bd56-beae81792a68\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}, \"name\": \"my-volume-attachment\", \"type\": \"boot\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateVolumePath = "/volumes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VolumeProfileIdentityByName model
    VolumeProfileIdentityByName volumeProfileIdentityModel = new VolumeProfileIdentityByName.Builder()
      .name("general-purpose")
      .build();

    // Construct an instance of the VolumePatch model
    VolumePatch volumePatchModel = new VolumePatch.Builder()
      .capacity(Long.valueOf("100"))
      .iops(Long.valueOf("10000"))
      .name("my-volume")
      .profile(volumeProfileIdentityModel)
      .userTags(java.util.Arrays.asList("testString"))
      .build();
    Map<String, Object> volumePatchModelAsPatch = volumePatchModel.asPatch();

    // Construct an instance of the UpdateVolumeOptions model
    UpdateVolumeOptions updateVolumeOptionsModel = new UpdateVolumeOptions.Builder()
      .id("testString")
      .volumePatch(volumePatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateVolume() with a valid options model and verify the result
    Response<Volume> response = vpcService.updateVolume(updateVolumeOptionsModel).execute();
    assertNotNull(response);
    Volume responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVolumePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVolume operation with and without retries enabled
  @Test
  public void testUpdateVolumeWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVolumeWOptions();

    vpcService.disableRetries();
    testUpdateVolumeWOptions();
  }

  // Test the updateVolume operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVolumeNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVolume(null).execute();
  }

  // Test the deleteSnapshots operation with a valid options model parameter
  @Test
  public void testDeleteSnapshotsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSnapshotsPath = "/snapshots";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSnapshotsOptions model
    DeleteSnapshotsOptions deleteSnapshotsOptionsModel = new DeleteSnapshotsOptions.Builder()
      .sourceVolumeId("testString")
      .build();

    // Invoke deleteSnapshots() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSnapshots(deleteSnapshotsOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSnapshotsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("source_volume.id"), "testString");
  }

  // Test the deleteSnapshots operation with and without retries enabled
  @Test
  public void testDeleteSnapshotsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSnapshotsWOptions();

    vpcService.disableRetries();
    testDeleteSnapshotsWOptions();
  }

  // Test the deleteSnapshots operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSnapshotsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSnapshots(null).execute();
  }

  // Test the listSnapshots operation with a valid options model parameter
  @Test
  public void testListSnapshotsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"snapshots\": [{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}, \"bootable\": true, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deletable\": false, \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"minimum_capacity\": 1, \"name\": \"my-snapshot\", \"operating_system\": {\"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot\", \"service_tags\": [\"serviceTags\"], \"size\": 1, \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}, \"user_tags\": [\"userTags\"]}], \"total_count\": 132}";
    String listSnapshotsPath = "/snapshots";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSnapshotsOptions model
    ListSnapshotsOptions listSnapshotsOptionsModel = new ListSnapshotsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .tag("testString")
      .resourceGroupId("testString")
      .name("testString")
      .sourceVolumeId("testString")
      .sourceVolumeCrn("testString")
      .sourceImageId("testString")
      .sourceImageCrn("testString")
      .sort("name")
      .backupPolicyPlanId("testString")
      .build();

    // Invoke listSnapshots() with a valid options model and verify the result
    Response<SnapshotCollection> response = vpcService.listSnapshots(listSnapshotsOptionsModel).execute();
    assertNotNull(response);
    SnapshotCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSnapshotsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("tag"), "testString");
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "testString");
    assertEquals(query.get("source_volume.id"), "testString");
    assertEquals(query.get("source_volume.crn"), "testString");
    assertEquals(query.get("source_image.id"), "testString");
    assertEquals(query.get("source_image.crn"), "testString");
    assertEquals(query.get("sort"), "name");
    assertEquals(query.get("backup_policy_plan.id"), "testString");
  }

  // Test the listSnapshots operation with and without retries enabled
  @Test
  public void testListSnapshotsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSnapshotsWOptions();

    vpcService.disableRetries();
    testListSnapshotsWOptions();
  }

  // Test the listSnapshots operation using the SnapshotsPager.getNext() method
  @Test
  public void testListSnapshotsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"snapshots\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"resource_type\":\"backup_policy_plan\"},\"bootable\":true,\"captured_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deletable\":false,\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"lifecycle_state\":\"stable\",\"minimum_capacity\":1,\"name\":\"my-snapshot\",\"operating_system\":{\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"snapshot\",\"service_tags\":[\"serviceTags\"],\"size\":1,\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\"},\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"},\"user_tags\":[\"userTags\"]}],\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"snapshots\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"resource_type\":\"backup_policy_plan\"},\"bootable\":true,\"captured_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deletable\":false,\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"lifecycle_state\":\"stable\",\"minimum_capacity\":1,\"name\":\"my-snapshot\",\"operating_system\":{\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"snapshot\",\"service_tags\":[\"serviceTags\"],\"size\":1,\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\"},\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"},\"user_tags\":[\"userTags\"]}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSnapshotsOptions listSnapshotsOptions = new ListSnapshotsOptions.Builder()
      .limit(Long.valueOf("10"))
      .tag("testString")
      .resourceGroupId("testString")
      .name("testString")
      .sourceVolumeId("testString")
      .sourceVolumeCrn("testString")
      .sourceImageId("testString")
      .sourceImageCrn("testString")
      .sort("name")
      .backupPolicyPlanId("testString")
      .build();

    List<Snapshot> allResults = new ArrayList<>();
    SnapshotsPager pager = new SnapshotsPager(vpcService, listSnapshotsOptions);
    while (pager.hasNext()) {
      List<Snapshot> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listSnapshots operation using the SnapshotsPager.getAll() method
  @Test
  public void testListSnapshotsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"snapshots\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"resource_type\":\"backup_policy_plan\"},\"bootable\":true,\"captured_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deletable\":false,\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"lifecycle_state\":\"stable\",\"minimum_capacity\":1,\"name\":\"my-snapshot\",\"operating_system\":{\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"snapshot\",\"service_tags\":[\"serviceTags\"],\"size\":1,\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\"},\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"},\"user_tags\":[\"userTags\"]}],\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"snapshots\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"resource_type\":\"backup_policy_plan\"},\"bootable\":true,\"captured_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deletable\":false,\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"lifecycle_state\":\"stable\",\"minimum_capacity\":1,\"name\":\"my-snapshot\",\"operating_system\":{\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\",\"name\":\"ubuntu-16-amd64\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"snapshot\",\"service_tags\":[\"serviceTags\"],\"size\":1,\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\"},\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\"},\"user_tags\":[\"userTags\"]}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSnapshotsOptions listSnapshotsOptions = new ListSnapshotsOptions.Builder()
      .limit(Long.valueOf("10"))
      .tag("testString")
      .resourceGroupId("testString")
      .name("testString")
      .sourceVolumeId("testString")
      .sourceVolumeCrn("testString")
      .sourceImageId("testString")
      .sourceImageCrn("testString")
      .sort("name")
      .backupPolicyPlanId("testString")
      .build();

    SnapshotsPager pager = new SnapshotsPager(vpcService, listSnapshotsOptions);
    List<Snapshot> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createSnapshot operation with a valid options model parameter
  @Test
  public void testCreateSnapshotWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}, \"bootable\": true, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deletable\": false, \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"minimum_capacity\": 1, \"name\": \"my-snapshot\", \"operating_system\": {\"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot\", \"service_tags\": [\"serviceTags\"], \"size\": 1, \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}, \"user_tags\": [\"userTags\"]}";
    String createSnapshotPath = "/snapshots";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the VolumeIdentityById model
    VolumeIdentityById volumeIdentityModel = new VolumeIdentityById.Builder()
      .id("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
      .build();

    // Construct an instance of the SnapshotPrototypeSnapshotBySourceVolume model
    SnapshotPrototypeSnapshotBySourceVolume snapshotPrototypeModel = new SnapshotPrototypeSnapshotBySourceVolume.Builder()
      .name("my-snapshot")
      .resourceGroup(resourceGroupIdentityModel)
      .userTags(java.util.Arrays.asList("testString"))
      .sourceVolume(volumeIdentityModel)
      .build();

    // Construct an instance of the CreateSnapshotOptions model
    CreateSnapshotOptions createSnapshotOptionsModel = new CreateSnapshotOptions.Builder()
      .snapshotPrototype(snapshotPrototypeModel)
      .build();

    // Invoke createSnapshot() with a valid options model and verify the result
    Response<Snapshot> response = vpcService.createSnapshot(createSnapshotOptionsModel).execute();
    assertNotNull(response);
    Snapshot responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSnapshotPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSnapshot operation with and without retries enabled
  @Test
  public void testCreateSnapshotWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSnapshotWOptions();

    vpcService.disableRetries();
    testCreateSnapshotWOptions();
  }

  // Test the createSnapshot operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSnapshotNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSnapshot(null).execute();
  }

  // Test the deleteSnapshot operation with a valid options model parameter
  @Test
  public void testDeleteSnapshotWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSnapshotPath = "/snapshots/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSnapshotOptions model
    DeleteSnapshotOptions deleteSnapshotOptionsModel = new DeleteSnapshotOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteSnapshot() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSnapshot(deleteSnapshotOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSnapshotPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSnapshot operation with and without retries enabled
  @Test
  public void testDeleteSnapshotWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSnapshotWOptions();

    vpcService.disableRetries();
    testDeleteSnapshotWOptions();
  }

  // Test the deleteSnapshot operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSnapshotNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSnapshot(null).execute();
  }

  // Test the getSnapshot operation with a valid options model parameter
  @Test
  public void testGetSnapshotWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}, \"bootable\": true, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deletable\": false, \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"minimum_capacity\": 1, \"name\": \"my-snapshot\", \"operating_system\": {\"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot\", \"service_tags\": [\"serviceTags\"], \"size\": 1, \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}, \"user_tags\": [\"userTags\"]}";
    String getSnapshotPath = "/snapshots/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSnapshotOptions model
    GetSnapshotOptions getSnapshotOptionsModel = new GetSnapshotOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSnapshot() with a valid options model and verify the result
    Response<Snapshot> response = vpcService.getSnapshot(getSnapshotOptionsModel).execute();
    assertNotNull(response);
    Snapshot responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSnapshotPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSnapshot operation with and without retries enabled
  @Test
  public void testGetSnapshotWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSnapshotWOptions();

    vpcService.disableRetries();
    testGetSnapshotWOptions();
  }

  // Test the getSnapshot operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSnapshotNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSnapshot(null).execute();
  }

  // Test the updateSnapshot operation with a valid options model parameter
  @Test
  public void testUpdateSnapshotWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r134-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r134-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"resource_type\": \"backup_policy_plan\"}, \"bootable\": true, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::snapshot:r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deletable\": false, \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r134-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"minimum_capacity\": 1, \"name\": \"my-snapshot\", \"operating_system\": {\"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64\", \"name\": \"ubuntu-16-amd64\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot\", \"service_tags\": [\"serviceTags\"], \"size\": 1, \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\"}, \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\"}, \"user_tags\": [\"userTags\"]}";
    String updateSnapshotPath = "/snapshots/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the SnapshotPatch model
    SnapshotPatch snapshotPatchModel = new SnapshotPatch.Builder()
      .name("my-snapshot")
      .userTags(java.util.Arrays.asList("testString"))
      .build();
    Map<String, Object> snapshotPatchModelAsPatch = snapshotPatchModel.asPatch();

    // Construct an instance of the UpdateSnapshotOptions model
    UpdateSnapshotOptions updateSnapshotOptionsModel = new UpdateSnapshotOptions.Builder()
      .id("testString")
      .snapshotPatch(snapshotPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateSnapshot() with a valid options model and verify the result
    Response<Snapshot> response = vpcService.updateSnapshot(updateSnapshotOptionsModel).execute();
    assertNotNull(response);
    Snapshot responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateSnapshotPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateSnapshot operation with and without retries enabled
  @Test
  public void testUpdateSnapshotWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateSnapshotWOptions();

    vpcService.disableRetries();
    testUpdateSnapshotWOptions();
  }

  // Test the updateSnapshot operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateSnapshotNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateSnapshot(null).execute();
  }

  // Test the listRegions operation with a valid options model parameter
  @Test
  public void testListRegionsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"regions\": [{\"endpoint\": \"endpoint\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\", \"status\": \"available\"}]}";
    String listRegionsPath = "/regions";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListRegionsOptions model
    ListRegionsOptions listRegionsOptionsModel = new ListRegionsOptions();

    // Invoke listRegions() with a valid options model and verify the result
    Response<RegionCollection> response = vpcService.listRegions(listRegionsOptionsModel).execute();
    assertNotNull(response);
    RegionCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listRegionsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listRegions operation with and without retries enabled
  @Test
  public void testListRegionsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListRegionsWOptions();

    vpcService.disableRetries();
    testListRegionsWOptions();
  }

  // Test the getRegion operation with a valid options model parameter
  @Test
  public void testGetRegionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"endpoint\": \"endpoint\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\", \"status\": \"available\"}";
    String getRegionPath = "/regions/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetRegionOptions model
    GetRegionOptions getRegionOptionsModel = new GetRegionOptions.Builder()
      .name("testString")
      .build();

    // Invoke getRegion() with a valid options model and verify the result
    Response<Region> response = vpcService.getRegion(getRegionOptionsModel).execute();
    assertNotNull(response);
    Region responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getRegionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getRegion operation with and without retries enabled
  @Test
  public void testGetRegionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetRegionWOptions();

    vpcService.disableRetries();
    testGetRegionWOptions();
  }

  // Test the getRegion operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetRegionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getRegion(null).execute();
  }

  // Test the listRegionZones operation with a valid options model parameter
  @Test
  public void testListRegionZonesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"zones\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\", \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}, \"status\": \"available\"}]}";
    String listRegionZonesPath = "/regions/testString/zones";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListRegionZonesOptions model
    ListRegionZonesOptions listRegionZonesOptionsModel = new ListRegionZonesOptions.Builder()
      .regionName("testString")
      .build();

    // Invoke listRegionZones() with a valid options model and verify the result
    Response<ZoneCollection> response = vpcService.listRegionZones(listRegionZonesOptionsModel).execute();
    assertNotNull(response);
    ZoneCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listRegionZonesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listRegionZones operation with and without retries enabled
  @Test
  public void testListRegionZonesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListRegionZonesWOptions();

    vpcService.disableRetries();
    testListRegionZonesWOptions();
  }

  // Test the listRegionZones operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListRegionZonesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listRegionZones(null).execute();
  }

  // Test the getRegionZone operation with a valid options model parameter
  @Test
  public void testGetRegionZoneWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\", \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}, \"status\": \"available\"}";
    String getRegionZonePath = "/regions/testString/zones/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetRegionZoneOptions model
    GetRegionZoneOptions getRegionZoneOptionsModel = new GetRegionZoneOptions.Builder()
      .regionName("testString")
      .name("testString")
      .build();

    // Invoke getRegionZone() with a valid options model and verify the result
    Response<Zone> response = vpcService.getRegionZone(getRegionZoneOptionsModel).execute();
    assertNotNull(response);
    Zone responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getRegionZonePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getRegionZone operation with and without retries enabled
  @Test
  public void testGetRegionZoneWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetRegionZoneWOptions();

    vpcService.disableRetries();
    testGetRegionZoneWOptions();
  }

  // Test the getRegionZone operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetRegionZoneNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getRegionZone(null).execute();
  }

  // Test the listPublicGateways operation with a valid options model parameter
  @Test
  public void testListPublicGatewaysWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"public_gateways\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"floating_ip\": {\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"public_gateway\", \"status\": \"available\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"total_count\": 132}";
    String listPublicGatewaysPath = "/public_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListPublicGatewaysOptions model
    ListPublicGatewaysOptions listPublicGatewaysOptionsModel = new ListPublicGatewaysOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    // Invoke listPublicGateways() with a valid options model and verify the result
    Response<PublicGatewayCollection> response = vpcService.listPublicGateways(listPublicGatewaysOptionsModel).execute();
    assertNotNull(response);
    PublicGatewayCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listPublicGatewaysPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
  }

  // Test the listPublicGateways operation with and without retries enabled
  @Test
  public void testListPublicGatewaysWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListPublicGatewaysWOptions();

    vpcService.disableRetries();
    testListPublicGatewaysWOptions();
  }

  // Test the listPublicGateways operation using the PublicGatewaysPager.getNext() method
  @Test
  public void testListPublicGatewaysWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"public_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"floating_ip\":{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"name\":\"my-floating-ip\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"public_gateway\",\"status\":\"available\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"public_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"floating_ip\":{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"name\":\"my-floating-ip\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"public_gateway\",\"status\":\"available\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPublicGatewaysOptions listPublicGatewaysOptions = new ListPublicGatewaysOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    List<PublicGateway> allResults = new ArrayList<>();
    PublicGatewaysPager pager = new PublicGatewaysPager(vpcService, listPublicGatewaysOptions);
    while (pager.hasNext()) {
      List<PublicGateway> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listPublicGateways operation using the PublicGatewaysPager.getAll() method
  @Test
  public void testListPublicGatewaysWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"public_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"floating_ip\":{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"name\":\"my-floating-ip\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"public_gateway\",\"status\":\"available\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"public_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"floating_ip\":{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"name\":\"my-floating-ip\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"public_gateway\",\"status\":\"available\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPublicGatewaysOptions listPublicGatewaysOptions = new ListPublicGatewaysOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    PublicGatewaysPager pager = new PublicGatewaysPager(vpcService, listPublicGatewaysOptions);
    List<PublicGateway> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createPublicGateway operation with a valid options model parameter
  @Test
  public void testCreatePublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"floating_ip\": {\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"public_gateway\", \"status\": \"available\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createPublicGatewayPath = "/public_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityById model
    PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityById publicGatewayFloatingIpPrototypeModel = new PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityById.Builder()
      .id("39300233-9995-4806-89a5-3c1b6eb88689")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreatePublicGatewayOptions model
    CreatePublicGatewayOptions createPublicGatewayOptionsModel = new CreatePublicGatewayOptions.Builder()
      .vpc(vpcIdentityModel)
      .zone(zoneIdentityModel)
      .floatingIp(publicGatewayFloatingIpPrototypeModel)
      .name("my-public-gateway")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createPublicGateway() with a valid options model and verify the result
    Response<PublicGateway> response = vpcService.createPublicGateway(createPublicGatewayOptionsModel).execute();
    assertNotNull(response);
    PublicGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createPublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createPublicGateway operation with and without retries enabled
  @Test
  public void testCreatePublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreatePublicGatewayWOptions();

    vpcService.disableRetries();
    testCreatePublicGatewayWOptions();
  }

  // Test the createPublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreatePublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createPublicGateway(null).execute();
  }

  // Test the deletePublicGateway operation with a valid options model parameter
  @Test
  public void testDeletePublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deletePublicGatewayPath = "/public_gateways/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeletePublicGatewayOptions model
    DeletePublicGatewayOptions deletePublicGatewayOptionsModel = new DeletePublicGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke deletePublicGateway() with a valid options model and verify the result
    Response<Void> response = vpcService.deletePublicGateway(deletePublicGatewayOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deletePublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deletePublicGateway operation with and without retries enabled
  @Test
  public void testDeletePublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeletePublicGatewayWOptions();

    vpcService.disableRetries();
    testDeletePublicGatewayWOptions();
  }

  // Test the deletePublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeletePublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deletePublicGateway(null).execute();
  }

  // Test the getPublicGateway operation with a valid options model parameter
  @Test
  public void testGetPublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"floating_ip\": {\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"public_gateway\", \"status\": \"available\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getPublicGatewayPath = "/public_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetPublicGatewayOptions model
    GetPublicGatewayOptions getPublicGatewayOptionsModel = new GetPublicGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke getPublicGateway() with a valid options model and verify the result
    Response<PublicGateway> response = vpcService.getPublicGateway(getPublicGatewayOptionsModel).execute();
    assertNotNull(response);
    PublicGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getPublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getPublicGateway operation with and without retries enabled
  @Test
  public void testGetPublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetPublicGatewayWOptions();

    vpcService.disableRetries();
    testGetPublicGatewayWOptions();
  }

  // Test the getPublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetPublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getPublicGateway(null).execute();
  }

  // Test the updatePublicGateway operation with a valid options model parameter
  @Test
  public void testUpdatePublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"floating_ip\": {\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"public_gateway\", \"status\": \"available\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updatePublicGatewayPath = "/public_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the PublicGatewayPatch model
    PublicGatewayPatch publicGatewayPatchModel = new PublicGatewayPatch.Builder()
      .name("my-public-gateway")
      .build();
    Map<String, Object> publicGatewayPatchModelAsPatch = publicGatewayPatchModel.asPatch();

    // Construct an instance of the UpdatePublicGatewayOptions model
    UpdatePublicGatewayOptions updatePublicGatewayOptionsModel = new UpdatePublicGatewayOptions.Builder()
      .id("testString")
      .publicGatewayPatch(publicGatewayPatchModelAsPatch)
      .build();

    // Invoke updatePublicGateway() with a valid options model and verify the result
    Response<PublicGateway> response = vpcService.updatePublicGateway(updatePublicGatewayOptionsModel).execute();
    assertNotNull(response);
    PublicGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updatePublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updatePublicGateway operation with and without retries enabled
  @Test
  public void testUpdatePublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdatePublicGatewayWOptions();

    vpcService.disableRetries();
    testUpdatePublicGatewayWOptions();
  }

  // Test the updatePublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdatePublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updatePublicGateway(null).execute();
  }

  // Test the listFloatingIps operation with a valid options model parameter
  @Test
  public void testListFloatingIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20\"}, \"floating_ips\": [{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listFloatingIpsPath = "/floating_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListFloatingIpsOptions model
    ListFloatingIpsOptions listFloatingIpsOptionsModel = new ListFloatingIpsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .build();

    // Invoke listFloatingIps() with a valid options model and verify the result
    Response<FloatingIPCollection> response = vpcService.listFloatingIps(listFloatingIpsOptionsModel).execute();
    assertNotNull(response);
    FloatingIPCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listFloatingIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("sort"), "name");
  }

  // Test the listFloatingIps operation with and without retries enabled
  @Test
  public void testListFloatingIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListFloatingIpsWOptions();

    vpcService.disableRetries();
    testListFloatingIpsWOptions();
  }

  // Test the listFloatingIps operation using the FloatingIpsPager.getNext() method
  @Test
  public void testListFloatingIpsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"name\":\"my-floating-ip\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"available\",\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"name\":\"my-floating-ip\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"available\",\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListFloatingIpsOptions listFloatingIpsOptions = new ListFloatingIpsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .build();

    List<FloatingIP> allResults = new ArrayList<>();
    FloatingIpsPager pager = new FloatingIpsPager(vpcService, listFloatingIpsOptions);
    while (pager.hasNext()) {
      List<FloatingIP> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listFloatingIps operation using the FloatingIpsPager.getAll() method
  @Test
  public void testListFloatingIpsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"name\":\"my-floating-ip\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"available\",\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"name\":\"my-floating-ip\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"available\",\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListFloatingIpsOptions listFloatingIpsOptions = new ListFloatingIpsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .build();

    FloatingIpsPager pager = new FloatingIpsPager(vpcService, listFloatingIpsOptions);
    List<FloatingIP> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createFloatingIp operation with a valid options model parameter
  @Test
  public void testCreateFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createFloatingIpPath = "/floating_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
    FloatingIPPrototypeFloatingIPByZone floatingIpPrototypeModel = new FloatingIPPrototypeFloatingIPByZone.Builder()
      .name("my-floating-ip")
      .resourceGroup(resourceGroupIdentityModel)
      .zone(zoneIdentityModel)
      .build();

    // Construct an instance of the CreateFloatingIpOptions model
    CreateFloatingIpOptions createFloatingIpOptionsModel = new CreateFloatingIpOptions.Builder()
      .floatingIpPrototype(floatingIpPrototypeModel)
      .build();

    // Invoke createFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.createFloatingIp(createFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createFloatingIp operation with and without retries enabled
  @Test
  public void testCreateFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateFloatingIpWOptions();

    vpcService.disableRetries();
    testCreateFloatingIpWOptions();
  }

  // Test the createFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createFloatingIp(null).execute();
  }

  // Test the deleteFloatingIp operation with a valid options model parameter
  @Test
  public void testDeleteFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteFloatingIpPath = "/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteFloatingIpOptions model
    DeleteFloatingIpOptions deleteFloatingIpOptionsModel = new DeleteFloatingIpOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteFloatingIp() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteFloatingIp(deleteFloatingIpOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteFloatingIp operation with and without retries enabled
  @Test
  public void testDeleteFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteFloatingIpWOptions();

    vpcService.disableRetries();
    testDeleteFloatingIpWOptions();
  }

  // Test the deleteFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteFloatingIp(null).execute();
  }

  // Test the getFloatingIp operation with a valid options model parameter
  @Test
  public void testGetFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getFloatingIpPath = "/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetFloatingIpOptions model
    GetFloatingIpOptions getFloatingIpOptionsModel = new GetFloatingIpOptions.Builder()
      .id("testString")
      .build();

    // Invoke getFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.getFloatingIp(getFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getFloatingIp operation with and without retries enabled
  @Test
  public void testGetFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetFloatingIpWOptions();

    vpcService.disableRetries();
    testGetFloatingIpWOptions();
  }

  // Test the getFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getFloatingIp(null).execute();
  }

  // Test the updateFloatingIp operation with a valid options model parameter
  @Test
  public void testUpdateFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateFloatingIpPath = "/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the FloatingIPTargetPatchNetworkInterfaceIdentityById model
    FloatingIPTargetPatchNetworkInterfaceIdentityById floatingIpTargetPatchModel = new FloatingIPTargetPatchNetworkInterfaceIdentityById.Builder()
      .id("10c02d81-0ecb-4dc5-897d-28392913b81e")
      .build();

    // Construct an instance of the FloatingIPPatch model
    FloatingIPPatch floatingIpPatchModel = new FloatingIPPatch.Builder()
      .name("my-floating-ip")
      .target(floatingIpTargetPatchModel)
      .build();
    Map<String, Object> floatingIpPatchModelAsPatch = floatingIpPatchModel.asPatch();

    // Construct an instance of the UpdateFloatingIpOptions model
    UpdateFloatingIpOptions updateFloatingIpOptionsModel = new UpdateFloatingIpOptions.Builder()
      .id("testString")
      .floatingIpPatch(floatingIpPatchModelAsPatch)
      .build();

    // Invoke updateFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.updateFloatingIp(updateFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateFloatingIp operation with and without retries enabled
  @Test
  public void testUpdateFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateFloatingIpWOptions();

    vpcService.disableRetries();
    testUpdateFloatingIpWOptions();
  }

  // Test the updateFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateFloatingIp(null).execute();
  }

  // Test the listNetworkAcls operation with a valid options model parameter
  @Test
  public void testListNetworkAclsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20\"}, \"limit\": 20, \"network_acls\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-rule-1\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-rule-1\", \"source\": \"192.168.3.0/24\", \"destination_port_max\": 22, \"destination_port_min\": 22, \"protocol\": \"udp\", \"source_port_max\": 65535, \"source_port_min\": 49152}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}], \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listNetworkAclsPath = "/network_acls";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListNetworkAclsOptions model
    ListNetworkAclsOptions listNetworkAclsOptionsModel = new ListNetworkAclsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    // Invoke listNetworkAcls() with a valid options model and verify the result
    Response<NetworkACLCollection> response = vpcService.listNetworkAcls(listNetworkAclsOptionsModel).execute();
    assertNotNull(response);
    NetworkACLCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listNetworkAclsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
  }

  // Test the listNetworkAcls operation with and without retries enabled
  @Test
  public void testListNetworkAclsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListNetworkAclsWOptions();

    vpcService.disableRetries();
    testListNetworkAclsWOptions();
  }

  // Test the listNetworkAcls operation using the NetworkAclsPager.getNext() method
  @Test
  public void testListNetworkAclsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"network_acls\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-rule-1\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-rule-1\",\"source\":\"192.168.3.0/24\",\"destination_port_max\":22,\"destination_port_min\":22,\"protocol\":\"udp\",\"source_port_max\":65535,\"source_port_min\":49152}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"network_acls\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-rule-1\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-rule-1\",\"source\":\"192.168.3.0/24\",\"destination_port_max\":22,\"destination_port_min\":22,\"protocol\":\"udp\",\"source_port_max\":65535,\"source_port_min\":49152}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListNetworkAclsOptions listNetworkAclsOptions = new ListNetworkAclsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    List<NetworkACL> allResults = new ArrayList<>();
    NetworkAclsPager pager = new NetworkAclsPager(vpcService, listNetworkAclsOptions);
    while (pager.hasNext()) {
      List<NetworkACL> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listNetworkAcls operation using the NetworkAclsPager.getAll() method
  @Test
  public void testListNetworkAclsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"network_acls\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-rule-1\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-rule-1\",\"source\":\"192.168.3.0/24\",\"destination_port_max\":22,\"destination_port_min\":22,\"protocol\":\"udp\",\"source_port_max\":65535,\"source_port_min\":49152}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"network_acls\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-rule-1\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-rule-1\",\"source\":\"192.168.3.0/24\",\"destination_port_max\":22,\"destination_port_min\":22,\"protocol\":\"udp\",\"source_port_max\":65535,\"source_port_min\":49152}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListNetworkAclsOptions listNetworkAclsOptions = new ListNetworkAclsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    NetworkAclsPager pager = new NetworkAclsPager(vpcService, listNetworkAclsOptions);
    List<NetworkACL> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createNetworkAcl operation with a valid options model parameter
  @Test
  public void testCreateNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-rule-1\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-rule-1\", \"source\": \"192.168.3.0/24\", \"destination_port_max\": 22, \"destination_port_min\": 22, \"protocol\": \"udp\", \"source_port_max\": 65535, \"source_port_min\": 49152}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createNetworkAclPath = "/network_acls";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("f0aae929-7047-46d1-92e1-9102b07a7f6f")
      .build();

    // Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDPPrototype model
    NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDPPrototype networkAclRulePrototypeNetworkAclContextModel = new NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDPPrototype.Builder()
      .action("allow")
      .destination("192.168.3.2/32")
      .direction("inbound")
      .name("my-rule-2")
      .source("192.168.3.2/32")
      .destinationPortMax(Long.valueOf("22"))
      .destinationPortMin(Long.valueOf("22"))
      .protocol("udp")
      .sourcePortMax(Long.valueOf("65535"))
      .sourcePortMin(Long.valueOf("49152"))
      .build();

    // Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
    NetworkACLPrototypeNetworkACLByRules networkAclPrototypeModel = new NetworkACLPrototypeNetworkACLByRules.Builder()
      .name("my-network-acl")
      .resourceGroup(resourceGroupIdentityModel)
      .vpc(vpcIdentityModel)
      .rules(java.util.Arrays.asList(networkAclRulePrototypeNetworkAclContextModel))
      .build();

    // Construct an instance of the CreateNetworkAclOptions model
    CreateNetworkAclOptions createNetworkAclOptionsModel = new CreateNetworkAclOptions.Builder()
      .networkAclPrototype(networkAclPrototypeModel)
      .build();

    // Invoke createNetworkAcl() with a valid options model and verify the result
    Response<NetworkACL> response = vpcService.createNetworkAcl(createNetworkAclOptionsModel).execute();
    assertNotNull(response);
    NetworkACL responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createNetworkAcl operation with and without retries enabled
  @Test
  public void testCreateNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateNetworkAclWOptions();

    vpcService.disableRetries();
    testCreateNetworkAclWOptions();
  }

  // Test the deleteNetworkAcl operation with a valid options model parameter
  @Test
  public void testDeleteNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteNetworkAclPath = "/network_acls/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteNetworkAclOptions model
    DeleteNetworkAclOptions deleteNetworkAclOptionsModel = new DeleteNetworkAclOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteNetworkAcl() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteNetworkAcl(deleteNetworkAclOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteNetworkAcl operation with and without retries enabled
  @Test
  public void testDeleteNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteNetworkAclWOptions();

    vpcService.disableRetries();
    testDeleteNetworkAclWOptions();
  }

  // Test the deleteNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteNetworkAcl(null).execute();
  }

  // Test the getNetworkAcl operation with a valid options model parameter
  @Test
  public void testGetNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-rule-1\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-rule-1\", \"source\": \"192.168.3.0/24\", \"destination_port_max\": 22, \"destination_port_min\": 22, \"protocol\": \"udp\", \"source_port_max\": 65535, \"source_port_min\": 49152}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getNetworkAclPath = "/network_acls/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetNetworkAclOptions model
    GetNetworkAclOptions getNetworkAclOptionsModel = new GetNetworkAclOptions.Builder()
      .id("testString")
      .build();

    // Invoke getNetworkAcl() with a valid options model and verify the result
    Response<NetworkACL> response = vpcService.getNetworkAcl(getNetworkAclOptionsModel).execute();
    assertNotNull(response);
    NetworkACL responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getNetworkAcl operation with and without retries enabled
  @Test
  public void testGetNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetNetworkAclWOptions();

    vpcService.disableRetries();
    testGetNetworkAclWOptions();
  }

  // Test the getNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getNetworkAcl(null).execute();
  }

  // Test the updateNetworkAcl operation with a valid options model parameter
  @Test
  public void testUpdateNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-rule-1\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-rule-1\", \"source\": \"192.168.3.0/24\", \"destination_port_max\": 22, \"destination_port_min\": 22, \"protocol\": \"udp\", \"source_port_max\": 65535, \"source_port_min\": 49152}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateNetworkAclPath = "/network_acls/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkACLPatch model
    NetworkACLPatch networkAclPatchModel = new NetworkACLPatch.Builder()
      .name("my-network-acl")
      .build();
    Map<String, Object> networkAclPatchModelAsPatch = networkAclPatchModel.asPatch();

    // Construct an instance of the UpdateNetworkAclOptions model
    UpdateNetworkAclOptions updateNetworkAclOptionsModel = new UpdateNetworkAclOptions.Builder()
      .id("testString")
      .networkAclPatch(networkAclPatchModelAsPatch)
      .build();

    // Invoke updateNetworkAcl() with a valid options model and verify the result
    Response<NetworkACL> response = vpcService.updateNetworkAcl(updateNetworkAclOptionsModel).execute();
    assertNotNull(response);
    NetworkACL responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateNetworkAcl operation with and without retries enabled
  @Test
  public void testUpdateNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateNetworkAclWOptions();

    vpcService.disableRetries();
    testUpdateNetworkAclWOptions();
  }

  // Test the updateNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateNetworkAcl(null).execute();
  }

  // Test the listNetworkAclRules operation with a valid options model parameter
  @Test
  public void testListNetworkAclRulesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-rule-1\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-rule-1\", \"source\": \"192.168.3.0/24\", \"destination_port_max\": 22, \"destination_port_min\": 22, \"protocol\": \"udp\", \"source_port_max\": 65535, \"source_port_min\": 49152}], \"total_count\": 132}";
    String listNetworkAclRulesPath = "/network_acls/testString/rules";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListNetworkAclRulesOptions model
    ListNetworkAclRulesOptions listNetworkAclRulesOptionsModel = new ListNetworkAclRulesOptions.Builder()
      .networkAclId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .direction("inbound")
      .build();

    // Invoke listNetworkAclRules() with a valid options model and verify the result
    Response<NetworkACLRuleCollection> response = vpcService.listNetworkAclRules(listNetworkAclRulesOptionsModel).execute();
    assertNotNull(response);
    NetworkACLRuleCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listNetworkAclRulesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("direction"), "inbound");
  }

  // Test the listNetworkAclRules operation with and without retries enabled
  @Test
  public void testListNetworkAclRulesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListNetworkAclRulesWOptions();

    vpcService.disableRetries();
    testListNetworkAclRulesWOptions();
  }

  // Test the listNetworkAclRules operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListNetworkAclRulesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listNetworkAclRules(null).execute();
  }

  // Test the listNetworkAclRules operation using the NetworkAclRulesPager.getNext() method
  @Test
  public void testListNetworkAclRulesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-rule-1\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-rule-1\",\"source\":\"192.168.3.0/24\",\"destination_port_max\":22,\"destination_port_min\":22,\"protocol\":\"udp\",\"source_port_max\":65535,\"source_port_min\":49152}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-rule-1\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-rule-1\",\"source\":\"192.168.3.0/24\",\"destination_port_max\":22,\"destination_port_min\":22,\"protocol\":\"udp\",\"source_port_max\":65535,\"source_port_min\":49152}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListNetworkAclRulesOptions listNetworkAclRulesOptions = new ListNetworkAclRulesOptions.Builder()
      .networkAclId("testString")
      .limit(Long.valueOf("10"))
      .direction("inbound")
      .build();

    List<NetworkACLRuleItem> allResults = new ArrayList<>();
    NetworkAclRulesPager pager = new NetworkAclRulesPager(vpcService, listNetworkAclRulesOptions);
    while (pager.hasNext()) {
      List<NetworkACLRuleItem> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listNetworkAclRules operation using the NetworkAclRulesPager.getAll() method
  @Test
  public void testListNetworkAclRulesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-rule-1\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-rule-1\",\"source\":\"192.168.3.0/24\",\"destination_port_max\":22,\"destination_port_min\":22,\"protocol\":\"udp\",\"source_port_max\":65535,\"source_port_min\":49152}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-rule-1\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-rule-1\",\"source\":\"192.168.3.0/24\",\"destination_port_max\":22,\"destination_port_min\":22,\"protocol\":\"udp\",\"source_port_max\":65535,\"source_port_min\":49152}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListNetworkAclRulesOptions listNetworkAclRulesOptions = new ListNetworkAclRulesOptions.Builder()
      .networkAclId("testString")
      .limit(Long.valueOf("10"))
      .direction("inbound")
      .build();

    NetworkAclRulesPager pager = new NetworkAclRulesPager(vpcService, listNetworkAclRulesOptions);
    List<NetworkACLRuleItem> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createNetworkAclRule operation with a valid options model parameter
  @Test
  public void testCreateNetworkAclRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-rule-1\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-rule-1\", \"source\": \"192.168.3.0/24\", \"destination_port_max\": 22, \"destination_port_min\": 22, \"protocol\": \"udp\", \"source_port_max\": 65535, \"source_port_min\": 49152}";
    String createNetworkAclRulePath = "/network_acls/testString/rules";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityById model
    NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityById networkAclRuleBeforePrototypeModel = new NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityById.Builder()
      .id("8daca77a-4980-4d33-8f3e-7038797be8f9")
      .build();

    // Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDPPrototype model
    NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDPPrototype networkAclRulePrototypeModel = new NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDPPrototype.Builder()
      .action("allow")
      .before(networkAclRuleBeforePrototypeModel)
      .destination("192.168.3.2/32")
      .direction("inbound")
      .name("my-rule-2")
      .source("192.168.3.2/32")
      .destinationPortMax(Long.valueOf("22"))
      .destinationPortMin(Long.valueOf("22"))
      .protocol("udp")
      .sourcePortMax(Long.valueOf("65535"))
      .sourcePortMin(Long.valueOf("49152"))
      .build();

    // Construct an instance of the CreateNetworkAclRuleOptions model
    CreateNetworkAclRuleOptions createNetworkAclRuleOptionsModel = new CreateNetworkAclRuleOptions.Builder()
      .networkAclId("testString")
      .networkAclRulePrototype(networkAclRulePrototypeModel)
      .build();

    // Invoke createNetworkAclRule() with a valid options model and verify the result
    Response<NetworkACLRule> response = vpcService.createNetworkAclRule(createNetworkAclRuleOptionsModel).execute();
    assertNotNull(response);
    NetworkACLRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createNetworkAclRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createNetworkAclRule operation with and without retries enabled
  @Test
  public void testCreateNetworkAclRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateNetworkAclRuleWOptions();

    vpcService.disableRetries();
    testCreateNetworkAclRuleWOptions();
  }

  // Test the createNetworkAclRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateNetworkAclRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createNetworkAclRule(null).execute();
  }

  // Test the deleteNetworkAclRule operation with a valid options model parameter
  @Test
  public void testDeleteNetworkAclRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteNetworkAclRulePath = "/network_acls/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteNetworkAclRuleOptions model
    DeleteNetworkAclRuleOptions deleteNetworkAclRuleOptionsModel = new DeleteNetworkAclRuleOptions.Builder()
      .networkAclId("testString")
      .id("testString")
      .build();

    // Invoke deleteNetworkAclRule() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteNetworkAclRule(deleteNetworkAclRuleOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteNetworkAclRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteNetworkAclRule operation with and without retries enabled
  @Test
  public void testDeleteNetworkAclRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteNetworkAclRuleWOptions();

    vpcService.disableRetries();
    testDeleteNetworkAclRuleWOptions();
  }

  // Test the deleteNetworkAclRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteNetworkAclRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteNetworkAclRule(null).execute();
  }

  // Test the getNetworkAclRule operation with a valid options model parameter
  @Test
  public void testGetNetworkAclRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-rule-1\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-rule-1\", \"source\": \"192.168.3.0/24\", \"destination_port_max\": 22, \"destination_port_min\": 22, \"protocol\": \"udp\", \"source_port_max\": 65535, \"source_port_min\": 49152}";
    String getNetworkAclRulePath = "/network_acls/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetNetworkAclRuleOptions model
    GetNetworkAclRuleOptions getNetworkAclRuleOptionsModel = new GetNetworkAclRuleOptions.Builder()
      .networkAclId("testString")
      .id("testString")
      .build();

    // Invoke getNetworkAclRule() with a valid options model and verify the result
    Response<NetworkACLRule> response = vpcService.getNetworkAclRule(getNetworkAclRuleOptionsModel).execute();
    assertNotNull(response);
    NetworkACLRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getNetworkAclRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getNetworkAclRule operation with and without retries enabled
  @Test
  public void testGetNetworkAclRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetNetworkAclRuleWOptions();

    vpcService.disableRetries();
    testGetNetworkAclRuleWOptions();
  }

  // Test the getNetworkAclRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetNetworkAclRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getNetworkAclRule(null).execute();
  }

  // Test the updateNetworkAclRule operation with a valid options model parameter
  @Test
  public void testUpdateNetworkAclRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-rule-1\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-rule-1\", \"source\": \"192.168.3.0/24\", \"destination_port_max\": 22, \"destination_port_min\": 22, \"protocol\": \"udp\", \"source_port_max\": 65535, \"source_port_min\": 49152}";
    String updateNetworkAclRulePath = "/network_acls/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkACLRuleBeforePatchNetworkACLRuleIdentityById model
    NetworkACLRuleBeforePatchNetworkACLRuleIdentityById networkAclRuleBeforePatchModel = new NetworkACLRuleBeforePatchNetworkACLRuleIdentityById.Builder()
      .id("8daca77a-4980-4d33-8f3e-7038797be8f9")
      .build();

    // Construct an instance of the NetworkACLRulePatch model
    NetworkACLRulePatch networkAclRulePatchModel = new NetworkACLRulePatch.Builder()
      .action("allow")
      .before(networkAclRuleBeforePatchModel)
      .code(Long.valueOf("0"))
      .destination("192.168.3.2/32")
      .destinationPortMax(Long.valueOf("22"))
      .destinationPortMin(Long.valueOf("22"))
      .direction("inbound")
      .name("my-rule-1")
      .protocol("tcp")
      .source("192.168.3.2/32")
      .sourcePortMax(Long.valueOf("65535"))
      .sourcePortMin(Long.valueOf("49152"))
      .type(Long.valueOf("8"))
      .build();
    Map<String, Object> networkAclRulePatchModelAsPatch = networkAclRulePatchModel.asPatch();

    // Construct an instance of the UpdateNetworkAclRuleOptions model
    UpdateNetworkAclRuleOptions updateNetworkAclRuleOptionsModel = new UpdateNetworkAclRuleOptions.Builder()
      .networkAclId("testString")
      .id("testString")
      .networkAclRulePatch(networkAclRulePatchModelAsPatch)
      .build();

    // Invoke updateNetworkAclRule() with a valid options model and verify the result
    Response<NetworkACLRule> response = vpcService.updateNetworkAclRule(updateNetworkAclRuleOptionsModel).execute();
    assertNotNull(response);
    NetworkACLRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateNetworkAclRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateNetworkAclRule operation with and without retries enabled
  @Test
  public void testUpdateNetworkAclRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateNetworkAclRuleWOptions();

    vpcService.disableRetries();
    testUpdateNetworkAclRuleWOptions();
  }

  // Test the updateNetworkAclRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateNetworkAclRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateNetworkAclRule(null).execute();
  }

  // Test the listSecurityGroups operation with a valid options model parameter
  @Test
  public void testListSecurityGroupsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"security_groups\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}], \"targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"resource_type\": \"network_interface\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}], \"total_count\": 132}";
    String listSecurityGroupsPath = "/security_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSecurityGroupsOptions model
    ListSecurityGroupsOptions listSecurityGroupsOptionsModel = new ListSecurityGroupsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .vpcId("testString")
      .vpcCrn("testString")
      .vpcName("testString")
      .build();

    // Invoke listSecurityGroups() with a valid options model and verify the result
    Response<SecurityGroupCollection> response = vpcService.listSecurityGroups(listSecurityGroupsOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSecurityGroupsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("vpc.id"), "testString");
    assertEquals(query.get("vpc.crn"), "testString");
    assertEquals(query.get("vpc.name"), "testString");
  }

  // Test the listSecurityGroups operation with and without retries enabled
  @Test
  public void testListSecurityGroupsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSecurityGroupsWOptions();

    vpcService.disableRetries();
    testListSecurityGroupsWOptions();
  }

  // Test the listSecurityGroups operation using the SecurityGroupsPager.getNext() method
  @Test
  public void testListSecurityGroupsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"security_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"id\":\"6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"ip_version\":\"ipv4\",\"remote\":{\"address\":\"192.168.3.4\"},\"protocol\":\"all\"}],\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"resource_type\":\"network_interface\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"security_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"id\":\"6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"ip_version\":\"ipv4\",\"remote\":{\"address\":\"192.168.3.4\"},\"protocol\":\"all\"}],\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"resource_type\":\"network_interface\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSecurityGroupsOptions listSecurityGroupsOptions = new ListSecurityGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .vpcId("testString")
      .vpcCrn("testString")
      .vpcName("testString")
      .build();

    List<SecurityGroup> allResults = new ArrayList<>();
    SecurityGroupsPager pager = new SecurityGroupsPager(vpcService, listSecurityGroupsOptions);
    while (pager.hasNext()) {
      List<SecurityGroup> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listSecurityGroups operation using the SecurityGroupsPager.getAll() method
  @Test
  public void testListSecurityGroupsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"security_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"id\":\"6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"ip_version\":\"ipv4\",\"remote\":{\"address\":\"192.168.3.4\"},\"protocol\":\"all\"}],\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"resource_type\":\"network_interface\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"security_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"id\":\"6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"ip_version\":\"ipv4\",\"remote\":{\"address\":\"192.168.3.4\"},\"protocol\":\"all\"}],\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"resource_type\":\"network_interface\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSecurityGroupsOptions listSecurityGroupsOptions = new ListSecurityGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .vpcId("testString")
      .vpcCrn("testString")
      .vpcName("testString")
      .build();

    SecurityGroupsPager pager = new SecurityGroupsPager(vpcService, listSecurityGroupsOptions);
    List<SecurityGroup> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createSecurityGroup operation with a valid options model parameter
  @Test
  public void testCreateSecurityGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}], \"targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"resource_type\": \"network_interface\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createSecurityGroupPath = "/security_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
    SecurityGroupRuleRemotePrototypeIP securityGroupRuleRemotePrototypeModel = new SecurityGroupRuleRemotePrototypeIP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll model
    SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll securityGroupRulePrototypeModel = new SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll.Builder()
      .direction("inbound")
      .ipVersion("ipv4")
      .protocol("all")
      .remote(securityGroupRuleRemotePrototypeModel)
      .build();

    // Construct an instance of the CreateSecurityGroupOptions model
    CreateSecurityGroupOptions createSecurityGroupOptionsModel = new CreateSecurityGroupOptions.Builder()
      .vpc(vpcIdentityModel)
      .name("my-security-group")
      .resourceGroup(resourceGroupIdentityModel)
      .rules(java.util.Arrays.asList(securityGroupRulePrototypeModel))
      .build();

    // Invoke createSecurityGroup() with a valid options model and verify the result
    Response<SecurityGroup> response = vpcService.createSecurityGroup(createSecurityGroupOptionsModel).execute();
    assertNotNull(response);
    SecurityGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSecurityGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSecurityGroup operation with and without retries enabled
  @Test
  public void testCreateSecurityGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSecurityGroupWOptions();

    vpcService.disableRetries();
    testCreateSecurityGroupWOptions();
  }

  // Test the createSecurityGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSecurityGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSecurityGroup(null).execute();
  }

  // Test the deleteSecurityGroup operation with a valid options model parameter
  @Test
  public void testDeleteSecurityGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSecurityGroupPath = "/security_groups/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSecurityGroupOptions model
    DeleteSecurityGroupOptions deleteSecurityGroupOptionsModel = new DeleteSecurityGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteSecurityGroup() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSecurityGroup(deleteSecurityGroupOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSecurityGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSecurityGroup operation with and without retries enabled
  @Test
  public void testDeleteSecurityGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSecurityGroupWOptions();

    vpcService.disableRetries();
    testDeleteSecurityGroupWOptions();
  }

  // Test the deleteSecurityGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSecurityGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSecurityGroup(null).execute();
  }

  // Test the getSecurityGroup operation with a valid options model parameter
  @Test
  public void testGetSecurityGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}], \"targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"resource_type\": \"network_interface\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getSecurityGroupPath = "/security_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSecurityGroupOptions model
    GetSecurityGroupOptions getSecurityGroupOptionsModel = new GetSecurityGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSecurityGroup() with a valid options model and verify the result
    Response<SecurityGroup> response = vpcService.getSecurityGroup(getSecurityGroupOptionsModel).execute();
    assertNotNull(response);
    SecurityGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSecurityGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSecurityGroup operation with and without retries enabled
  @Test
  public void testGetSecurityGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSecurityGroupWOptions();

    vpcService.disableRetries();
    testGetSecurityGroupWOptions();
  }

  // Test the getSecurityGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSecurityGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSecurityGroup(null).execute();
  }

  // Test the updateSecurityGroup operation with a valid options model parameter
  @Test
  public void testUpdateSecurityGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}], \"targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"resource_type\": \"network_interface\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateSecurityGroupPath = "/security_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the SecurityGroupPatch model
    SecurityGroupPatch securityGroupPatchModel = new SecurityGroupPatch.Builder()
      .name("my-security-group")
      .build();
    Map<String, Object> securityGroupPatchModelAsPatch = securityGroupPatchModel.asPatch();

    // Construct an instance of the UpdateSecurityGroupOptions model
    UpdateSecurityGroupOptions updateSecurityGroupOptionsModel = new UpdateSecurityGroupOptions.Builder()
      .id("testString")
      .securityGroupPatch(securityGroupPatchModelAsPatch)
      .build();

    // Invoke updateSecurityGroup() with a valid options model and verify the result
    Response<SecurityGroup> response = vpcService.updateSecurityGroup(updateSecurityGroupOptionsModel).execute();
    assertNotNull(response);
    SecurityGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateSecurityGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateSecurityGroup operation with and without retries enabled
  @Test
  public void testUpdateSecurityGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateSecurityGroupWOptions();

    vpcService.disableRetries();
    testUpdateSecurityGroupWOptions();
  }

  // Test the updateSecurityGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateSecurityGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateSecurityGroup(null).execute();
  }

  // Test the listSecurityGroupRules operation with a valid options model parameter
  @Test
  public void testListSecurityGroupRulesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"rules\": [{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}]}";
    String listSecurityGroupRulesPath = "/security_groups/testString/rules";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSecurityGroupRulesOptions model
    ListSecurityGroupRulesOptions listSecurityGroupRulesOptionsModel = new ListSecurityGroupRulesOptions.Builder()
      .securityGroupId("testString")
      .build();

    // Invoke listSecurityGroupRules() with a valid options model and verify the result
    Response<SecurityGroupRuleCollection> response = vpcService.listSecurityGroupRules(listSecurityGroupRulesOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupRuleCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSecurityGroupRulesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listSecurityGroupRules operation with and without retries enabled
  @Test
  public void testListSecurityGroupRulesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSecurityGroupRulesWOptions();

    vpcService.disableRetries();
    testListSecurityGroupRulesWOptions();
  }

  // Test the listSecurityGroupRules operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListSecurityGroupRulesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listSecurityGroupRules(null).execute();
  }

  // Test the createSecurityGroupRule operation with a valid options model parameter
  @Test
  public void testCreateSecurityGroupRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}";
    String createSecurityGroupRulePath = "/security_groups/testString/rules";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
    SecurityGroupRuleRemotePrototypeIP securityGroupRuleRemotePrototypeModel = new SecurityGroupRuleRemotePrototypeIP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll model
    SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll securityGroupRulePrototypeModel = new SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll.Builder()
      .direction("inbound")
      .ipVersion("ipv4")
      .protocol("all")
      .remote(securityGroupRuleRemotePrototypeModel)
      .build();

    // Construct an instance of the CreateSecurityGroupRuleOptions model
    CreateSecurityGroupRuleOptions createSecurityGroupRuleOptionsModel = new CreateSecurityGroupRuleOptions.Builder()
      .securityGroupId("testString")
      .securityGroupRulePrototype(securityGroupRulePrototypeModel)
      .build();

    // Invoke createSecurityGroupRule() with a valid options model and verify the result
    Response<SecurityGroupRule> response = vpcService.createSecurityGroupRule(createSecurityGroupRuleOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSecurityGroupRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSecurityGroupRule operation with and without retries enabled
  @Test
  public void testCreateSecurityGroupRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSecurityGroupRuleWOptions();

    vpcService.disableRetries();
    testCreateSecurityGroupRuleWOptions();
  }

  // Test the createSecurityGroupRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSecurityGroupRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSecurityGroupRule(null).execute();
  }

  // Test the deleteSecurityGroupRule operation with a valid options model parameter
  @Test
  public void testDeleteSecurityGroupRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSecurityGroupRulePath = "/security_groups/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSecurityGroupRuleOptions model
    DeleteSecurityGroupRuleOptions deleteSecurityGroupRuleOptionsModel = new DeleteSecurityGroupRuleOptions.Builder()
      .securityGroupId("testString")
      .id("testString")
      .build();

    // Invoke deleteSecurityGroupRule() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSecurityGroupRule(deleteSecurityGroupRuleOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSecurityGroupRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSecurityGroupRule operation with and without retries enabled
  @Test
  public void testDeleteSecurityGroupRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSecurityGroupRuleWOptions();

    vpcService.disableRetries();
    testDeleteSecurityGroupRuleWOptions();
  }

  // Test the deleteSecurityGroupRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSecurityGroupRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSecurityGroupRule(null).execute();
  }

  // Test the getSecurityGroupRule operation with a valid options model parameter
  @Test
  public void testGetSecurityGroupRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}";
    String getSecurityGroupRulePath = "/security_groups/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSecurityGroupRuleOptions model
    GetSecurityGroupRuleOptions getSecurityGroupRuleOptionsModel = new GetSecurityGroupRuleOptions.Builder()
      .securityGroupId("testString")
      .id("testString")
      .build();

    // Invoke getSecurityGroupRule() with a valid options model and verify the result
    Response<SecurityGroupRule> response = vpcService.getSecurityGroupRule(getSecurityGroupRuleOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSecurityGroupRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSecurityGroupRule operation with and without retries enabled
  @Test
  public void testGetSecurityGroupRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSecurityGroupRuleWOptions();

    vpcService.disableRetries();
    testGetSecurityGroupRuleWOptions();
  }

  // Test the getSecurityGroupRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSecurityGroupRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSecurityGroupRule(null).execute();
  }

  // Test the updateSecurityGroupRule operation with a valid options model parameter
  @Test
  public void testUpdateSecurityGroupRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}";
    String updateSecurityGroupRulePath = "/security_groups/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the SecurityGroupRuleRemotePatchIP model
    SecurityGroupRuleRemotePatchIP securityGroupRuleRemotePatchModel = new SecurityGroupRuleRemotePatchIP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the SecurityGroupRulePatch model
    SecurityGroupRulePatch securityGroupRulePatchModel = new SecurityGroupRulePatch.Builder()
      .code(Long.valueOf("0"))
      .direction("inbound")
      .ipVersion("ipv4")
      .portMax(Long.valueOf("22"))
      .portMin(Long.valueOf("22"))
      .remote(securityGroupRuleRemotePatchModel)
      .type(Long.valueOf("8"))
      .build();
    Map<String, Object> securityGroupRulePatchModelAsPatch = securityGroupRulePatchModel.asPatch();

    // Construct an instance of the UpdateSecurityGroupRuleOptions model
    UpdateSecurityGroupRuleOptions updateSecurityGroupRuleOptionsModel = new UpdateSecurityGroupRuleOptions.Builder()
      .securityGroupId("testString")
      .id("testString")
      .securityGroupRulePatch(securityGroupRulePatchModelAsPatch)
      .build();

    // Invoke updateSecurityGroupRule() with a valid options model and verify the result
    Response<SecurityGroupRule> response = vpcService.updateSecurityGroupRule(updateSecurityGroupRuleOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateSecurityGroupRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateSecurityGroupRule operation with and without retries enabled
  @Test
  public void testUpdateSecurityGroupRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateSecurityGroupRuleWOptions();

    vpcService.disableRetries();
    testUpdateSecurityGroupRuleWOptions();
  }

  // Test the updateSecurityGroupRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateSecurityGroupRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateSecurityGroupRule(null).execute();
  }

  // Test the listSecurityGroupTargets operation with a valid options model parameter
  @Test
  public void testListSecurityGroupTargetsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/targets?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/targets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"resource_type\": \"network_interface\"}], \"total_count\": 132}";
    String listSecurityGroupTargetsPath = "/security_groups/testString/targets";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSecurityGroupTargetsOptions model
    ListSecurityGroupTargetsOptions listSecurityGroupTargetsOptionsModel = new ListSecurityGroupTargetsOptions.Builder()
      .securityGroupId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listSecurityGroupTargets() with a valid options model and verify the result
    Response<SecurityGroupTargetCollection> response = vpcService.listSecurityGroupTargets(listSecurityGroupTargetsOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupTargetCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSecurityGroupTargetsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listSecurityGroupTargets operation with and without retries enabled
  @Test
  public void testListSecurityGroupTargetsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSecurityGroupTargetsWOptions();

    vpcService.disableRetries();
    testListSecurityGroupTargetsWOptions();
  }

  // Test the listSecurityGroupTargets operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListSecurityGroupTargetsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listSecurityGroupTargets(null).execute();
  }

  // Test the listSecurityGroupTargets operation using the SecurityGroupTargetsPager.getNext() method
  @Test
  public void testListSecurityGroupTargetsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"resource_type\":\"network_interface\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"resource_type\":\"network_interface\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSecurityGroupTargetsOptions listSecurityGroupTargetsOptions = new ListSecurityGroupTargetsOptions.Builder()
      .securityGroupId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<SecurityGroupTargetReference> allResults = new ArrayList<>();
    SecurityGroupTargetsPager pager = new SecurityGroupTargetsPager(vpcService, listSecurityGroupTargetsOptions);
    while (pager.hasNext()) {
      List<SecurityGroupTargetReference> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listSecurityGroupTargets operation using the SecurityGroupTargetsPager.getAll() method
  @Test
  public void testListSecurityGroupTargetsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"resource_type\":\"network_interface\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"resource_type\":\"network_interface\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSecurityGroupTargetsOptions listSecurityGroupTargetsOptions = new ListSecurityGroupTargetsOptions.Builder()
      .securityGroupId("testString")
      .limit(Long.valueOf("10"))
      .build();

    SecurityGroupTargetsPager pager = new SecurityGroupTargetsPager(vpcService, listSecurityGroupTargetsOptions);
    List<SecurityGroupTargetReference> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the deleteSecurityGroupTargetBinding operation with a valid options model parameter
  @Test
  public void testDeleteSecurityGroupTargetBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSecurityGroupTargetBindingPath = "/security_groups/testString/targets/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSecurityGroupTargetBindingOptions model
    DeleteSecurityGroupTargetBindingOptions deleteSecurityGroupTargetBindingOptionsModel = new DeleteSecurityGroupTargetBindingOptions.Builder()
      .securityGroupId("testString")
      .id("testString")
      .build();

    // Invoke deleteSecurityGroupTargetBinding() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSecurityGroupTargetBinding(deleteSecurityGroupTargetBindingOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSecurityGroupTargetBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSecurityGroupTargetBinding operation with and without retries enabled
  @Test
  public void testDeleteSecurityGroupTargetBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSecurityGroupTargetBindingWOptions();

    vpcService.disableRetries();
    testDeleteSecurityGroupTargetBindingWOptions();
  }

  // Test the deleteSecurityGroupTargetBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSecurityGroupTargetBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSecurityGroupTargetBinding(null).execute();
  }

  // Test the getSecurityGroupTarget operation with a valid options model parameter
  @Test
  public void testGetSecurityGroupTargetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"resource_type\": \"network_interface\"}";
    String getSecurityGroupTargetPath = "/security_groups/testString/targets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSecurityGroupTargetOptions model
    GetSecurityGroupTargetOptions getSecurityGroupTargetOptionsModel = new GetSecurityGroupTargetOptions.Builder()
      .securityGroupId("testString")
      .id("testString")
      .build();

    // Invoke getSecurityGroupTarget() with a valid options model and verify the result
    Response<SecurityGroupTargetReference> response = vpcService.getSecurityGroupTarget(getSecurityGroupTargetOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupTargetReference responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSecurityGroupTargetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSecurityGroupTarget operation with and without retries enabled
  @Test
  public void testGetSecurityGroupTargetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSecurityGroupTargetWOptions();

    vpcService.disableRetries();
    testGetSecurityGroupTargetWOptions();
  }

  // Test the getSecurityGroupTarget operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSecurityGroupTargetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSecurityGroupTarget(null).execute();
  }

  // Test the createSecurityGroupTargetBinding operation with a valid options model parameter
  @Test
  public void testCreateSecurityGroupTargetBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"resource_type\": \"network_interface\"}";
    String createSecurityGroupTargetBindingPath = "/security_groups/testString/targets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateSecurityGroupTargetBindingOptions model
    CreateSecurityGroupTargetBindingOptions createSecurityGroupTargetBindingOptionsModel = new CreateSecurityGroupTargetBindingOptions.Builder()
      .securityGroupId("testString")
      .id("testString")
      .build();

    // Invoke createSecurityGroupTargetBinding() with a valid options model and verify the result
    Response<SecurityGroupTargetReference> response = vpcService.createSecurityGroupTargetBinding(createSecurityGroupTargetBindingOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupTargetReference responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSecurityGroupTargetBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSecurityGroupTargetBinding operation with and without retries enabled
  @Test
  public void testCreateSecurityGroupTargetBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSecurityGroupTargetBindingWOptions();

    vpcService.disableRetries();
    testCreateSecurityGroupTargetBindingWOptions();
  }

  // Test the createSecurityGroupTargetBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSecurityGroupTargetBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSecurityGroupTargetBinding(null).execute();
  }

  // Test the listIkePolicies operation with a valid options model parameter
  @Test
  public void testListIkePoliciesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20\"}, \"ike_policies\": [{\"authentication_algorithm\": \"md5\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"name\": \"my-vpn-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dh_group\": 14, \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"ike_version\": 1, \"key_lifetime\": 28800, \"name\": \"my-ike-policy\", \"negotiation_mode\": \"main\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ike_policy\"}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20\"}, \"total_count\": 132}";
    String listIkePoliciesPath = "/ike_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListIkePoliciesOptions model
    ListIkePoliciesOptions listIkePoliciesOptionsModel = new ListIkePoliciesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listIkePolicies() with a valid options model and verify the result
    Response<IKEPolicyCollection> response = vpcService.listIkePolicies(listIkePoliciesOptionsModel).execute();
    assertNotNull(response);
    IKEPolicyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listIkePoliciesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listIkePolicies operation with and without retries enabled
  @Test
  public void testListIkePoliciesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListIkePoliciesWOptions();

    vpcService.disableRetries();
    testListIkePoliciesWOptions();
  }

  // Test the listIkePolicies operation using the IkePoliciesPager.getNext() method
  @Test
  public void testListIkePoliciesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"ike_policies\":[{\"authentication_algorithm\":\"md5\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\",\"id\":\"a10a5771-dc23-442c-8460-c3601d8542f7\",\"name\":\"my-vpn-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dh_group\":14,\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"ike_version\":1,\"key_lifetime\":28800,\"name\":\"my-ike-policy\",\"negotiation_mode\":\"main\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ike_policy\"}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"ike_policies\":[{\"authentication_algorithm\":\"md5\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\",\"id\":\"a10a5771-dc23-442c-8460-c3601d8542f7\",\"name\":\"my-vpn-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dh_group\":14,\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"ike_version\":1,\"key_lifetime\":28800,\"name\":\"my-ike-policy\",\"negotiation_mode\":\"main\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ike_policy\"}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListIkePoliciesOptions listIkePoliciesOptions = new ListIkePoliciesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<IKEPolicy> allResults = new ArrayList<>();
    IkePoliciesPager pager = new IkePoliciesPager(vpcService, listIkePoliciesOptions);
    while (pager.hasNext()) {
      List<IKEPolicy> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listIkePolicies operation using the IkePoliciesPager.getAll() method
  @Test
  public void testListIkePoliciesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"ike_policies\":[{\"authentication_algorithm\":\"md5\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\",\"id\":\"a10a5771-dc23-442c-8460-c3601d8542f7\",\"name\":\"my-vpn-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dh_group\":14,\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"ike_version\":1,\"key_lifetime\":28800,\"name\":\"my-ike-policy\",\"negotiation_mode\":\"main\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ike_policy\"}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"ike_policies\":[{\"authentication_algorithm\":\"md5\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\",\"id\":\"a10a5771-dc23-442c-8460-c3601d8542f7\",\"name\":\"my-vpn-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dh_group\":14,\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"ike_version\":1,\"key_lifetime\":28800,\"name\":\"my-ike-policy\",\"negotiation_mode\":\"main\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ike_policy\"}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListIkePoliciesOptions listIkePoliciesOptions = new ListIkePoliciesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    IkePoliciesPager pager = new IkePoliciesPager(vpcService, listIkePoliciesOptions);
    List<IKEPolicy> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createIkePolicy operation with a valid options model parameter
  @Test
  public void testCreateIkePolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"authentication_algorithm\": \"md5\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"name\": \"my-vpn-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dh_group\": 14, \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"ike_version\": 1, \"key_lifetime\": 28800, \"name\": \"my-ike-policy\", \"negotiation_mode\": \"main\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ike_policy\"}";
    String createIkePolicyPath = "/ike_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateIkePolicyOptions model
    CreateIkePolicyOptions createIkePolicyOptionsModel = new CreateIkePolicyOptions.Builder()
      .authenticationAlgorithm("md5")
      .dhGroup(Long.valueOf("14"))
      .encryptionAlgorithm("aes128")
      .ikeVersion(Long.valueOf("1"))
      .keyLifetime(Long.valueOf("28800"))
      .name("my-ike-policy")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createIkePolicy() with a valid options model and verify the result
    Response<IKEPolicy> response = vpcService.createIkePolicy(createIkePolicyOptionsModel).execute();
    assertNotNull(response);
    IKEPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createIkePolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createIkePolicy operation with and without retries enabled
  @Test
  public void testCreateIkePolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateIkePolicyWOptions();

    vpcService.disableRetries();
    testCreateIkePolicyWOptions();
  }

  // Test the createIkePolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateIkePolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createIkePolicy(null).execute();
  }

  // Test the deleteIkePolicy operation with a valid options model parameter
  @Test
  public void testDeleteIkePolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteIkePolicyPath = "/ike_policies/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteIkePolicyOptions model
    DeleteIkePolicyOptions deleteIkePolicyOptionsModel = new DeleteIkePolicyOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteIkePolicy() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteIkePolicy(deleteIkePolicyOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteIkePolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteIkePolicy operation with and without retries enabled
  @Test
  public void testDeleteIkePolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteIkePolicyWOptions();

    vpcService.disableRetries();
    testDeleteIkePolicyWOptions();
  }

  // Test the deleteIkePolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteIkePolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteIkePolicy(null).execute();
  }

  // Test the getIkePolicy operation with a valid options model parameter
  @Test
  public void testGetIkePolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"authentication_algorithm\": \"md5\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"name\": \"my-vpn-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dh_group\": 14, \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"ike_version\": 1, \"key_lifetime\": 28800, \"name\": \"my-ike-policy\", \"negotiation_mode\": \"main\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ike_policy\"}";
    String getIkePolicyPath = "/ike_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetIkePolicyOptions model
    GetIkePolicyOptions getIkePolicyOptionsModel = new GetIkePolicyOptions.Builder()
      .id("testString")
      .build();

    // Invoke getIkePolicy() with a valid options model and verify the result
    Response<IKEPolicy> response = vpcService.getIkePolicy(getIkePolicyOptionsModel).execute();
    assertNotNull(response);
    IKEPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getIkePolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getIkePolicy operation with and without retries enabled
  @Test
  public void testGetIkePolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetIkePolicyWOptions();

    vpcService.disableRetries();
    testGetIkePolicyWOptions();
  }

  // Test the getIkePolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetIkePolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getIkePolicy(null).execute();
  }

  // Test the updateIkePolicy operation with a valid options model parameter
  @Test
  public void testUpdateIkePolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"authentication_algorithm\": \"md5\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"name\": \"my-vpn-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dh_group\": 14, \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"ike_version\": 1, \"key_lifetime\": 28800, \"name\": \"my-ike-policy\", \"negotiation_mode\": \"main\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ike_policy\"}";
    String updateIkePolicyPath = "/ike_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the IKEPolicyPatch model
    IKEPolicyPatch ikePolicyPatchModel = new IKEPolicyPatch.Builder()
      .authenticationAlgorithm("md5")
      .dhGroup(Long.valueOf("14"))
      .encryptionAlgorithm("aes128")
      .ikeVersion(Long.valueOf("1"))
      .keyLifetime(Long.valueOf("28800"))
      .name("my-ike-policy")
      .build();
    Map<String, Object> ikePolicyPatchModelAsPatch = ikePolicyPatchModel.asPatch();

    // Construct an instance of the UpdateIkePolicyOptions model
    UpdateIkePolicyOptions updateIkePolicyOptionsModel = new UpdateIkePolicyOptions.Builder()
      .id("testString")
      .ikePolicyPatch(ikePolicyPatchModelAsPatch)
      .build();

    // Invoke updateIkePolicy() with a valid options model and verify the result
    Response<IKEPolicy> response = vpcService.updateIkePolicy(updateIkePolicyOptionsModel).execute();
    assertNotNull(response);
    IKEPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateIkePolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateIkePolicy operation with and without retries enabled
  @Test
  public void testUpdateIkePolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateIkePolicyWOptions();

    vpcService.disableRetries();
    testUpdateIkePolicyWOptions();
  }

  // Test the updateIkePolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateIkePolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateIkePolicy(null).execute();
  }

  // Test the listIkePolicyConnections operation with a valid options model parameter
  @Test
  public void testListIkePolicyConnectionsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"connections\": [{\"admin_state_up\": true, \"authentication_mode\": \"psk\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dead_peer_detection\": {\"action\": \"restart\", \"interval\": 30, \"timeout\": 120}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"ike_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-ike-policy\", \"resource_type\": \"ike_policy\"}, \"ipsec_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-ipsec-policy\", \"resource_type\": \"ipsec_policy\"}, \"mode\": \"route\", \"name\": \"my-vpn-connection\", \"peer_address\": \"169.21.50.5\", \"psk\": \"lkj14b1oi0alcniejkso\", \"resource_type\": \"vpn_gateway_connection\", \"status\": \"down\", \"routing_protocol\": \"none\", \"tunnels\": [{\"public_ip\": {\"address\": \"192.168.3.4\"}, \"status\": \"down\"}]}]}";
    String listIkePolicyConnectionsPath = "/ike_policies/testString/connections";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListIkePolicyConnectionsOptions model
    ListIkePolicyConnectionsOptions listIkePolicyConnectionsOptionsModel = new ListIkePolicyConnectionsOptions.Builder()
      .id("testString")
      .build();

    // Invoke listIkePolicyConnections() with a valid options model and verify the result
    Response<VPNGatewayConnectionCollection> response = vpcService.listIkePolicyConnections(listIkePolicyConnectionsOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnectionCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listIkePolicyConnectionsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listIkePolicyConnections operation with and without retries enabled
  @Test
  public void testListIkePolicyConnectionsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListIkePolicyConnectionsWOptions();

    vpcService.disableRetries();
    testListIkePolicyConnectionsWOptions();
  }

  // Test the listIkePolicyConnections operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListIkePolicyConnectionsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listIkePolicyConnections(null).execute();
  }

  // Test the listIpsecPolicies operation with a valid options model parameter
  @Test
  public void testListIpsecPoliciesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20\"}, \"ipsec_policies\": [{\"authentication_algorithm\": \"disabled\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"name\": \"my-vpn-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"encapsulation_mode\": \"tunnel\", \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"key_lifetime\": 3600, \"name\": \"my-ipsec-policy\", \"pfs\": \"disabled\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ipsec_policy\", \"transform_protocol\": \"esp\"}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20\"}, \"total_count\": 132}";
    String listIpsecPoliciesPath = "/ipsec_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListIpsecPoliciesOptions model
    ListIpsecPoliciesOptions listIpsecPoliciesOptionsModel = new ListIpsecPoliciesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listIpsecPolicies() with a valid options model and verify the result
    Response<IPsecPolicyCollection> response = vpcService.listIpsecPolicies(listIpsecPoliciesOptionsModel).execute();
    assertNotNull(response);
    IPsecPolicyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listIpsecPoliciesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listIpsecPolicies operation with and without retries enabled
  @Test
  public void testListIpsecPoliciesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListIpsecPoliciesWOptions();

    vpcService.disableRetries();
    testListIpsecPoliciesWOptions();
  }

  // Test the listIpsecPolicies operation using the IpsecPoliciesPager.getNext() method
  @Test
  public void testListIpsecPoliciesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"ipsec_policies\":[{\"authentication_algorithm\":\"disabled\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\",\"id\":\"a10a5771-dc23-442c-8460-c3601d8542f7\",\"name\":\"my-vpn-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"encapsulation_mode\":\"tunnel\",\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"key_lifetime\":3600,\"name\":\"my-ipsec-policy\",\"pfs\":\"disabled\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ipsec_policy\",\"transform_protocol\":\"esp\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"ipsec_policies\":[{\"authentication_algorithm\":\"disabled\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\",\"id\":\"a10a5771-dc23-442c-8460-c3601d8542f7\",\"name\":\"my-vpn-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"encapsulation_mode\":\"tunnel\",\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"key_lifetime\":3600,\"name\":\"my-ipsec-policy\",\"pfs\":\"disabled\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ipsec_policy\",\"transform_protocol\":\"esp\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListIpsecPoliciesOptions listIpsecPoliciesOptions = new ListIpsecPoliciesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<IPsecPolicy> allResults = new ArrayList<>();
    IpsecPoliciesPager pager = new IpsecPoliciesPager(vpcService, listIpsecPoliciesOptions);
    while (pager.hasNext()) {
      List<IPsecPolicy> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listIpsecPolicies operation using the IpsecPoliciesPager.getAll() method
  @Test
  public void testListIpsecPoliciesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"ipsec_policies\":[{\"authentication_algorithm\":\"disabled\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\",\"id\":\"a10a5771-dc23-442c-8460-c3601d8542f7\",\"name\":\"my-vpn-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"encapsulation_mode\":\"tunnel\",\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"key_lifetime\":3600,\"name\":\"my-ipsec-policy\",\"pfs\":\"disabled\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ipsec_policy\",\"transform_protocol\":\"esp\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"ipsec_policies\":[{\"authentication_algorithm\":\"disabled\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\",\"id\":\"a10a5771-dc23-442c-8460-c3601d8542f7\",\"name\":\"my-vpn-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"encapsulation_mode\":\"tunnel\",\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"key_lifetime\":3600,\"name\":\"my-ipsec-policy\",\"pfs\":\"disabled\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ipsec_policy\",\"transform_protocol\":\"esp\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListIpsecPoliciesOptions listIpsecPoliciesOptions = new ListIpsecPoliciesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    IpsecPoliciesPager pager = new IpsecPoliciesPager(vpcService, listIpsecPoliciesOptions);
    List<IPsecPolicy> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createIpsecPolicy operation with a valid options model parameter
  @Test
  public void testCreateIpsecPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"authentication_algorithm\": \"disabled\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"name\": \"my-vpn-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"encapsulation_mode\": \"tunnel\", \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"key_lifetime\": 3600, \"name\": \"my-ipsec-policy\", \"pfs\": \"disabled\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ipsec_policy\", \"transform_protocol\": \"esp\"}";
    String createIpsecPolicyPath = "/ipsec_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateIpsecPolicyOptions model
    CreateIpsecPolicyOptions createIpsecPolicyOptionsModel = new CreateIpsecPolicyOptions.Builder()
      .authenticationAlgorithm("disabled")
      .encryptionAlgorithm("aes128")
      .pfs("disabled")
      .keyLifetime(Long.valueOf("3600"))
      .name("my-ipsec-policy")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createIpsecPolicy() with a valid options model and verify the result
    Response<IPsecPolicy> response = vpcService.createIpsecPolicy(createIpsecPolicyOptionsModel).execute();
    assertNotNull(response);
    IPsecPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createIpsecPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createIpsecPolicy operation with and without retries enabled
  @Test
  public void testCreateIpsecPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateIpsecPolicyWOptions();

    vpcService.disableRetries();
    testCreateIpsecPolicyWOptions();
  }

  // Test the createIpsecPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateIpsecPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createIpsecPolicy(null).execute();
  }

  // Test the deleteIpsecPolicy operation with a valid options model parameter
  @Test
  public void testDeleteIpsecPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteIpsecPolicyPath = "/ipsec_policies/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteIpsecPolicyOptions model
    DeleteIpsecPolicyOptions deleteIpsecPolicyOptionsModel = new DeleteIpsecPolicyOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteIpsecPolicy() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteIpsecPolicy(deleteIpsecPolicyOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteIpsecPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteIpsecPolicy operation with and without retries enabled
  @Test
  public void testDeleteIpsecPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteIpsecPolicyWOptions();

    vpcService.disableRetries();
    testDeleteIpsecPolicyWOptions();
  }

  // Test the deleteIpsecPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteIpsecPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteIpsecPolicy(null).execute();
  }

  // Test the getIpsecPolicy operation with a valid options model parameter
  @Test
  public void testGetIpsecPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"authentication_algorithm\": \"disabled\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"name\": \"my-vpn-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"encapsulation_mode\": \"tunnel\", \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"key_lifetime\": 3600, \"name\": \"my-ipsec-policy\", \"pfs\": \"disabled\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ipsec_policy\", \"transform_protocol\": \"esp\"}";
    String getIpsecPolicyPath = "/ipsec_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetIpsecPolicyOptions model
    GetIpsecPolicyOptions getIpsecPolicyOptionsModel = new GetIpsecPolicyOptions.Builder()
      .id("testString")
      .build();

    // Invoke getIpsecPolicy() with a valid options model and verify the result
    Response<IPsecPolicy> response = vpcService.getIpsecPolicy(getIpsecPolicyOptionsModel).execute();
    assertNotNull(response);
    IPsecPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getIpsecPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getIpsecPolicy operation with and without retries enabled
  @Test
  public void testGetIpsecPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetIpsecPolicyWOptions();

    vpcService.disableRetries();
    testGetIpsecPolicyWOptions();
  }

  // Test the getIpsecPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetIpsecPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getIpsecPolicy(null).execute();
  }

  // Test the updateIpsecPolicy operation with a valid options model parameter
  @Test
  public void testUpdateIpsecPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"authentication_algorithm\": \"disabled\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"name\": \"my-vpn-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"encapsulation_mode\": \"tunnel\", \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"key_lifetime\": 3600, \"name\": \"my-ipsec-policy\", \"pfs\": \"disabled\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ipsec_policy\", \"transform_protocol\": \"esp\"}";
    String updateIpsecPolicyPath = "/ipsec_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the IPsecPolicyPatch model
    IPsecPolicyPatch iPsecPolicyPatchModel = new IPsecPolicyPatch.Builder()
      .authenticationAlgorithm("disabled")
      .encryptionAlgorithm("aes128")
      .keyLifetime(Long.valueOf("3600"))
      .name("my-ipsec-policy")
      .pfs("disabled")
      .build();
    Map<String, Object> iPsecPolicyPatchModelAsPatch = iPsecPolicyPatchModel.asPatch();

    // Construct an instance of the UpdateIpsecPolicyOptions model
    UpdateIpsecPolicyOptions updateIpsecPolicyOptionsModel = new UpdateIpsecPolicyOptions.Builder()
      .id("testString")
      .iPsecPolicyPatch(iPsecPolicyPatchModelAsPatch)
      .build();

    // Invoke updateIpsecPolicy() with a valid options model and verify the result
    Response<IPsecPolicy> response = vpcService.updateIpsecPolicy(updateIpsecPolicyOptionsModel).execute();
    assertNotNull(response);
    IPsecPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateIpsecPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateIpsecPolicy operation with and without retries enabled
  @Test
  public void testUpdateIpsecPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateIpsecPolicyWOptions();

    vpcService.disableRetries();
    testUpdateIpsecPolicyWOptions();
  }

  // Test the updateIpsecPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateIpsecPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateIpsecPolicy(null).execute();
  }

  // Test the listIpsecPolicyConnections operation with a valid options model parameter
  @Test
  public void testListIpsecPolicyConnectionsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"connections\": [{\"admin_state_up\": true, \"authentication_mode\": \"psk\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dead_peer_detection\": {\"action\": \"restart\", \"interval\": 30, \"timeout\": 120}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"ike_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-ike-policy\", \"resource_type\": \"ike_policy\"}, \"ipsec_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-ipsec-policy\", \"resource_type\": \"ipsec_policy\"}, \"mode\": \"route\", \"name\": \"my-vpn-connection\", \"peer_address\": \"169.21.50.5\", \"psk\": \"lkj14b1oi0alcniejkso\", \"resource_type\": \"vpn_gateway_connection\", \"status\": \"down\", \"routing_protocol\": \"none\", \"tunnels\": [{\"public_ip\": {\"address\": \"192.168.3.4\"}, \"status\": \"down\"}]}]}";
    String listIpsecPolicyConnectionsPath = "/ipsec_policies/testString/connections";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListIpsecPolicyConnectionsOptions model
    ListIpsecPolicyConnectionsOptions listIpsecPolicyConnectionsOptionsModel = new ListIpsecPolicyConnectionsOptions.Builder()
      .id("testString")
      .build();

    // Invoke listIpsecPolicyConnections() with a valid options model and verify the result
    Response<VPNGatewayConnectionCollection> response = vpcService.listIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnectionCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listIpsecPolicyConnectionsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listIpsecPolicyConnections operation with and without retries enabled
  @Test
  public void testListIpsecPolicyConnectionsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListIpsecPolicyConnectionsWOptions();

    vpcService.disableRetries();
    testListIpsecPolicyConnectionsWOptions();
  }

  // Test the listIpsecPolicyConnections operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListIpsecPolicyConnectionsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listIpsecPolicyConnections(null).execute();
  }

  // Test the listVpnGateways operation with a valid options model parameter
  @Test
  public void testListVpnGatewaysWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20\"}, \"total_count\": 132, \"vpn_gateways\": [{\"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"name\": \"my-vpn-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"members\": [{\"private_ip\": {\"address\": \"192.168.3.4\"}, \"public_ip\": {\"address\": \"192.168.3.4\"}, \"role\": \"active\", \"status\": \"available\"}], \"name\": \"my-vpn-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_gateway\", \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"mode\": \"route\"}]}";
    String listVpnGatewaysPath = "/vpn_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnGatewaysOptions model
    ListVpnGatewaysOptions listVpnGatewaysOptionsModel = new ListVpnGatewaysOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .mode("route")
      .build();

    // Invoke listVpnGateways() with a valid options model and verify the result
    Response<VPNGatewayCollection> response = vpcService.listVpnGateways(listVpnGatewaysOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnGatewaysPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("sort"), "name");
    assertEquals(query.get("mode"), "route");
  }

  // Test the listVpnGateways operation with and without retries enabled
  @Test
  public void testListVpnGatewaysWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnGatewaysWOptions();

    vpcService.disableRetries();
    testListVpnGatewaysWOptions();
  }

  // Test the listVpnGateways operation using the VpnGatewaysPager.getNext() method
  @Test
  public void testListVpnGatewaysWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"vpn_gateways\":[{\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\",\"id\":\"a10a5771-dc23-442c-8460-c3601d8542f7\",\"name\":\"my-vpn-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"members\":[{\"private_ip\":{\"address\":\"192.168.3.4\"},\"public_ip\":{\"address\":\"192.168.3.4\"},\"role\":\"active\",\"status\":\"available\"}],\"name\":\"my-vpn-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_gateway\",\"status\":\"available\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"mode\":\"route\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"vpn_gateways\":[{\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\",\"id\":\"a10a5771-dc23-442c-8460-c3601d8542f7\",\"name\":\"my-vpn-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"members\":[{\"private_ip\":{\"address\":\"192.168.3.4\"},\"public_ip\":{\"address\":\"192.168.3.4\"},\"role\":\"active\",\"status\":\"available\"}],\"name\":\"my-vpn-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_gateway\",\"status\":\"available\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"mode\":\"route\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnGatewaysOptions listVpnGatewaysOptions = new ListVpnGatewaysOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .mode("route")
      .build();

    List<VPNGateway> allResults = new ArrayList<>();
    VpnGatewaysPager pager = new VpnGatewaysPager(vpcService, listVpnGatewaysOptions);
    while (pager.hasNext()) {
      List<VPNGateway> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpnGateways operation using the VpnGatewaysPager.getAll() method
  @Test
  public void testListVpnGatewaysWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"vpn_gateways\":[{\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\",\"id\":\"a10a5771-dc23-442c-8460-c3601d8542f7\",\"name\":\"my-vpn-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"members\":[{\"private_ip\":{\"address\":\"192.168.3.4\"},\"public_ip\":{\"address\":\"192.168.3.4\"},\"role\":\"active\",\"status\":\"available\"}],\"name\":\"my-vpn-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_gateway\",\"status\":\"available\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"mode\":\"route\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"vpn_gateways\":[{\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\",\"id\":\"a10a5771-dc23-442c-8460-c3601d8542f7\",\"name\":\"my-vpn-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"members\":[{\"private_ip\":{\"address\":\"192.168.3.4\"},\"public_ip\":{\"address\":\"192.168.3.4\"},\"role\":\"active\",\"status\":\"available\"}],\"name\":\"my-vpn-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_gateway\",\"status\":\"available\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"mode\":\"route\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnGatewaysOptions listVpnGatewaysOptions = new ListVpnGatewaysOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .mode("route")
      .build();

    VpnGatewaysPager pager = new VpnGatewaysPager(vpcService, listVpnGatewaysOptions);
    List<VPNGateway> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpnGateway operation with a valid options model parameter
  @Test
  public void testCreateVpnGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"name\": \"my-vpn-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"members\": [{\"private_ip\": {\"address\": \"192.168.3.4\"}, \"public_ip\": {\"address\": \"192.168.3.4\"}, \"role\": \"active\", \"status\": \"available\"}], \"name\": \"my-vpn-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_gateway\", \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"mode\": \"route\"}";
    String createVpnGatewayPath = "/vpn_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the VPNGatewayPrototypeVPNGatewayRouteModePrototype model
    VPNGatewayPrototypeVPNGatewayRouteModePrototype vpnGatewayPrototypeModel = new VPNGatewayPrototypeVPNGatewayRouteModePrototype.Builder()
      .name("my-vpn-gateway")
      .resourceGroup(resourceGroupIdentityModel)
      .subnet(subnetIdentityModel)
      .mode("route")
      .build();

    // Construct an instance of the CreateVpnGatewayOptions model
    CreateVpnGatewayOptions createVpnGatewayOptionsModel = new CreateVpnGatewayOptions.Builder()
      .vpnGatewayPrototype(vpnGatewayPrototypeModel)
      .build();

    // Invoke createVpnGateway() with a valid options model and verify the result
    Response<VPNGateway> response = vpcService.createVpnGateway(createVpnGatewayOptionsModel).execute();
    assertNotNull(response);
    VPNGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpnGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpnGateway operation with and without retries enabled
  @Test
  public void testCreateVpnGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpnGatewayWOptions();

    vpcService.disableRetries();
    testCreateVpnGatewayWOptions();
  }

  // Test the createVpnGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpnGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpnGateway(null).execute();
  }

  // Test the deleteVpnGateway operation with a valid options model parameter
  @Test
  public void testDeleteVpnGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpnGatewayPath = "/vpn_gateways/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpnGatewayOptions model
    DeleteVpnGatewayOptions deleteVpnGatewayOptionsModel = new DeleteVpnGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteVpnGateway() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpnGateway(deleteVpnGatewayOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpnGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpnGateway operation with and without retries enabled
  @Test
  public void testDeleteVpnGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpnGatewayWOptions();

    vpcService.disableRetries();
    testDeleteVpnGatewayWOptions();
  }

  // Test the deleteVpnGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpnGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpnGateway(null).execute();
  }

  // Test the getVpnGateway operation with a valid options model parameter
  @Test
  public void testGetVpnGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"name\": \"my-vpn-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"members\": [{\"private_ip\": {\"address\": \"192.168.3.4\"}, \"public_ip\": {\"address\": \"192.168.3.4\"}, \"role\": \"active\", \"status\": \"available\"}], \"name\": \"my-vpn-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_gateway\", \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"mode\": \"route\"}";
    String getVpnGatewayPath = "/vpn_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpnGatewayOptions model
    GetVpnGatewayOptions getVpnGatewayOptionsModel = new GetVpnGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpnGateway() with a valid options model and verify the result
    Response<VPNGateway> response = vpcService.getVpnGateway(getVpnGatewayOptionsModel).execute();
    assertNotNull(response);
    VPNGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpnGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpnGateway operation with and without retries enabled
  @Test
  public void testGetVpnGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpnGatewayWOptions();

    vpcService.disableRetries();
    testGetVpnGatewayWOptions();
  }

  // Test the getVpnGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpnGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpnGateway(null).execute();
  }

  // Test the updateVpnGateway operation with a valid options model parameter
  @Test
  public void testUpdateVpnGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"name\": \"my-vpn-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"members\": [{\"private_ip\": {\"address\": \"192.168.3.4\"}, \"public_ip\": {\"address\": \"192.168.3.4\"}, \"role\": \"active\", \"status\": \"available\"}], \"name\": \"my-vpn-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_gateway\", \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"mode\": \"route\"}";
    String updateVpnGatewayPath = "/vpn_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VPNGatewayPatch model
    VPNGatewayPatch vpnGatewayPatchModel = new VPNGatewayPatch.Builder()
      .name("my-vpn-gateway")
      .build();
    Map<String, Object> vpnGatewayPatchModelAsPatch = vpnGatewayPatchModel.asPatch();

    // Construct an instance of the UpdateVpnGatewayOptions model
    UpdateVpnGatewayOptions updateVpnGatewayOptionsModel = new UpdateVpnGatewayOptions.Builder()
      .id("testString")
      .vpnGatewayPatch(vpnGatewayPatchModelAsPatch)
      .build();

    // Invoke updateVpnGateway() with a valid options model and verify the result
    Response<VPNGateway> response = vpcService.updateVpnGateway(updateVpnGatewayOptionsModel).execute();
    assertNotNull(response);
    VPNGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpnGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpnGateway operation with and without retries enabled
  @Test
  public void testUpdateVpnGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpnGatewayWOptions();

    vpcService.disableRetries();
    testUpdateVpnGatewayWOptions();
  }

  // Test the updateVpnGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpnGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpnGateway(null).execute();
  }

  // Test the listVpnGatewayConnections operation with a valid options model parameter
  @Test
  public void testListVpnGatewayConnectionsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"connections\": [{\"admin_state_up\": true, \"authentication_mode\": \"psk\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dead_peer_detection\": {\"action\": \"restart\", \"interval\": 30, \"timeout\": 120}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"ike_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-ike-policy\", \"resource_type\": \"ike_policy\"}, \"ipsec_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-ipsec-policy\", \"resource_type\": \"ipsec_policy\"}, \"mode\": \"route\", \"name\": \"my-vpn-connection\", \"peer_address\": \"169.21.50.5\", \"psk\": \"lkj14b1oi0alcniejkso\", \"resource_type\": \"vpn_gateway_connection\", \"status\": \"down\", \"routing_protocol\": \"none\", \"tunnels\": [{\"public_ip\": {\"address\": \"192.168.3.4\"}, \"status\": \"down\"}]}]}";
    String listVpnGatewayConnectionsPath = "/vpn_gateways/testString/connections";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnGatewayConnectionsOptions model
    ListVpnGatewayConnectionsOptions listVpnGatewayConnectionsOptionsModel = new ListVpnGatewayConnectionsOptions.Builder()
      .vpnGatewayId("testString")
      .status("testString")
      .build();

    // Invoke listVpnGatewayConnections() with a valid options model and verify the result
    Response<VPNGatewayConnectionCollection> response = vpcService.listVpnGatewayConnections(listVpnGatewayConnectionsOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnectionCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnGatewayConnectionsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("status"), "testString");
  }

  // Test the listVpnGatewayConnections operation with and without retries enabled
  @Test
  public void testListVpnGatewayConnectionsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnGatewayConnectionsWOptions();

    vpcService.disableRetries();
    testListVpnGatewayConnectionsWOptions();
  }

  // Test the listVpnGatewayConnections operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpnGatewayConnectionsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpnGatewayConnections(null).execute();
  }

  // Test the createVpnGatewayConnection operation with a valid options model parameter
  @Test
  public void testCreateVpnGatewayConnectionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"admin_state_up\": true, \"authentication_mode\": \"psk\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dead_peer_detection\": {\"action\": \"restart\", \"interval\": 30, \"timeout\": 120}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"ike_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-ike-policy\", \"resource_type\": \"ike_policy\"}, \"ipsec_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-ipsec-policy\", \"resource_type\": \"ipsec_policy\"}, \"mode\": \"route\", \"name\": \"my-vpn-connection\", \"peer_address\": \"169.21.50.5\", \"psk\": \"lkj14b1oi0alcniejkso\", \"resource_type\": \"vpn_gateway_connection\", \"status\": \"down\", \"routing_protocol\": \"none\", \"tunnels\": [{\"public_ip\": {\"address\": \"192.168.3.4\"}, \"status\": \"down\"}]}";
    String createVpnGatewayConnectionPath = "/vpn_gateways/testString/connections";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VPNGatewayConnectionDPDPrototype model
    VPNGatewayConnectionDPDPrototype vpnGatewayConnectionDpdPrototypeModel = new VPNGatewayConnectionDPDPrototype.Builder()
      .action("restart")
      .interval(Long.valueOf("30"))
      .timeout(Long.valueOf("120"))
      .build();

    // Construct an instance of the VPNGatewayConnectionIKEPolicyPrototypeIKEPolicyIdentityById model
    VPNGatewayConnectionIKEPolicyPrototypeIKEPolicyIdentityById vpnGatewayConnectionIkePolicyPrototypeModel = new VPNGatewayConnectionIKEPolicyPrototypeIKEPolicyIdentityById.Builder()
      .id("ddf51bec-3424-11e8-b467-0ed5f89f718b")
      .build();

    // Construct an instance of the VPNGatewayConnectionIPsecPolicyPrototypeIPsecPolicyIdentityById model
    VPNGatewayConnectionIPsecPolicyPrototypeIPsecPolicyIdentityById vpnGatewayConnectionIPsecPolicyPrototypeModel = new VPNGatewayConnectionIPsecPolicyPrototypeIPsecPolicyIdentityById.Builder()
      .id("ddf51bec-3424-11e8-b467-0ed5f89f718b")
      .build();

    // Construct an instance of the VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype model
    VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype vpnGatewayConnectionPrototypeModel = new VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype.Builder()
      .adminStateUp(true)
      .deadPeerDetection(vpnGatewayConnectionDpdPrototypeModel)
      .ikePolicy(vpnGatewayConnectionIkePolicyPrototypeModel)
      .ipsecPolicy(vpnGatewayConnectionIPsecPolicyPrototypeModel)
      .name("my-vpn-connection")
      .peerAddress("169.21.50.5")
      .psk("lkj14b1oi0alcniejkso")
      .routingProtocol("none")
      .build();

    // Construct an instance of the CreateVpnGatewayConnectionOptions model
    CreateVpnGatewayConnectionOptions createVpnGatewayConnectionOptionsModel = new CreateVpnGatewayConnectionOptions.Builder()
      .vpnGatewayId("testString")
      .vpnGatewayConnectionPrototype(vpnGatewayConnectionPrototypeModel)
      .build();

    // Invoke createVpnGatewayConnection() with a valid options model and verify the result
    Response<VPNGatewayConnection> response = vpcService.createVpnGatewayConnection(createVpnGatewayConnectionOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpnGatewayConnectionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpnGatewayConnection operation with and without retries enabled
  @Test
  public void testCreateVpnGatewayConnectionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpnGatewayConnectionWOptions();

    vpcService.disableRetries();
    testCreateVpnGatewayConnectionWOptions();
  }

  // Test the createVpnGatewayConnection operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpnGatewayConnectionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpnGatewayConnection(null).execute();
  }

  // Test the deleteVpnGatewayConnection operation with a valid options model parameter
  @Test
  public void testDeleteVpnGatewayConnectionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpnGatewayConnectionPath = "/vpn_gateways/testString/connections/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpnGatewayConnectionOptions model
    DeleteVpnGatewayConnectionOptions deleteVpnGatewayConnectionOptionsModel = new DeleteVpnGatewayConnectionOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpnGatewayConnection() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpnGatewayConnection(deleteVpnGatewayConnectionOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpnGatewayConnectionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpnGatewayConnection operation with and without retries enabled
  @Test
  public void testDeleteVpnGatewayConnectionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpnGatewayConnectionWOptions();

    vpcService.disableRetries();
    testDeleteVpnGatewayConnectionWOptions();
  }

  // Test the deleteVpnGatewayConnection operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpnGatewayConnectionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpnGatewayConnection(null).execute();
  }

  // Test the getVpnGatewayConnection operation with a valid options model parameter
  @Test
  public void testGetVpnGatewayConnectionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"admin_state_up\": true, \"authentication_mode\": \"psk\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dead_peer_detection\": {\"action\": \"restart\", \"interval\": 30, \"timeout\": 120}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"ike_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-ike-policy\", \"resource_type\": \"ike_policy\"}, \"ipsec_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-ipsec-policy\", \"resource_type\": \"ipsec_policy\"}, \"mode\": \"route\", \"name\": \"my-vpn-connection\", \"peer_address\": \"169.21.50.5\", \"psk\": \"lkj14b1oi0alcniejkso\", \"resource_type\": \"vpn_gateway_connection\", \"status\": \"down\", \"routing_protocol\": \"none\", \"tunnels\": [{\"public_ip\": {\"address\": \"192.168.3.4\"}, \"status\": \"down\"}]}";
    String getVpnGatewayConnectionPath = "/vpn_gateways/testString/connections/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpnGatewayConnectionOptions model
    GetVpnGatewayConnectionOptions getVpnGatewayConnectionOptionsModel = new GetVpnGatewayConnectionOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .build();

    // Invoke getVpnGatewayConnection() with a valid options model and verify the result
    Response<VPNGatewayConnection> response = vpcService.getVpnGatewayConnection(getVpnGatewayConnectionOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpnGatewayConnectionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpnGatewayConnection operation with and without retries enabled
  @Test
  public void testGetVpnGatewayConnectionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpnGatewayConnectionWOptions();

    vpcService.disableRetries();
    testGetVpnGatewayConnectionWOptions();
  }

  // Test the getVpnGatewayConnection operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpnGatewayConnectionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpnGatewayConnection(null).execute();
  }

  // Test the updateVpnGatewayConnection operation with a valid options model parameter
  @Test
  public void testUpdateVpnGatewayConnectionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"admin_state_up\": true, \"authentication_mode\": \"psk\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dead_peer_detection\": {\"action\": \"restart\", \"interval\": 30, \"timeout\": 120}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b\", \"id\": \"a10a5771-dc23-442c-8460-c3601d8542f7\", \"ike_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-ike-policy\", \"resource_type\": \"ike_policy\"}, \"ipsec_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-ipsec-policy\", \"resource_type\": \"ipsec_policy\"}, \"mode\": \"route\", \"name\": \"my-vpn-connection\", \"peer_address\": \"169.21.50.5\", \"psk\": \"lkj14b1oi0alcniejkso\", \"resource_type\": \"vpn_gateway_connection\", \"status\": \"down\", \"routing_protocol\": \"none\", \"tunnels\": [{\"public_ip\": {\"address\": \"192.168.3.4\"}, \"status\": \"down\"}]}";
    String updateVpnGatewayConnectionPath = "/vpn_gateways/testString/connections/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VPNGatewayConnectionDPDPatch model
    VPNGatewayConnectionDPDPatch vpnGatewayConnectionDpdPatchModel = new VPNGatewayConnectionDPDPatch.Builder()
      .action("restart")
      .interval(Long.valueOf("30"))
      .timeout(Long.valueOf("120"))
      .build();

    // Construct an instance of the VPNGatewayConnectionIKEPolicyPatchIKEPolicyIdentityById model
    VPNGatewayConnectionIKEPolicyPatchIKEPolicyIdentityById vpnGatewayConnectionIkePolicyPatchModel = new VPNGatewayConnectionIKEPolicyPatchIKEPolicyIdentityById.Builder()
      .id("ddf51bec-3424-11e8-b467-0ed5f89f718b")
      .build();

    // Construct an instance of the VPNGatewayConnectionIPsecPolicyPatchIPsecPolicyIdentityById model
    VPNGatewayConnectionIPsecPolicyPatchIPsecPolicyIdentityById vpnGatewayConnectionIPsecPolicyPatchModel = new VPNGatewayConnectionIPsecPolicyPatchIPsecPolicyIdentityById.Builder()
      .id("ddf51bec-3424-11e8-b467-0ed5f89f718b")
      .build();

    // Construct an instance of the VPNGatewayConnectionPatchVPNGatewayConnectionStaticRouteModePatch model
    VPNGatewayConnectionPatchVPNGatewayConnectionStaticRouteModePatch vpnGatewayConnectionPatchModel = new VPNGatewayConnectionPatchVPNGatewayConnectionStaticRouteModePatch.Builder()
      .adminStateUp(true)
      .deadPeerDetection(vpnGatewayConnectionDpdPatchModel)
      .ikePolicy(vpnGatewayConnectionIkePolicyPatchModel)
      .ipsecPolicy(vpnGatewayConnectionIPsecPolicyPatchModel)
      .name("my-vpn-connection")
      .peerAddress("169.21.50.5")
      .psk("lkj14b1oi0alcniejkso")
      .routingProtocol("none")
      .build();
    Map<String, Object> vpnGatewayConnectionPatchModelAsPatch = vpnGatewayConnectionPatchModel.asPatch();

    // Construct an instance of the UpdateVpnGatewayConnectionOptions model
    UpdateVpnGatewayConnectionOptions updateVpnGatewayConnectionOptionsModel = new UpdateVpnGatewayConnectionOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .vpnGatewayConnectionPatch(vpnGatewayConnectionPatchModelAsPatch)
      .build();

    // Invoke updateVpnGatewayConnection() with a valid options model and verify the result
    Response<VPNGatewayConnection> response = vpcService.updateVpnGatewayConnection(updateVpnGatewayConnectionOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpnGatewayConnectionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpnGatewayConnection operation with and without retries enabled
  @Test
  public void testUpdateVpnGatewayConnectionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpnGatewayConnectionWOptions();

    vpcService.disableRetries();
    testUpdateVpnGatewayConnectionWOptions();
  }

  // Test the updateVpnGatewayConnection operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpnGatewayConnectionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpnGatewayConnection(null).execute();
  }

  // Test the listVpnGatewayConnectionLocalCidrs operation with a valid options model parameter
  @Test
  public void testListVpnGatewayConnectionLocalCidrsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"local_cidrs\": [\"192.168.1.0/24\"]}";
    String listVpnGatewayConnectionLocalCidrsPath = "/vpn_gateways/testString/connections/testString/local_cidrs";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnGatewayConnectionLocalCidrsOptions model
    ListVpnGatewayConnectionLocalCidrsOptions listVpnGatewayConnectionLocalCidrsOptionsModel = new ListVpnGatewayConnectionLocalCidrsOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .build();

    // Invoke listVpnGatewayConnectionLocalCidrs() with a valid options model and verify the result
    Response<VPNGatewayConnectionLocalCIDRs> response = vpcService.listVpnGatewayConnectionLocalCidrs(listVpnGatewayConnectionLocalCidrsOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnectionLocalCIDRs responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnGatewayConnectionLocalCidrsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listVpnGatewayConnectionLocalCidrs operation with and without retries enabled
  @Test
  public void testListVpnGatewayConnectionLocalCidrsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnGatewayConnectionLocalCidrsWOptions();

    vpcService.disableRetries();
    testListVpnGatewayConnectionLocalCidrsWOptions();
  }

  // Test the listVpnGatewayConnectionLocalCidrs operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpnGatewayConnectionLocalCidrsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpnGatewayConnectionLocalCidrs(null).execute();
  }

  // Test the removeVpnGatewayConnectionLocalCidr operation with a valid options model parameter
  @Test
  public void testRemoveVpnGatewayConnectionLocalCidrWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String removeVpnGatewayConnectionLocalCidrPath = "/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RemoveVpnGatewayConnectionLocalCidrOptions model
    RemoveVpnGatewayConnectionLocalCidrOptions removeVpnGatewayConnectionLocalCidrOptionsModel = new RemoveVpnGatewayConnectionLocalCidrOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .cidrPrefix("testString")
      .prefixLength("testString")
      .build();

    // Invoke removeVpnGatewayConnectionLocalCidr() with a valid options model and verify the result
    Response<Void> response = vpcService.removeVpnGatewayConnectionLocalCidr(removeVpnGatewayConnectionLocalCidrOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, removeVpnGatewayConnectionLocalCidrPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the removeVpnGatewayConnectionLocalCidr operation with and without retries enabled
  @Test
  public void testRemoveVpnGatewayConnectionLocalCidrWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRemoveVpnGatewayConnectionLocalCidrWOptions();

    vpcService.disableRetries();
    testRemoveVpnGatewayConnectionLocalCidrWOptions();
  }

  // Test the removeVpnGatewayConnectionLocalCidr operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRemoveVpnGatewayConnectionLocalCidrNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.removeVpnGatewayConnectionLocalCidr(null).execute();
  }

  // Test the checkVpnGatewayConnectionLocalCidr operation with a valid options model parameter
  @Test
  public void testCheckVpnGatewayConnectionLocalCidrWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String checkVpnGatewayConnectionLocalCidrPath = "/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the CheckVpnGatewayConnectionLocalCidrOptions model
    CheckVpnGatewayConnectionLocalCidrOptions checkVpnGatewayConnectionLocalCidrOptionsModel = new CheckVpnGatewayConnectionLocalCidrOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .cidrPrefix("testString")
      .prefixLength("testString")
      .build();

    // Invoke checkVpnGatewayConnectionLocalCidr() with a valid options model and verify the result
    Response<Void> response = vpcService.checkVpnGatewayConnectionLocalCidr(checkVpnGatewayConnectionLocalCidrOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, checkVpnGatewayConnectionLocalCidrPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the checkVpnGatewayConnectionLocalCidr operation with and without retries enabled
  @Test
  public void testCheckVpnGatewayConnectionLocalCidrWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCheckVpnGatewayConnectionLocalCidrWOptions();

    vpcService.disableRetries();
    testCheckVpnGatewayConnectionLocalCidrWOptions();
  }

  // Test the checkVpnGatewayConnectionLocalCidr operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCheckVpnGatewayConnectionLocalCidrNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.checkVpnGatewayConnectionLocalCidr(null).execute();
  }

  // Test the addVpnGatewayConnectionLocalCidr operation with a valid options model parameter
  @Test
  public void testAddVpnGatewayConnectionLocalCidrWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String addVpnGatewayConnectionLocalCidrPath = "/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the AddVpnGatewayConnectionLocalCidrOptions model
    AddVpnGatewayConnectionLocalCidrOptions addVpnGatewayConnectionLocalCidrOptionsModel = new AddVpnGatewayConnectionLocalCidrOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .cidrPrefix("testString")
      .prefixLength("testString")
      .build();

    // Invoke addVpnGatewayConnectionLocalCidr() with a valid options model and verify the result
    Response<Void> response = vpcService.addVpnGatewayConnectionLocalCidr(addVpnGatewayConnectionLocalCidrOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, addVpnGatewayConnectionLocalCidrPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the addVpnGatewayConnectionLocalCidr operation with and without retries enabled
  @Test
  public void testAddVpnGatewayConnectionLocalCidrWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testAddVpnGatewayConnectionLocalCidrWOptions();

    vpcService.disableRetries();
    testAddVpnGatewayConnectionLocalCidrWOptions();
  }

  // Test the addVpnGatewayConnectionLocalCidr operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testAddVpnGatewayConnectionLocalCidrNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.addVpnGatewayConnectionLocalCidr(null).execute();
  }

  // Test the listVpnGatewayConnectionPeerCidrs operation with a valid options model parameter
  @Test
  public void testListVpnGatewayConnectionPeerCidrsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"peer_cidrs\": [\"10.45.1.0/24\"]}";
    String listVpnGatewayConnectionPeerCidrsPath = "/vpn_gateways/testString/connections/testString/peer_cidrs";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnGatewayConnectionPeerCidrsOptions model
    ListVpnGatewayConnectionPeerCidrsOptions listVpnGatewayConnectionPeerCidrsOptionsModel = new ListVpnGatewayConnectionPeerCidrsOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .build();

    // Invoke listVpnGatewayConnectionPeerCidrs() with a valid options model and verify the result
    Response<VPNGatewayConnectionPeerCIDRs> response = vpcService.listVpnGatewayConnectionPeerCidrs(listVpnGatewayConnectionPeerCidrsOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnectionPeerCIDRs responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnGatewayConnectionPeerCidrsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listVpnGatewayConnectionPeerCidrs operation with and without retries enabled
  @Test
  public void testListVpnGatewayConnectionPeerCidrsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnGatewayConnectionPeerCidrsWOptions();

    vpcService.disableRetries();
    testListVpnGatewayConnectionPeerCidrsWOptions();
  }

  // Test the listVpnGatewayConnectionPeerCidrs operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpnGatewayConnectionPeerCidrsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpnGatewayConnectionPeerCidrs(null).execute();
  }

  // Test the removeVpnGatewayConnectionPeerCidr operation with a valid options model parameter
  @Test
  public void testRemoveVpnGatewayConnectionPeerCidrWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String removeVpnGatewayConnectionPeerCidrPath = "/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RemoveVpnGatewayConnectionPeerCidrOptions model
    RemoveVpnGatewayConnectionPeerCidrOptions removeVpnGatewayConnectionPeerCidrOptionsModel = new RemoveVpnGatewayConnectionPeerCidrOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .cidrPrefix("testString")
      .prefixLength("testString")
      .build();

    // Invoke removeVpnGatewayConnectionPeerCidr() with a valid options model and verify the result
    Response<Void> response = vpcService.removeVpnGatewayConnectionPeerCidr(removeVpnGatewayConnectionPeerCidrOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, removeVpnGatewayConnectionPeerCidrPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the removeVpnGatewayConnectionPeerCidr operation with and without retries enabled
  @Test
  public void testRemoveVpnGatewayConnectionPeerCidrWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRemoveVpnGatewayConnectionPeerCidrWOptions();

    vpcService.disableRetries();
    testRemoveVpnGatewayConnectionPeerCidrWOptions();
  }

  // Test the removeVpnGatewayConnectionPeerCidr operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRemoveVpnGatewayConnectionPeerCidrNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.removeVpnGatewayConnectionPeerCidr(null).execute();
  }

  // Test the checkVpnGatewayConnectionPeerCidr operation with a valid options model parameter
  @Test
  public void testCheckVpnGatewayConnectionPeerCidrWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String checkVpnGatewayConnectionPeerCidrPath = "/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the CheckVpnGatewayConnectionPeerCidrOptions model
    CheckVpnGatewayConnectionPeerCidrOptions checkVpnGatewayConnectionPeerCidrOptionsModel = new CheckVpnGatewayConnectionPeerCidrOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .cidrPrefix("testString")
      .prefixLength("testString")
      .build();

    // Invoke checkVpnGatewayConnectionPeerCidr() with a valid options model and verify the result
    Response<Void> response = vpcService.checkVpnGatewayConnectionPeerCidr(checkVpnGatewayConnectionPeerCidrOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, checkVpnGatewayConnectionPeerCidrPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the checkVpnGatewayConnectionPeerCidr operation with and without retries enabled
  @Test
  public void testCheckVpnGatewayConnectionPeerCidrWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCheckVpnGatewayConnectionPeerCidrWOptions();

    vpcService.disableRetries();
    testCheckVpnGatewayConnectionPeerCidrWOptions();
  }

  // Test the checkVpnGatewayConnectionPeerCidr operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCheckVpnGatewayConnectionPeerCidrNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.checkVpnGatewayConnectionPeerCidr(null).execute();
  }

  // Test the addVpnGatewayConnectionPeerCidr operation with a valid options model parameter
  @Test
  public void testAddVpnGatewayConnectionPeerCidrWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String addVpnGatewayConnectionPeerCidrPath = "/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the AddVpnGatewayConnectionPeerCidrOptions model
    AddVpnGatewayConnectionPeerCidrOptions addVpnGatewayConnectionPeerCidrOptionsModel = new AddVpnGatewayConnectionPeerCidrOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .cidrPrefix("testString")
      .prefixLength("testString")
      .build();

    // Invoke addVpnGatewayConnectionPeerCidr() with a valid options model and verify the result
    Response<Void> response = vpcService.addVpnGatewayConnectionPeerCidr(addVpnGatewayConnectionPeerCidrOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, addVpnGatewayConnectionPeerCidrPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the addVpnGatewayConnectionPeerCidr operation with and without retries enabled
  @Test
  public void testAddVpnGatewayConnectionPeerCidrWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testAddVpnGatewayConnectionPeerCidrWOptions();

    vpcService.disableRetries();
    testAddVpnGatewayConnectionPeerCidrWOptions();
  }

  // Test the addVpnGatewayConnectionPeerCidr operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testAddVpnGatewayConnectionPeerCidrNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.addVpnGatewayConnectionPeerCidr(null).execute();
  }

  // Test the listVpnServers operation with a valid options model parameter
  @Test
  public void testListVpnServersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers?start=ffd653466e284937896724b2dd044c9c&limit=20\"}, \"total_count\": 132, \"vpn_servers\": [{\"certificate\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"client_authentication\": [{\"method\": \"certificate\", \"identity_provider\": {\"provider_type\": \"iam\"}}], \"client_auto_delete\": true, \"client_auto_delete_timeout\": 1, \"client_dns_server_ips\": [{\"address\": \"192.168.3.4\"}], \"client_idle_timeout\": 600, \"client_ip_pool\": \"172.16.0.0/16\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn-server:r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"enable_split_tunneling\": true, \"health_state\": \"ok\", \"hostname\": \"a8506291.us-south.vpn-server.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-server\", \"port\": 443, \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"protocol\": \"udp\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_server\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}]}";
    String listVpnServersPath = "/vpn_servers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnServersOptions model
    ListVpnServersOptions listVpnServersOptionsModel = new ListVpnServersOptions.Builder()
      .name("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .build();

    // Invoke listVpnServers() with a valid options model and verify the result
    Response<VPNServerCollection> response = vpcService.listVpnServers(listVpnServersOptionsModel).execute();
    assertNotNull(response);
    VPNServerCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnServersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("name"), "testString");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("sort"), "name");
  }

  // Test the listVpnServers operation with and without retries enabled
  @Test
  public void testListVpnServersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnServersWOptions();

    vpcService.disableRetries();
    testListVpnServersWOptions();
  }

  // Test the listVpnServers operation using the VpnServersPager.getNext() method
  @Test
  public void testListVpnServersWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"vpn_servers\":[{\"certificate\":{\"crn\":\"crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"},\"client_authentication\":[{\"method\":\"certificate\",\"identity_provider\":{\"provider_type\":\"iam\"}}],\"client_auto_delete\":true,\"client_auto_delete_timeout\":1,\"client_dns_server_ips\":[{\"address\":\"192.168.3.4\"}],\"client_idle_timeout\":600,\"client_ip_pool\":\"172.16.0.0/16\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn-server:r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"enable_split_tunneling\":true,\"health_state\":\"ok\",\"hostname\":\"a8506291.us-south.vpn-server.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-server\",\"port\":443,\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"protocol\":\"udp\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_server\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"vpn_servers\":[{\"certificate\":{\"crn\":\"crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"},\"client_authentication\":[{\"method\":\"certificate\",\"identity_provider\":{\"provider_type\":\"iam\"}}],\"client_auto_delete\":true,\"client_auto_delete_timeout\":1,\"client_dns_server_ips\":[{\"address\":\"192.168.3.4\"}],\"client_idle_timeout\":600,\"client_ip_pool\":\"172.16.0.0/16\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn-server:r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"enable_split_tunneling\":true,\"health_state\":\"ok\",\"hostname\":\"a8506291.us-south.vpn-server.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-server\",\"port\":443,\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"protocol\":\"udp\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_server\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnServersOptions listVpnServersOptions = new ListVpnServersOptions.Builder()
      .name("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .build();

    List<VPNServer> allResults = new ArrayList<>();
    VpnServersPager pager = new VpnServersPager(vpcService, listVpnServersOptions);
    while (pager.hasNext()) {
      List<VPNServer> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpnServers operation using the VpnServersPager.getAll() method
  @Test
  public void testListVpnServersWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"vpn_servers\":[{\"certificate\":{\"crn\":\"crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"},\"client_authentication\":[{\"method\":\"certificate\",\"identity_provider\":{\"provider_type\":\"iam\"}}],\"client_auto_delete\":true,\"client_auto_delete_timeout\":1,\"client_dns_server_ips\":[{\"address\":\"192.168.3.4\"}],\"client_idle_timeout\":600,\"client_ip_pool\":\"172.16.0.0/16\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn-server:r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"enable_split_tunneling\":true,\"health_state\":\"ok\",\"hostname\":\"a8506291.us-south.vpn-server.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-server\",\"port\":443,\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"protocol\":\"udp\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_server\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"vpn_servers\":[{\"certificate\":{\"crn\":\"crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"},\"client_authentication\":[{\"method\":\"certificate\",\"identity_provider\":{\"provider_type\":\"iam\"}}],\"client_auto_delete\":true,\"client_auto_delete_timeout\":1,\"client_dns_server_ips\":[{\"address\":\"192.168.3.4\"}],\"client_idle_timeout\":600,\"client_ip_pool\":\"172.16.0.0/16\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpn-server:r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"enable_split_tunneling\":true,\"health_state\":\"ok\",\"hostname\":\"a8506291.us-south.vpn-server.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-server\",\"port\":443,\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"protocol\":\"udp\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_server\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnServersOptions listVpnServersOptions = new ListVpnServersOptions.Builder()
      .name("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .build();

    VpnServersPager pager = new VpnServersPager(vpcService, listVpnServersOptions);
    List<VPNServer> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpnServer operation with a valid options model parameter
  @Test
  public void testCreateVpnServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"certificate\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"client_authentication\": [{\"method\": \"certificate\", \"identity_provider\": {\"provider_type\": \"iam\"}}], \"client_auto_delete\": true, \"client_auto_delete_timeout\": 1, \"client_dns_server_ips\": [{\"address\": \"192.168.3.4\"}], \"client_idle_timeout\": 600, \"client_ip_pool\": \"172.16.0.0/16\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn-server:r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"enable_split_tunneling\": true, \"health_state\": \"ok\", \"hostname\": \"a8506291.us-south.vpn-server.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-server\", \"port\": 443, \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"protocol\": \"udp\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_server\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createVpnServerPath = "/vpn_servers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CertificateInstanceIdentityByCRN model
    CertificateInstanceIdentityByCRN certificateInstanceIdentityModel = new CertificateInstanceIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5")
      .build();

    // Construct an instance of the VPNServerAuthenticationByUsernameIdProviderByIAM model
    VPNServerAuthenticationByUsernameIdProviderByIAM vpnServerAuthenticationByUsernameIdProviderModel = new VPNServerAuthenticationByUsernameIdProviderByIAM.Builder()
      .providerType("iam")
      .build();

    // Construct an instance of the VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype model
    VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype vpnServerAuthenticationPrototypeModel = new VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype.Builder()
      .method("username")
      .identityProvider(vpnServerAuthenticationByUsernameIdProviderModel)
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the IP model
    IP ipModel = new IP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the CreateVpnServerOptions model
    CreateVpnServerOptions createVpnServerOptionsModel = new CreateVpnServerOptions.Builder()
      .certificate(certificateInstanceIdentityModel)
      .clientAuthentication(java.util.Arrays.asList(vpnServerAuthenticationPrototypeModel))
      .clientIpPool("172.16.0.0/16")
      .subnets(java.util.Arrays.asList(subnetIdentityModel))
      .clientDnsServerIps(java.util.Arrays.asList(ipModel))
      .clientIdleTimeout(Long.valueOf("600"))
      .enableSplitTunneling(false)
      .name("my-vpn-server")
      .port(Long.valueOf("443"))
      .protocol("udp")
      .resourceGroup(resourceGroupIdentityModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .build();

    // Invoke createVpnServer() with a valid options model and verify the result
    Response<VPNServer> response = vpcService.createVpnServer(createVpnServerOptionsModel).execute();
    assertNotNull(response);
    VPNServer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpnServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpnServer operation with and without retries enabled
  @Test
  public void testCreateVpnServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpnServerWOptions();

    vpcService.disableRetries();
    testCreateVpnServerWOptions();
  }

  // Test the createVpnServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpnServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpnServer(null).execute();
  }

  // Test the deleteVpnServer operation with a valid options model parameter
  @Test
  public void testDeleteVpnServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpnServerPath = "/vpn_servers/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpnServerOptions model
    DeleteVpnServerOptions deleteVpnServerOptionsModel = new DeleteVpnServerOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteVpnServer() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpnServer(deleteVpnServerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpnServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpnServer operation with and without retries enabled
  @Test
  public void testDeleteVpnServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpnServerWOptions();

    vpcService.disableRetries();
    testDeleteVpnServerWOptions();
  }

  // Test the deleteVpnServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpnServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpnServer(null).execute();
  }

  // Test the getVpnServer operation with a valid options model parameter
  @Test
  public void testGetVpnServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"certificate\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"client_authentication\": [{\"method\": \"certificate\", \"identity_provider\": {\"provider_type\": \"iam\"}}], \"client_auto_delete\": true, \"client_auto_delete_timeout\": 1, \"client_dns_server_ips\": [{\"address\": \"192.168.3.4\"}], \"client_idle_timeout\": 600, \"client_ip_pool\": \"172.16.0.0/16\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn-server:r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"enable_split_tunneling\": true, \"health_state\": \"ok\", \"hostname\": \"a8506291.us-south.vpn-server.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-server\", \"port\": 443, \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"protocol\": \"udp\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_server\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getVpnServerPath = "/vpn_servers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpnServerOptions model
    GetVpnServerOptions getVpnServerOptionsModel = new GetVpnServerOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpnServer() with a valid options model and verify the result
    Response<VPNServer> response = vpcService.getVpnServer(getVpnServerOptionsModel).execute();
    assertNotNull(response);
    VPNServer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpnServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpnServer operation with and without retries enabled
  @Test
  public void testGetVpnServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpnServerWOptions();

    vpcService.disableRetries();
    testGetVpnServerWOptions();
  }

  // Test the getVpnServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpnServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpnServer(null).execute();
  }

  // Test the updateVpnServer operation with a valid options model parameter
  @Test
  public void testUpdateVpnServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"certificate\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"client_authentication\": [{\"method\": \"certificate\", \"identity_provider\": {\"provider_type\": \"iam\"}}], \"client_auto_delete\": true, \"client_auto_delete_timeout\": 1, \"client_dns_server_ips\": [{\"address\": \"192.168.3.4\"}], \"client_idle_timeout\": 600, \"client_ip_pool\": \"172.16.0.0/16\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpn-server:r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"enable_split_tunneling\": true, \"health_state\": \"ok\", \"hostname\": \"a8506291.us-south.vpn-server.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"r006-d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-server\", \"port\": 443, \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"protocol\": \"udp\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_server\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateVpnServerPath = "/vpn_servers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the CertificateInstanceIdentityByCRN model
    CertificateInstanceIdentityByCRN certificateInstanceIdentityModel = new CertificateInstanceIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5")
      .build();

    // Construct an instance of the VPNServerAuthenticationByUsernameIdProviderByIAM model
    VPNServerAuthenticationByUsernameIdProviderByIAM vpnServerAuthenticationByUsernameIdProviderModel = new VPNServerAuthenticationByUsernameIdProviderByIAM.Builder()
      .providerType("iam")
      .build();

    // Construct an instance of the VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype model
    VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype vpnServerAuthenticationPrototypeModel = new VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype.Builder()
      .method("username")
      .identityProvider(vpnServerAuthenticationByUsernameIdProviderModel)
      .build();

    // Construct an instance of the IP model
    IP ipModel = new IP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the VPNServerPatch model
    VPNServerPatch vpnServerPatchModel = new VPNServerPatch.Builder()
      .certificate(certificateInstanceIdentityModel)
      .clientAuthentication(java.util.Arrays.asList(vpnServerAuthenticationPrototypeModel))
      .clientDnsServerIps(java.util.Arrays.asList(ipModel))
      .clientIdleTimeout(Long.valueOf("600"))
      .clientIpPool("172.16.0.0/16")
      .enableSplitTunneling(true)
      .name("my-vpn-server")
      .port(Long.valueOf("443"))
      .protocol("udp")
      .subnets(java.util.Arrays.asList(subnetIdentityModel))
      .build();
    Map<String, Object> vpnServerPatchModelAsPatch = vpnServerPatchModel.asPatch();

    // Construct an instance of the UpdateVpnServerOptions model
    UpdateVpnServerOptions updateVpnServerOptionsModel = new UpdateVpnServerOptions.Builder()
      .id("testString")
      .vpnServerPatch(vpnServerPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateVpnServer() with a valid options model and verify the result
    Response<VPNServer> response = vpcService.updateVpnServer(updateVpnServerOptionsModel).execute();
    assertNotNull(response);
    VPNServer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpnServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpnServer operation with and without retries enabled
  @Test
  public void testUpdateVpnServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpnServerWOptions();

    vpcService.disableRetries();
    testUpdateVpnServerWOptions();
  }

  // Test the updateVpnServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpnServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpnServer(null).execute();
  }

  // Test the getVpnServerClientConfiguration operation with a valid options model parameter
  @Test
  public void testGetVpnServerClientConfigurationWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "\"client\nproto udp\nremote a8506291.us-south.vpn-server.appdomain.cloud\nport 443\n\ndev tun\nnobind\n<ca>\n-----BEGIN CERTIFICATE-----\nxxxxxx\n-----END CERTIFICATE-----\n</ca>\"";
    String getVpnServerClientConfigurationPath = "/vpn_servers/testString/client_configuration";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "text/plain")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpnServerClientConfigurationOptions model
    GetVpnServerClientConfigurationOptions getVpnServerClientConfigurationOptionsModel = new GetVpnServerClientConfigurationOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpnServerClientConfiguration() with a valid options model and verify the result
    Response<String> response = vpcService.getVpnServerClientConfiguration(getVpnServerClientConfigurationOptionsModel).execute();
    assertNotNull(response);
    String responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpnServerClientConfigurationPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpnServerClientConfiguration operation with and without retries enabled
  @Test
  public void testGetVpnServerClientConfigurationWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpnServerClientConfigurationWOptions();

    vpcService.disableRetries();
    testGetVpnServerClientConfigurationWOptions();
  }

  // Test the getVpnServerClientConfiguration operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpnServerClientConfigurationNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpnServerClientConfiguration(null).execute();
  }

  // Test the listVpnServerClients operation with a valid options model parameter
  @Test
  public void testListVpnServerClientsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"clients\": [{\"client_ip\": {\"address\": \"192.168.3.4\"}, \"common_name\": \"commonName\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"disconnected_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/8e454ead-0db7-48ac-9a8b-2698d8c470a7/clients/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"remote_ip\": {\"address\": \"192.168.3.4\"}, \"remote_port\": 22, \"resource_type\": \"vpn_server_client\", \"status\": \"connected\", \"username\": \"username\"}], \"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531/clients?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531/clients?start=a5e812a2-62c0-4555-86a5-907106760c56&limit=20\"}, \"total_count\": 132}";
    String listVpnServerClientsPath = "/vpn_servers/testString/clients";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnServerClientsOptions model
    ListVpnServerClientsOptions listVpnServerClientsOptionsModel = new ListVpnServerClientsOptions.Builder()
      .vpnServerId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("created_at")
      .build();

    // Invoke listVpnServerClients() with a valid options model and verify the result
    Response<VPNServerClientCollection> response = vpcService.listVpnServerClients(listVpnServerClientsOptionsModel).execute();
    assertNotNull(response);
    VPNServerClientCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnServerClientsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "created_at");
  }

  // Test the listVpnServerClients operation with and without retries enabled
  @Test
  public void testListVpnServerClientsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnServerClientsWOptions();

    vpcService.disableRetries();
    testListVpnServerClientsWOptions();
  }

  // Test the listVpnServerClients operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpnServerClientsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpnServerClients(null).execute();
  }

  // Test the listVpnServerClients operation using the VpnServerClientsPager.getNext() method
  @Test
  public void testListVpnServerClientsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"clients\":[{\"client_ip\":{\"address\":\"192.168.3.4\"},\"common_name\":\"commonName\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"disconnected_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/8e454ead-0db7-48ac-9a8b-2698d8c470a7/clients/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"remote_ip\":{\"address\":\"192.168.3.4\"},\"remote_port\":22,\"resource_type\":\"vpn_server_client\",\"status\":\"connected\",\"username\":\"username\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"clients\":[{\"client_ip\":{\"address\":\"192.168.3.4\"},\"common_name\":\"commonName\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"disconnected_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/8e454ead-0db7-48ac-9a8b-2698d8c470a7/clients/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"remote_ip\":{\"address\":\"192.168.3.4\"},\"remote_port\":22,\"resource_type\":\"vpn_server_client\",\"status\":\"connected\",\"username\":\"username\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnServerClientsOptions listVpnServerClientsOptions = new ListVpnServerClientsOptions.Builder()
      .vpnServerId("testString")
      .limit(Long.valueOf("10"))
      .sort("created_at")
      .build();

    List<VPNServerClient> allResults = new ArrayList<>();
    VpnServerClientsPager pager = new VpnServerClientsPager(vpcService, listVpnServerClientsOptions);
    while (pager.hasNext()) {
      List<VPNServerClient> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpnServerClients operation using the VpnServerClientsPager.getAll() method
  @Test
  public void testListVpnServerClientsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"clients\":[{\"client_ip\":{\"address\":\"192.168.3.4\"},\"common_name\":\"commonName\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"disconnected_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/8e454ead-0db7-48ac-9a8b-2698d8c470a7/clients/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"remote_ip\":{\"address\":\"192.168.3.4\"},\"remote_port\":22,\"resource_type\":\"vpn_server_client\",\"status\":\"connected\",\"username\":\"username\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"clients\":[{\"client_ip\":{\"address\":\"192.168.3.4\"},\"common_name\":\"commonName\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"disconnected_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/8e454ead-0db7-48ac-9a8b-2698d8c470a7/clients/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"remote_ip\":{\"address\":\"192.168.3.4\"},\"remote_port\":22,\"resource_type\":\"vpn_server_client\",\"status\":\"connected\",\"username\":\"username\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnServerClientsOptions listVpnServerClientsOptions = new ListVpnServerClientsOptions.Builder()
      .vpnServerId("testString")
      .limit(Long.valueOf("10"))
      .sort("created_at")
      .build();

    VpnServerClientsPager pager = new VpnServerClientsPager(vpcService, listVpnServerClientsOptions);
    List<VPNServerClient> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the deleteVpnServerClient operation with a valid options model parameter
  @Test
  public void testDeleteVpnServerClientWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpnServerClientPath = "/vpn_servers/testString/clients/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpnServerClientOptions model
    DeleteVpnServerClientOptions deleteVpnServerClientOptionsModel = new DeleteVpnServerClientOptions.Builder()
      .vpnServerId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpnServerClient() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpnServerClient(deleteVpnServerClientOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpnServerClientPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpnServerClient operation with and without retries enabled
  @Test
  public void testDeleteVpnServerClientWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpnServerClientWOptions();

    vpcService.disableRetries();
    testDeleteVpnServerClientWOptions();
  }

  // Test the deleteVpnServerClient operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpnServerClientNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpnServerClient(null).execute();
  }

  // Test the getVpnServerClient operation with a valid options model parameter
  @Test
  public void testGetVpnServerClientWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"client_ip\": {\"address\": \"192.168.3.4\"}, \"common_name\": \"commonName\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"disconnected_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/8e454ead-0db7-48ac-9a8b-2698d8c470a7/clients/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"remote_ip\": {\"address\": \"192.168.3.4\"}, \"remote_port\": 22, \"resource_type\": \"vpn_server_client\", \"status\": \"connected\", \"username\": \"username\"}";
    String getVpnServerClientPath = "/vpn_servers/testString/clients/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpnServerClientOptions model
    GetVpnServerClientOptions getVpnServerClientOptionsModel = new GetVpnServerClientOptions.Builder()
      .vpnServerId("testString")
      .id("testString")
      .build();

    // Invoke getVpnServerClient() with a valid options model and verify the result
    Response<VPNServerClient> response = vpcService.getVpnServerClient(getVpnServerClientOptionsModel).execute();
    assertNotNull(response);
    VPNServerClient responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpnServerClientPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpnServerClient operation with and without retries enabled
  @Test
  public void testGetVpnServerClientWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpnServerClientWOptions();

    vpcService.disableRetries();
    testGetVpnServerClientWOptions();
  }

  // Test the getVpnServerClient operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpnServerClientNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpnServerClient(null).execute();
  }

  // Test the disconnectVpnClient operation with a valid options model parameter
  @Test
  public void testDisconnectVpnClientWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String disconnectVpnClientPath = "/vpn_servers/testString/clients/testString/disconnect";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DisconnectVpnClientOptions model
    DisconnectVpnClientOptions disconnectVpnClientOptionsModel = new DisconnectVpnClientOptions.Builder()
      .vpnServerId("testString")
      .id("testString")
      .build();

    // Invoke disconnectVpnClient() with a valid options model and verify the result
    Response<Void> response = vpcService.disconnectVpnClient(disconnectVpnClientOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, disconnectVpnClientPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the disconnectVpnClient operation with and without retries enabled
  @Test
  public void testDisconnectVpnClientWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDisconnectVpnClientWOptions();

    vpcService.disableRetries();
    testDisconnectVpnClientWOptions();
  }

  // Test the disconnectVpnClient operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDisconnectVpnClientNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.disconnectVpnClient(null).execute();
  }

  // Test the listVpnServerRoutes operation with a valid options model parameter
  @Test
  public void testListVpnServerRoutesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routes?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routes?start=a5e812a2-62c0-4555-86a5-907106760c56&limit=20\"}, \"routes\": [{\"action\": \"deliver\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-route-1\", \"resource_type\": \"vpn_server_route\"}], \"total_count\": 132}";
    String listVpnServerRoutesPath = "/vpn_servers/testString/routes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnServerRoutesOptions model
    ListVpnServerRoutesOptions listVpnServerRoutesOptionsModel = new ListVpnServerRoutesOptions.Builder()
      .vpnServerId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    // Invoke listVpnServerRoutes() with a valid options model and verify the result
    Response<VPNServerRouteCollection> response = vpcService.listVpnServerRoutes(listVpnServerRoutesOptionsModel).execute();
    assertNotNull(response);
    VPNServerRouteCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnServerRoutesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "name");
  }

  // Test the listVpnServerRoutes operation with and without retries enabled
  @Test
  public void testListVpnServerRoutesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnServerRoutesWOptions();

    vpcService.disableRetries();
    testListVpnServerRoutesWOptions();
  }

  // Test the listVpnServerRoutes operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpnServerRoutesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpnServerRoutes(null).execute();
  }

  // Test the listVpnServerRoutes operation using the VpnServerRoutesPager.getNext() method
  @Test
  public void testListVpnServerRoutesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routes\":[{\"action\":\"deliver\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-route-1\",\"resource_type\":\"vpn_server_route\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routes\":[{\"action\":\"deliver\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-route-1\",\"resource_type\":\"vpn_server_route\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnServerRoutesOptions listVpnServerRoutesOptions = new ListVpnServerRoutesOptions.Builder()
      .vpnServerId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    List<VPNServerRoute> allResults = new ArrayList<>();
    VpnServerRoutesPager pager = new VpnServerRoutesPager(vpcService, listVpnServerRoutesOptions);
    while (pager.hasNext()) {
      List<VPNServerRoute> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpnServerRoutes operation using the VpnServerRoutesPager.getAll() method
  @Test
  public void testListVpnServerRoutesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routes\":[{\"action\":\"deliver\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-route-1\",\"resource_type\":\"vpn_server_route\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routes\":[{\"action\":\"deliver\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-route-1\",\"resource_type\":\"vpn_server_route\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnServerRoutesOptions listVpnServerRoutesOptions = new ListVpnServerRoutesOptions.Builder()
      .vpnServerId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    VpnServerRoutesPager pager = new VpnServerRoutesPager(vpcService, listVpnServerRoutesOptions);
    List<VPNServerRoute> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpnServerRoute operation with a valid options model parameter
  @Test
  public void testCreateVpnServerRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"deliver\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-route-1\", \"resource_type\": \"vpn_server_route\"}";
    String createVpnServerRoutePath = "/vpn_servers/testString/routes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateVpnServerRouteOptions model
    CreateVpnServerRouteOptions createVpnServerRouteOptionsModel = new CreateVpnServerRouteOptions.Builder()
      .vpnServerId("testString")
      .destination("172.16.0.0/16")
      .action("deliver")
      .name("my-vpn-route-2")
      .build();

    // Invoke createVpnServerRoute() with a valid options model and verify the result
    Response<VPNServerRoute> response = vpcService.createVpnServerRoute(createVpnServerRouteOptionsModel).execute();
    assertNotNull(response);
    VPNServerRoute responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpnServerRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpnServerRoute operation with and without retries enabled
  @Test
  public void testCreateVpnServerRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpnServerRouteWOptions();

    vpcService.disableRetries();
    testCreateVpnServerRouteWOptions();
  }

  // Test the createVpnServerRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpnServerRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpnServerRoute(null).execute();
  }

  // Test the deleteVpnServerRoute operation with a valid options model parameter
  @Test
  public void testDeleteVpnServerRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpnServerRoutePath = "/vpn_servers/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpnServerRouteOptions model
    DeleteVpnServerRouteOptions deleteVpnServerRouteOptionsModel = new DeleteVpnServerRouteOptions.Builder()
      .vpnServerId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpnServerRoute() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpnServerRoute(deleteVpnServerRouteOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpnServerRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpnServerRoute operation with and without retries enabled
  @Test
  public void testDeleteVpnServerRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpnServerRouteWOptions();

    vpcService.disableRetries();
    testDeleteVpnServerRouteWOptions();
  }

  // Test the deleteVpnServerRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpnServerRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpnServerRoute(null).execute();
  }

  // Test the getVpnServerRoute operation with a valid options model parameter
  @Test
  public void testGetVpnServerRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"deliver\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-route-1\", \"resource_type\": \"vpn_server_route\"}";
    String getVpnServerRoutePath = "/vpn_servers/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpnServerRouteOptions model
    GetVpnServerRouteOptions getVpnServerRouteOptionsModel = new GetVpnServerRouteOptions.Builder()
      .vpnServerId("testString")
      .id("testString")
      .build();

    // Invoke getVpnServerRoute() with a valid options model and verify the result
    Response<VPNServerRoute> response = vpcService.getVpnServerRoute(getVpnServerRouteOptionsModel).execute();
    assertNotNull(response);
    VPNServerRoute responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpnServerRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpnServerRoute operation with and without retries enabled
  @Test
  public void testGetVpnServerRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpnServerRouteWOptions();

    vpcService.disableRetries();
    testGetVpnServerRouteWOptions();
  }

  // Test the getVpnServerRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpnServerRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpnServerRoute(null).execute();
  }

  // Test the updateVpnServerRoute operation with a valid options model parameter
  @Test
  public void testUpdateVpnServerRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"deliver\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-route-1\", \"resource_type\": \"vpn_server_route\"}";
    String updateVpnServerRoutePath = "/vpn_servers/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VPNServerRoutePatch model
    VPNServerRoutePatch vpnServerRoutePatchModel = new VPNServerRoutePatch.Builder()
      .name("my-vpn-route-2")
      .build();
    Map<String, Object> vpnServerRoutePatchModelAsPatch = vpnServerRoutePatchModel.asPatch();

    // Construct an instance of the UpdateVpnServerRouteOptions model
    UpdateVpnServerRouteOptions updateVpnServerRouteOptionsModel = new UpdateVpnServerRouteOptions.Builder()
      .vpnServerId("testString")
      .id("testString")
      .vpnServerRoutePatch(vpnServerRoutePatchModelAsPatch)
      .build();

    // Invoke updateVpnServerRoute() with a valid options model and verify the result
    Response<VPNServerRoute> response = vpcService.updateVpnServerRoute(updateVpnServerRouteOptionsModel).execute();
    assertNotNull(response);
    VPNServerRoute responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpnServerRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpnServerRoute operation with and without retries enabled
  @Test
  public void testUpdateVpnServerRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpnServerRouteWOptions();

    vpcService.disableRetries();
    testUpdateVpnServerRouteWOptions();
  }

  // Test the updateVpnServerRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpnServerRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpnServerRoute(null).execute();
  }

  // Test the listLoadBalancerProfiles operation with a valid options model parameter
  @Test
  public void testListLoadBalancerProfilesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"profiles\": [{\"family\": \"network\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"logging_supported\": {\"type\": \"fixed\", \"value\": [\"datapath\"]}, \"name\": \"network-fixed\", \"route_mode_supported\": {\"type\": \"fixed\", \"value\": true}, \"security_groups_supported\": {\"type\": \"fixed\", \"value\": true}, \"udp_supported\": {\"type\": \"fixed\", \"value\": true}}], \"total_count\": 132}";
    String listLoadBalancerProfilesPath = "/load_balancer/profiles";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancerProfilesOptions model
    ListLoadBalancerProfilesOptions listLoadBalancerProfilesOptionsModel = new ListLoadBalancerProfilesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listLoadBalancerProfiles() with a valid options model and verify the result
    Response<LoadBalancerProfileCollection> response = vpcService.listLoadBalancerProfiles(listLoadBalancerProfilesOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerProfileCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancerProfilesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listLoadBalancerProfiles operation with and without retries enabled
  @Test
  public void testListLoadBalancerProfilesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancerProfilesWOptions();

    vpcService.disableRetries();
    testListLoadBalancerProfilesWOptions();
  }

  // Test the listLoadBalancerProfiles operation using the LoadBalancerProfilesPager.getNext() method
  @Test
  public void testListLoadBalancerProfilesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"family\":\"network\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"logging_supported\":{\"type\":\"fixed\",\"value\":[\"datapath\"]},\"name\":\"network-fixed\",\"route_mode_supported\":{\"type\":\"fixed\",\"value\":true},\"security_groups_supported\":{\"type\":\"fixed\",\"value\":true},\"udp_supported\":{\"type\":\"fixed\",\"value\":true}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"family\":\"network\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"logging_supported\":{\"type\":\"fixed\",\"value\":[\"datapath\"]},\"name\":\"network-fixed\",\"route_mode_supported\":{\"type\":\"fixed\",\"value\":true},\"security_groups_supported\":{\"type\":\"fixed\",\"value\":true},\"udp_supported\":{\"type\":\"fixed\",\"value\":true}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListLoadBalancerProfilesOptions listLoadBalancerProfilesOptions = new ListLoadBalancerProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<LoadBalancerProfile> allResults = new ArrayList<>();
    LoadBalancerProfilesPager pager = new LoadBalancerProfilesPager(vpcService, listLoadBalancerProfilesOptions);
    while (pager.hasNext()) {
      List<LoadBalancerProfile> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listLoadBalancerProfiles operation using the LoadBalancerProfilesPager.getAll() method
  @Test
  public void testListLoadBalancerProfilesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"family\":\"network\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"logging_supported\":{\"type\":\"fixed\",\"value\":[\"datapath\"]},\"name\":\"network-fixed\",\"route_mode_supported\":{\"type\":\"fixed\",\"value\":true},\"security_groups_supported\":{\"type\":\"fixed\",\"value\":true},\"udp_supported\":{\"type\":\"fixed\",\"value\":true}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"family\":\"network\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"logging_supported\":{\"type\":\"fixed\",\"value\":[\"datapath\"]},\"name\":\"network-fixed\",\"route_mode_supported\":{\"type\":\"fixed\",\"value\":true},\"security_groups_supported\":{\"type\":\"fixed\",\"value\":true},\"udp_supported\":{\"type\":\"fixed\",\"value\":true}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListLoadBalancerProfilesOptions listLoadBalancerProfilesOptions = new ListLoadBalancerProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    LoadBalancerProfilesPager pager = new LoadBalancerProfilesPager(vpcService, listLoadBalancerProfilesOptions);
    List<LoadBalancerProfile> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getLoadBalancerProfile operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerProfileWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"family\": \"network\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"logging_supported\": {\"type\": \"fixed\", \"value\": [\"datapath\"]}, \"name\": \"network-fixed\", \"route_mode_supported\": {\"type\": \"fixed\", \"value\": true}, \"security_groups_supported\": {\"type\": \"fixed\", \"value\": true}, \"udp_supported\": {\"type\": \"fixed\", \"value\": true}}";
    String getLoadBalancerProfilePath = "/load_balancer/profiles/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerProfileOptions model
    GetLoadBalancerProfileOptions getLoadBalancerProfileOptionsModel = new GetLoadBalancerProfileOptions.Builder()
      .name("testString")
      .build();

    // Invoke getLoadBalancerProfile() with a valid options model and verify the result
    Response<LoadBalancerProfile> response = vpcService.getLoadBalancerProfile(getLoadBalancerProfileOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerProfile responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerProfilePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerProfile operation with and without retries enabled
  @Test
  public void testGetLoadBalancerProfileWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerProfileWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerProfileWOptions();
  }

  // Test the getLoadBalancerProfile operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerProfileNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerProfile(null).execute();
  }

  // Test the listLoadBalancers operation with a valid options model parameter
  @Test
  public void testListLoadBalancersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers?limit=20\"}, \"limit\": 20, \"load_balancers\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"hostname\": \"6b88d615-us-south.lb.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"is_public\": true, \"listeners\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}], \"logging\": {\"datapath\": {\"active\": true}}, \"name\": \"my-load-balancer\", \"operating_status\": \"offline\", \"pools\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}], \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"profile\": {\"family\": \"network\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"name\": \"network-fixed\"}, \"provisioning_status\": \"active\", \"public_ips\": [{\"address\": \"192.168.3.4\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"load_balancer\", \"route_mode\": true, \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"security_groups_supported\": false, \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"udp_supported\": true}], \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20\"}, \"total_count\": 132}";
    String listLoadBalancersPath = "/load_balancers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancersOptions model
    ListLoadBalancersOptions listLoadBalancersOptionsModel = new ListLoadBalancersOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listLoadBalancers() with a valid options model and verify the result
    Response<LoadBalancerCollection> response = vpcService.listLoadBalancers(listLoadBalancersOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listLoadBalancers operation with and without retries enabled
  @Test
  public void testListLoadBalancersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancersWOptions();

    vpcService.disableRetries();
    testListLoadBalancersWOptions();
  }

  // Test the listLoadBalancers operation using the LoadBalancersPager.getNext() method
  @Test
  public void testListLoadBalancersWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"load_balancers\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"hostname\":\"6b88d615-us-south.lb.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"is_public\":true,\"listeners\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\"}],\"logging\":{\"datapath\":{\"active\":true}},\"name\":\"my-load-balancer\",\"operating_status\":\"offline\",\"pools\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"}],\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"profile\":{\"family\":\"network\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"name\":\"network-fixed\"},\"provisioning_status\":\"active\",\"public_ips\":[{\"address\":\"192.168.3.4\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"load_balancer\",\"route_mode\":true,\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"security_groups_supported\":false,\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"udp_supported\":true}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"load_balancers\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"hostname\":\"6b88d615-us-south.lb.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"is_public\":true,\"listeners\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\"}],\"logging\":{\"datapath\":{\"active\":true}},\"name\":\"my-load-balancer\",\"operating_status\":\"offline\",\"pools\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"}],\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"profile\":{\"family\":\"network\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"name\":\"network-fixed\"},\"provisioning_status\":\"active\",\"public_ips\":[{\"address\":\"192.168.3.4\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"load_balancer\",\"route_mode\":true,\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"security_groups_supported\":false,\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"udp_supported\":true}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListLoadBalancersOptions listLoadBalancersOptions = new ListLoadBalancersOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<LoadBalancer> allResults = new ArrayList<>();
    LoadBalancersPager pager = new LoadBalancersPager(vpcService, listLoadBalancersOptions);
    while (pager.hasNext()) {
      List<LoadBalancer> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listLoadBalancers operation using the LoadBalancersPager.getAll() method
  @Test
  public void testListLoadBalancersWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"load_balancers\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"hostname\":\"6b88d615-us-south.lb.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"is_public\":true,\"listeners\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\"}],\"logging\":{\"datapath\":{\"active\":true}},\"name\":\"my-load-balancer\",\"operating_status\":\"offline\",\"pools\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"}],\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"profile\":{\"family\":\"network\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"name\":\"network-fixed\"},\"provisioning_status\":\"active\",\"public_ips\":[{\"address\":\"192.168.3.4\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"load_balancer\",\"route_mode\":true,\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"security_groups_supported\":false,\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"udp_supported\":true}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"load_balancers\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"hostname\":\"6b88d615-us-south.lb.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"is_public\":true,\"listeners\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\"}],\"logging\":{\"datapath\":{\"active\":true}},\"name\":\"my-load-balancer\",\"operating_status\":\"offline\",\"pools\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"}],\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"profile\":{\"family\":\"network\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"name\":\"network-fixed\"},\"provisioning_status\":\"active\",\"public_ips\":[{\"address\":\"192.168.3.4\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"load_balancer\",\"route_mode\":true,\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"security_groups_supported\":false,\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"udp_supported\":true}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListLoadBalancersOptions listLoadBalancersOptions = new ListLoadBalancersOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    LoadBalancersPager pager = new LoadBalancersPager(vpcService, listLoadBalancersOptions);
    List<LoadBalancer> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createLoadBalancer operation with a valid options model parameter
  @Test
  public void testCreateLoadBalancerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"hostname\": \"6b88d615-us-south.lb.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"is_public\": true, \"listeners\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}], \"logging\": {\"datapath\": {\"active\": true}}, \"name\": \"my-load-balancer\", \"operating_status\": \"offline\", \"pools\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}], \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"profile\": {\"family\": \"network\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"name\": \"network-fixed\"}, \"provisioning_status\": \"active\", \"public_ips\": [{\"address\": \"192.168.3.4\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"load_balancer\", \"route_mode\": true, \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"security_groups_supported\": false, \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"udp_supported\": true}";
    String createLoadBalancerPath = "/load_balancers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the CertificateInstanceIdentityByCRN model
    CertificateInstanceIdentityByCRN certificateInstanceIdentityModel = new CertificateInstanceIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5")
      .build();

    // Construct an instance of the LoadBalancerPoolIdentityByName model
    LoadBalancerPoolIdentityByName loadBalancerPoolIdentityByNameModel = new LoadBalancerPoolIdentityByName.Builder()
      .name("my-load-balancer-pool")
      .build();

    // Construct an instance of the LoadBalancerListenerIdentityById model
    LoadBalancerListenerIdentityById loadBalancerListenerIdentityModel = new LoadBalancerListenerIdentityById.Builder()
      .id("70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerListenerHTTPSRedirectPrototype model
    LoadBalancerListenerHTTPSRedirectPrototype loadBalancerListenerHttpsRedirectPrototypeModel = new LoadBalancerListenerHTTPSRedirectPrototype.Builder()
      .httpStatusCode(Long.valueOf("301"))
      .listener(loadBalancerListenerIdentityModel)
      .uri("/example?doc=get")
      .build();

    // Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
    LoadBalancerListenerPrototypeLoadBalancerContext loadBalancerListenerPrototypeLoadBalancerContextModel = new LoadBalancerListenerPrototypeLoadBalancerContext.Builder()
      .acceptProxyProtocol(true)
      .certificateInstance(certificateInstanceIdentityModel)
      .connectionLimit(Long.valueOf("2000"))
      .defaultPool(loadBalancerPoolIdentityByNameModel)
      .httpsRedirect(loadBalancerListenerHttpsRedirectPrototypeModel)
      .port(Long.valueOf("443"))
      .portMax(Long.valueOf("499"))
      .portMin(Long.valueOf("443"))
      .protocol("http")
      .build();

    // Construct an instance of the LoadBalancerLoggingDatapath model
    LoadBalancerLoggingDatapath loadBalancerLoggingDatapathModel = new LoadBalancerLoggingDatapath.Builder()
      .active(true)
      .build();

    // Construct an instance of the LoadBalancerLogging model
    LoadBalancerLogging loadBalancerLoggingModel = new LoadBalancerLogging.Builder()
      .datapath(loadBalancerLoggingDatapathModel)
      .build();

    // Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
    LoadBalancerPoolHealthMonitorPrototype loadBalancerPoolHealthMonitorPrototypeModel = new LoadBalancerPoolHealthMonitorPrototype.Builder()
      .delay(Long.valueOf("5"))
      .maxRetries(Long.valueOf("2"))
      .port(Long.valueOf("22"))
      .timeout(Long.valueOf("2"))
      .type("http")
      .urlPath("/")
      .build();

    // Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
    LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById loadBalancerPoolMemberTargetPrototypeModel = new LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById.Builder()
      .id("1e09281b-f177-46fb-baf1-bc152b2e391a")
      .build();

    // Construct an instance of the LoadBalancerPoolMemberPrototype model
    LoadBalancerPoolMemberPrototype loadBalancerPoolMemberPrototypeModel = new LoadBalancerPoolMemberPrototype.Builder()
      .port(Long.valueOf("80"))
      .target(loadBalancerPoolMemberTargetPrototypeModel)
      .weight(Long.valueOf("50"))
      .build();

    // Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
    LoadBalancerPoolSessionPersistencePrototype loadBalancerPoolSessionPersistencePrototypeModel = new LoadBalancerPoolSessionPersistencePrototype.Builder()
      .cookieName("my-cookie-name")
      .type("app_cookie")
      .build();

    // Construct an instance of the LoadBalancerPoolPrototype model
    LoadBalancerPoolPrototype loadBalancerPoolPrototypeModel = new LoadBalancerPoolPrototype.Builder()
      .algorithm("least_connections")
      .healthMonitor(loadBalancerPoolHealthMonitorPrototypeModel)
      .members(java.util.Arrays.asList(loadBalancerPoolMemberPrototypeModel))
      .name("my-load-balancer-pool")
      .protocol("http")
      .proxyProtocol("disabled")
      .sessionPersistence(loadBalancerPoolSessionPersistencePrototypeModel)
      .build();

    // Construct an instance of the LoadBalancerProfileIdentityByName model
    LoadBalancerProfileIdentityByName loadBalancerProfileIdentityModel = new LoadBalancerProfileIdentityByName.Builder()
      .name("network-fixed")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the CreateLoadBalancerOptions model
    CreateLoadBalancerOptions createLoadBalancerOptionsModel = new CreateLoadBalancerOptions.Builder()
      .isPublic(true)
      .subnets(java.util.Arrays.asList(subnetIdentityModel))
      .listeners(java.util.Arrays.asList(loadBalancerListenerPrototypeLoadBalancerContextModel))
      .logging(loadBalancerLoggingModel)
      .name("my-load-balancer")
      .pools(java.util.Arrays.asList(loadBalancerPoolPrototypeModel))
      .profile(loadBalancerProfileIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .routeMode(true)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .build();

    // Invoke createLoadBalancer() with a valid options model and verify the result
    Response<LoadBalancer> response = vpcService.createLoadBalancer(createLoadBalancerOptionsModel).execute();
    assertNotNull(response);
    LoadBalancer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createLoadBalancerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createLoadBalancer operation with and without retries enabled
  @Test
  public void testCreateLoadBalancerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateLoadBalancerWOptions();

    vpcService.disableRetries();
    testCreateLoadBalancerWOptions();
  }

  // Test the createLoadBalancer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateLoadBalancerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createLoadBalancer(null).execute();
  }

  // Test the deleteLoadBalancer operation with a valid options model parameter
  @Test
  public void testDeleteLoadBalancerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteLoadBalancerPath = "/load_balancers/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteLoadBalancerOptions model
    DeleteLoadBalancerOptions deleteLoadBalancerOptionsModel = new DeleteLoadBalancerOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteLoadBalancer() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteLoadBalancer(deleteLoadBalancerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteLoadBalancerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteLoadBalancer operation with and without retries enabled
  @Test
  public void testDeleteLoadBalancerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteLoadBalancerWOptions();

    vpcService.disableRetries();
    testDeleteLoadBalancerWOptions();
  }

  // Test the deleteLoadBalancer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteLoadBalancerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteLoadBalancer(null).execute();
  }

  // Test the getLoadBalancer operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"hostname\": \"6b88d615-us-south.lb.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"is_public\": true, \"listeners\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}], \"logging\": {\"datapath\": {\"active\": true}}, \"name\": \"my-load-balancer\", \"operating_status\": \"offline\", \"pools\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}], \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"profile\": {\"family\": \"network\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"name\": \"network-fixed\"}, \"provisioning_status\": \"active\", \"public_ips\": [{\"address\": \"192.168.3.4\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"load_balancer\", \"route_mode\": true, \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"security_groups_supported\": false, \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"udp_supported\": true}";
    String getLoadBalancerPath = "/load_balancers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerOptions model
    GetLoadBalancerOptions getLoadBalancerOptionsModel = new GetLoadBalancerOptions.Builder()
      .id("testString")
      .build();

    // Invoke getLoadBalancer() with a valid options model and verify the result
    Response<LoadBalancer> response = vpcService.getLoadBalancer(getLoadBalancerOptionsModel).execute();
    assertNotNull(response);
    LoadBalancer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancer operation with and without retries enabled
  @Test
  public void testGetLoadBalancerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerWOptions();
  }

  // Test the getLoadBalancer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancer(null).execute();
  }

  // Test the updateLoadBalancer operation with a valid options model parameter
  @Test
  public void testUpdateLoadBalancerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"hostname\": \"6b88d615-us-south.lb.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"is_public\": true, \"listeners\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}], \"logging\": {\"datapath\": {\"active\": true}}, \"name\": \"my-load-balancer\", \"operating_status\": \"offline\", \"pools\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}], \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"profile\": {\"family\": \"network\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"name\": \"network-fixed\"}, \"provisioning_status\": \"active\", \"public_ips\": [{\"address\": \"192.168.3.4\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"load_balancer\", \"route_mode\": true, \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"security_groups_supported\": false, \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"udp_supported\": true}";
    String updateLoadBalancerPath = "/load_balancers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerLoggingDatapath model
    LoadBalancerLoggingDatapath loadBalancerLoggingDatapathModel = new LoadBalancerLoggingDatapath.Builder()
      .active(true)
      .build();

    // Construct an instance of the LoadBalancerLogging model
    LoadBalancerLogging loadBalancerLoggingModel = new LoadBalancerLogging.Builder()
      .datapath(loadBalancerLoggingDatapathModel)
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the LoadBalancerPatch model
    LoadBalancerPatch loadBalancerPatchModel = new LoadBalancerPatch.Builder()
      .logging(loadBalancerLoggingModel)
      .name("my-load-balancer")
      .subnets(java.util.Arrays.asList(subnetIdentityModel))
      .build();
    Map<String, Object> loadBalancerPatchModelAsPatch = loadBalancerPatchModel.asPatch();

    // Construct an instance of the UpdateLoadBalancerOptions model
    UpdateLoadBalancerOptions updateLoadBalancerOptionsModel = new UpdateLoadBalancerOptions.Builder()
      .id("testString")
      .loadBalancerPatch(loadBalancerPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateLoadBalancer() with a valid options model and verify the result
    Response<LoadBalancer> response = vpcService.updateLoadBalancer(updateLoadBalancerOptionsModel).execute();
    assertNotNull(response);
    LoadBalancer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateLoadBalancerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateLoadBalancer operation with and without retries enabled
  @Test
  public void testUpdateLoadBalancerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateLoadBalancerWOptions();

    vpcService.disableRetries();
    testUpdateLoadBalancerWOptions();
  }

  // Test the updateLoadBalancer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateLoadBalancerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateLoadBalancer(null).execute();
  }

  // Test the getLoadBalancerStatistics operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerStatisticsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active_connections\": 797, \"connection_rate\": 91.121, \"data_processed_this_month\": 10093173145, \"throughput\": 167.278}";
    String getLoadBalancerStatisticsPath = "/load_balancers/testString/statistics";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerStatisticsOptions model
    GetLoadBalancerStatisticsOptions getLoadBalancerStatisticsOptionsModel = new GetLoadBalancerStatisticsOptions.Builder()
      .id("testString")
      .build();

    // Invoke getLoadBalancerStatistics() with a valid options model and verify the result
    Response<LoadBalancerStatistics> response = vpcService.getLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerStatistics responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerStatisticsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerStatistics operation with and without retries enabled
  @Test
  public void testGetLoadBalancerStatisticsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerStatisticsWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerStatisticsWOptions();
  }

  // Test the getLoadBalancerStatistics operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerStatisticsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerStatistics(null).execute();
  }

  // Test the listLoadBalancerListeners operation with a valid options model parameter
  @Test
  public void testListLoadBalancerListenersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"listeners\": [{\"accept_proxy_protocol\": true, \"certificate_instance\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"connection_limit\": 2000, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"default_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\", \"https_redirect\": {\"http_status_code\": 301, \"listener\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}, \"uri\": \"/example?doc=get\"}, \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"anyValue\"}], \"port\": 443, \"port_max\": 499, \"port_min\": 443, \"protocol\": \"http\", \"provisioning_status\": \"active\"}]}";
    String listLoadBalancerListenersPath = "/load_balancers/testString/listeners";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancerListenersOptions model
    ListLoadBalancerListenersOptions listLoadBalancerListenersOptionsModel = new ListLoadBalancerListenersOptions.Builder()
      .loadBalancerId("testString")
      .build();

    // Invoke listLoadBalancerListeners() with a valid options model and verify the result
    Response<LoadBalancerListenerCollection> response = vpcService.listLoadBalancerListeners(listLoadBalancerListenersOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancerListenersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listLoadBalancerListeners operation with and without retries enabled
  @Test
  public void testListLoadBalancerListenersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancerListenersWOptions();

    vpcService.disableRetries();
    testListLoadBalancerListenersWOptions();
  }

  // Test the listLoadBalancerListeners operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListLoadBalancerListenersNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listLoadBalancerListeners(null).execute();
  }

  // Test the createLoadBalancerListener operation with a valid options model parameter
  @Test
  public void testCreateLoadBalancerListenerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_proxy_protocol\": true, \"certificate_instance\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"connection_limit\": 2000, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"default_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\", \"https_redirect\": {\"http_status_code\": 301, \"listener\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}, \"uri\": \"/example?doc=get\"}, \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"anyValue\"}], \"port\": 443, \"port_max\": 499, \"port_min\": 443, \"protocol\": \"http\", \"provisioning_status\": \"active\"}";
    String createLoadBalancerListenerPath = "/load_balancers/testString/listeners";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CertificateInstanceIdentityByCRN model
    CertificateInstanceIdentityByCRN certificateInstanceIdentityModel = new CertificateInstanceIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5")
      .build();

    // Construct an instance of the LoadBalancerPoolIdentityById model
    LoadBalancerPoolIdentityById loadBalancerPoolIdentityModel = new LoadBalancerPoolIdentityById.Builder()
      .id("70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerListenerIdentityById model
    LoadBalancerListenerIdentityById loadBalancerListenerIdentityModel = new LoadBalancerListenerIdentityById.Builder()
      .id("70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerListenerHTTPSRedirectPrototype model
    LoadBalancerListenerHTTPSRedirectPrototype loadBalancerListenerHttpsRedirectPrototypeModel = new LoadBalancerListenerHTTPSRedirectPrototype.Builder()
      .httpStatusCode(Long.valueOf("301"))
      .listener(loadBalancerListenerIdentityModel)
      .uri("/example?doc=get")
      .build();

    // Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
    LoadBalancerListenerPolicyRulePrototype loadBalancerListenerPolicyRulePrototypeModel = new LoadBalancerListenerPolicyRulePrototype.Builder()
      .condition("contains")
      .field("MY-APP-HEADER")
      .type("body")
      .value("testString")
      .build();

    // Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
    LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityById loadBalancerListenerPolicyTargetPrototypeModel = new LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.Builder()
      .id("70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerListenerPolicyPrototype model
    LoadBalancerListenerPolicyPrototype loadBalancerListenerPolicyPrototypeModel = new LoadBalancerListenerPolicyPrototype.Builder()
      .action("forward")
      .name("my-policy")
      .priority(Long.valueOf("5"))
      .rules(java.util.Arrays.asList(loadBalancerListenerPolicyRulePrototypeModel))
      .target(loadBalancerListenerPolicyTargetPrototypeModel)
      .build();

    // Construct an instance of the CreateLoadBalancerListenerOptions model
    CreateLoadBalancerListenerOptions createLoadBalancerListenerOptionsModel = new CreateLoadBalancerListenerOptions.Builder()
      .loadBalancerId("testString")
      .protocol("http")
      .acceptProxyProtocol(true)
      .certificateInstance(certificateInstanceIdentityModel)
      .connectionLimit(Long.valueOf("2000"))
      .defaultPool(loadBalancerPoolIdentityModel)
      .httpsRedirect(loadBalancerListenerHttpsRedirectPrototypeModel)
      .policies(java.util.Arrays.asList(loadBalancerListenerPolicyPrototypeModel))
      .port(Long.valueOf("443"))
      .portMax(Long.valueOf("499"))
      .portMin(Long.valueOf("443"))
      .build();

    // Invoke createLoadBalancerListener() with a valid options model and verify the result
    Response<LoadBalancerListener> response = vpcService.createLoadBalancerListener(createLoadBalancerListenerOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListener responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createLoadBalancerListenerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createLoadBalancerListener operation with and without retries enabled
  @Test
  public void testCreateLoadBalancerListenerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateLoadBalancerListenerWOptions();

    vpcService.disableRetries();
    testCreateLoadBalancerListenerWOptions();
  }

  // Test the createLoadBalancerListener operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateLoadBalancerListenerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createLoadBalancerListener(null).execute();
  }

  // Test the deleteLoadBalancerListener operation with a valid options model parameter
  @Test
  public void testDeleteLoadBalancerListenerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteLoadBalancerListenerPath = "/load_balancers/testString/listeners/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteLoadBalancerListenerOptions model
    DeleteLoadBalancerListenerOptions deleteLoadBalancerListenerOptionsModel = new DeleteLoadBalancerListenerOptions.Builder()
      .loadBalancerId("testString")
      .id("testString")
      .build();

    // Invoke deleteLoadBalancerListener() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteLoadBalancerListener(deleteLoadBalancerListenerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteLoadBalancerListenerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteLoadBalancerListener operation with and without retries enabled
  @Test
  public void testDeleteLoadBalancerListenerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteLoadBalancerListenerWOptions();

    vpcService.disableRetries();
    testDeleteLoadBalancerListenerWOptions();
  }

  // Test the deleteLoadBalancerListener operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteLoadBalancerListenerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteLoadBalancerListener(null).execute();
  }

  // Test the getLoadBalancerListener operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerListenerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_proxy_protocol\": true, \"certificate_instance\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"connection_limit\": 2000, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"default_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\", \"https_redirect\": {\"http_status_code\": 301, \"listener\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}, \"uri\": \"/example?doc=get\"}, \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"anyValue\"}], \"port\": 443, \"port_max\": 499, \"port_min\": 443, \"protocol\": \"http\", \"provisioning_status\": \"active\"}";
    String getLoadBalancerListenerPath = "/load_balancers/testString/listeners/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerListenerOptions model
    GetLoadBalancerListenerOptions getLoadBalancerListenerOptionsModel = new GetLoadBalancerListenerOptions.Builder()
      .loadBalancerId("testString")
      .id("testString")
      .build();

    // Invoke getLoadBalancerListener() with a valid options model and verify the result
    Response<LoadBalancerListener> response = vpcService.getLoadBalancerListener(getLoadBalancerListenerOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListener responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerListenerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerListener operation with and without retries enabled
  @Test
  public void testGetLoadBalancerListenerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerListenerWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerListenerWOptions();
  }

  // Test the getLoadBalancerListener operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerListenerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerListener(null).execute();
  }

  // Test the updateLoadBalancerListener operation with a valid options model parameter
  @Test
  public void testUpdateLoadBalancerListenerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_proxy_protocol\": true, \"certificate_instance\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"connection_limit\": 2000, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"default_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\", \"https_redirect\": {\"http_status_code\": 301, \"listener\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}, \"uri\": \"/example?doc=get\"}, \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"anyValue\"}], \"port\": 443, \"port_max\": 499, \"port_min\": 443, \"protocol\": \"http\", \"provisioning_status\": \"active\"}";
    String updateLoadBalancerListenerPath = "/load_balancers/testString/listeners/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the CertificateInstanceIdentityByCRN model
    CertificateInstanceIdentityByCRN certificateInstanceIdentityModel = new CertificateInstanceIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:secrets-manager:us-south:a/123456:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5")
      .build();

    // Construct an instance of the LoadBalancerPoolIdentityById model
    LoadBalancerPoolIdentityById loadBalancerPoolIdentityModel = new LoadBalancerPoolIdentityById.Builder()
      .id("70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerListenerIdentityById model
    LoadBalancerListenerIdentityById loadBalancerListenerIdentityModel = new LoadBalancerListenerIdentityById.Builder()
      .id("70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerListenerHTTPSRedirectPatch model
    LoadBalancerListenerHTTPSRedirectPatch loadBalancerListenerHttpsRedirectPatchModel = new LoadBalancerListenerHTTPSRedirectPatch.Builder()
      .httpStatusCode(Long.valueOf("301"))
      .listener(loadBalancerListenerIdentityModel)
      .uri("/example?doc=get")
      .build();

    // Construct an instance of the LoadBalancerListenerPatch model
    LoadBalancerListenerPatch loadBalancerListenerPatchModel = new LoadBalancerListenerPatch.Builder()
      .acceptProxyProtocol(true)
      .certificateInstance(certificateInstanceIdentityModel)
      .connectionLimit(Long.valueOf("2000"))
      .defaultPool(loadBalancerPoolIdentityModel)
      .httpsRedirect(loadBalancerListenerHttpsRedirectPatchModel)
      .port(Long.valueOf("443"))
      .portMax(Long.valueOf("499"))
      .portMin(Long.valueOf("443"))
      .protocol("http")
      .build();
    Map<String, Object> loadBalancerListenerPatchModelAsPatch = loadBalancerListenerPatchModel.asPatch();

    // Construct an instance of the UpdateLoadBalancerListenerOptions model
    UpdateLoadBalancerListenerOptions updateLoadBalancerListenerOptionsModel = new UpdateLoadBalancerListenerOptions.Builder()
      .loadBalancerId("testString")
      .id("testString")
      .loadBalancerListenerPatch(loadBalancerListenerPatchModelAsPatch)
      .build();

    // Invoke updateLoadBalancerListener() with a valid options model and verify the result
    Response<LoadBalancerListener> response = vpcService.updateLoadBalancerListener(updateLoadBalancerListenerOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListener responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateLoadBalancerListenerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateLoadBalancerListener operation with and without retries enabled
  @Test
  public void testUpdateLoadBalancerListenerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateLoadBalancerListenerWOptions();

    vpcService.disableRetries();
    testUpdateLoadBalancerListenerWOptions();
  }

  // Test the updateLoadBalancerListener operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateLoadBalancerListenerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateLoadBalancerListener(null).execute();
  }

  // Test the listLoadBalancerListenerPolicies operation with a valid options model parameter
  @Test
  public void testListLoadBalancerListenerPoliciesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"policies\": [{\"action\": \"forward\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-policy\", \"priority\": 5, \"provisioning_status\": \"active\", \"rules\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}], \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}}]}";
    String listLoadBalancerListenerPoliciesPath = "/load_balancers/testString/listeners/testString/policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
    ListLoadBalancerListenerPoliciesOptions listLoadBalancerListenerPoliciesOptionsModel = new ListLoadBalancerListenerPoliciesOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .build();

    // Invoke listLoadBalancerListenerPolicies() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicyCollection> response = vpcService.listLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancerListenerPoliciesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listLoadBalancerListenerPolicies operation with and without retries enabled
  @Test
  public void testListLoadBalancerListenerPoliciesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancerListenerPoliciesWOptions();

    vpcService.disableRetries();
    testListLoadBalancerListenerPoliciesWOptions();
  }

  // Test the listLoadBalancerListenerPolicies operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListLoadBalancerListenerPoliciesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listLoadBalancerListenerPolicies(null).execute();
  }

  // Test the createLoadBalancerListenerPolicy operation with a valid options model parameter
  @Test
  public void testCreateLoadBalancerListenerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"forward\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-policy\", \"priority\": 5, \"provisioning_status\": \"active\", \"rules\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}], \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}}";
    String createLoadBalancerListenerPolicyPath = "/load_balancers/testString/listeners/testString/policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
    LoadBalancerListenerPolicyRulePrototype loadBalancerListenerPolicyRulePrototypeModel = new LoadBalancerListenerPolicyRulePrototype.Builder()
      .condition("contains")
      .field("MY-APP-HEADER")
      .type("body")
      .value("testString")
      .build();

    // Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
    LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityById loadBalancerListenerPolicyTargetPrototypeModel = new LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.Builder()
      .id("70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
    CreateLoadBalancerListenerPolicyOptions createLoadBalancerListenerPolicyOptionsModel = new CreateLoadBalancerListenerPolicyOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .action("forward")
      .priority(Long.valueOf("5"))
      .name("my-policy")
      .rules(java.util.Arrays.asList(loadBalancerListenerPolicyRulePrototypeModel))
      .target(loadBalancerListenerPolicyTargetPrototypeModel)
      .build();

    // Invoke createLoadBalancerListenerPolicy() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicy> response = vpcService.createLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createLoadBalancerListenerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createLoadBalancerListenerPolicy operation with and without retries enabled
  @Test
  public void testCreateLoadBalancerListenerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateLoadBalancerListenerPolicyWOptions();

    vpcService.disableRetries();
    testCreateLoadBalancerListenerPolicyWOptions();
  }

  // Test the createLoadBalancerListenerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateLoadBalancerListenerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createLoadBalancerListenerPolicy(null).execute();
  }

  // Test the deleteLoadBalancerListenerPolicy operation with a valid options model parameter
  @Test
  public void testDeleteLoadBalancerListenerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteLoadBalancerListenerPolicyPath = "/load_balancers/testString/listeners/testString/policies/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteLoadBalancerListenerPolicyOptions model
    DeleteLoadBalancerListenerPolicyOptions deleteLoadBalancerListenerPolicyOptionsModel = new DeleteLoadBalancerListenerPolicyOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .id("testString")
      .build();

    // Invoke deleteLoadBalancerListenerPolicy() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteLoadBalancerListenerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteLoadBalancerListenerPolicy operation with and without retries enabled
  @Test
  public void testDeleteLoadBalancerListenerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteLoadBalancerListenerPolicyWOptions();

    vpcService.disableRetries();
    testDeleteLoadBalancerListenerPolicyWOptions();
  }

  // Test the deleteLoadBalancerListenerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteLoadBalancerListenerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteLoadBalancerListenerPolicy(null).execute();
  }

  // Test the getLoadBalancerListenerPolicy operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerListenerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"forward\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-policy\", \"priority\": 5, \"provisioning_status\": \"active\", \"rules\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}], \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}}";
    String getLoadBalancerListenerPolicyPath = "/load_balancers/testString/listeners/testString/policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerListenerPolicyOptions model
    GetLoadBalancerListenerPolicyOptions getLoadBalancerListenerPolicyOptionsModel = new GetLoadBalancerListenerPolicyOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .id("testString")
      .build();

    // Invoke getLoadBalancerListenerPolicy() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicy> response = vpcService.getLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerListenerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerListenerPolicy operation with and without retries enabled
  @Test
  public void testGetLoadBalancerListenerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerListenerPolicyWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerListenerPolicyWOptions();
  }

  // Test the getLoadBalancerListenerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerListenerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerListenerPolicy(null).execute();
  }

  // Test the updateLoadBalancerListenerPolicy operation with a valid options model parameter
  @Test
  public void testUpdateLoadBalancerListenerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"forward\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-policy\", \"priority\": 5, \"provisioning_status\": \"active\", \"rules\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}], \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}}";
    String updateLoadBalancerListenerPolicyPath = "/load_balancers/testString/listeners/testString/policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
    LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityById loadBalancerListenerPolicyTargetPatchModel = new LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.Builder()
      .id("70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerListenerPolicyPatch model
    LoadBalancerListenerPolicyPatch loadBalancerListenerPolicyPatchModel = new LoadBalancerListenerPolicyPatch.Builder()
      .name("my-policy")
      .priority(Long.valueOf("5"))
      .target(loadBalancerListenerPolicyTargetPatchModel)
      .build();
    Map<String, Object> loadBalancerListenerPolicyPatchModelAsPatch = loadBalancerListenerPolicyPatchModel.asPatch();

    // Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
    UpdateLoadBalancerListenerPolicyOptions updateLoadBalancerListenerPolicyOptionsModel = new UpdateLoadBalancerListenerPolicyOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .id("testString")
      .loadBalancerListenerPolicyPatch(loadBalancerListenerPolicyPatchModelAsPatch)
      .build();

    // Invoke updateLoadBalancerListenerPolicy() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicy> response = vpcService.updateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateLoadBalancerListenerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateLoadBalancerListenerPolicy operation with and without retries enabled
  @Test
  public void testUpdateLoadBalancerListenerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateLoadBalancerListenerPolicyWOptions();

    vpcService.disableRetries();
    testUpdateLoadBalancerListenerPolicyWOptions();
  }

  // Test the updateLoadBalancerListenerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateLoadBalancerListenerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateLoadBalancerListenerPolicy(null).execute();
  }

  // Test the listLoadBalancerListenerPolicyRules operation with a valid options model parameter
  @Test
  public void testListLoadBalancerListenerPolicyRulesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"rules\": [{\"condition\": \"contains\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"field\": \"MY-APP-HEADER\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"provisioning_status\": \"active\", \"type\": \"body\", \"value\": \"value\"}]}";
    String listLoadBalancerListenerPolicyRulesPath = "/load_balancers/testString/listeners/testString/policies/testString/rules";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
    ListLoadBalancerListenerPolicyRulesOptions listLoadBalancerListenerPolicyRulesOptionsModel = new ListLoadBalancerListenerPolicyRulesOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .policyId("testString")
      .build();

    // Invoke listLoadBalancerListenerPolicyRules() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicyRuleCollection> response = vpcService.listLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicyRuleCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancerListenerPolicyRulesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listLoadBalancerListenerPolicyRules operation with and without retries enabled
  @Test
  public void testListLoadBalancerListenerPolicyRulesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancerListenerPolicyRulesWOptions();

    vpcService.disableRetries();
    testListLoadBalancerListenerPolicyRulesWOptions();
  }

  // Test the listLoadBalancerListenerPolicyRules operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListLoadBalancerListenerPolicyRulesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listLoadBalancerListenerPolicyRules(null).execute();
  }

  // Test the createLoadBalancerListenerPolicyRule operation with a valid options model parameter
  @Test
  public void testCreateLoadBalancerListenerPolicyRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"condition\": \"contains\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"field\": \"MY-APP-HEADER\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"provisioning_status\": \"active\", \"type\": \"body\", \"value\": \"value\"}";
    String createLoadBalancerListenerPolicyRulePath = "/load_balancers/testString/listeners/testString/policies/testString/rules";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
    CreateLoadBalancerListenerPolicyRuleOptions createLoadBalancerListenerPolicyRuleOptionsModel = new CreateLoadBalancerListenerPolicyRuleOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .policyId("testString")
      .condition("contains")
      .type("body")
      .value("testString")
      .field("MY-APP-HEADER")
      .build();

    // Invoke createLoadBalancerListenerPolicyRule() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicyRule> response = vpcService.createLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicyRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createLoadBalancerListenerPolicyRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createLoadBalancerListenerPolicyRule operation with and without retries enabled
  @Test
  public void testCreateLoadBalancerListenerPolicyRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateLoadBalancerListenerPolicyRuleWOptions();

    vpcService.disableRetries();
    testCreateLoadBalancerListenerPolicyRuleWOptions();
  }

  // Test the createLoadBalancerListenerPolicyRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateLoadBalancerListenerPolicyRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createLoadBalancerListenerPolicyRule(null).execute();
  }

  // Test the deleteLoadBalancerListenerPolicyRule operation with a valid options model parameter
  @Test
  public void testDeleteLoadBalancerListenerPolicyRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteLoadBalancerListenerPolicyRulePath = "/load_balancers/testString/listeners/testString/policies/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteLoadBalancerListenerPolicyRuleOptions model
    DeleteLoadBalancerListenerPolicyRuleOptions deleteLoadBalancerListenerPolicyRuleOptionsModel = new DeleteLoadBalancerListenerPolicyRuleOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .policyId("testString")
      .id("testString")
      .build();

    // Invoke deleteLoadBalancerListenerPolicyRule() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteLoadBalancerListenerPolicyRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteLoadBalancerListenerPolicyRule operation with and without retries enabled
  @Test
  public void testDeleteLoadBalancerListenerPolicyRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteLoadBalancerListenerPolicyRuleWOptions();

    vpcService.disableRetries();
    testDeleteLoadBalancerListenerPolicyRuleWOptions();
  }

  // Test the deleteLoadBalancerListenerPolicyRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteLoadBalancerListenerPolicyRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteLoadBalancerListenerPolicyRule(null).execute();
  }

  // Test the getLoadBalancerListenerPolicyRule operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerListenerPolicyRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"condition\": \"contains\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"field\": \"MY-APP-HEADER\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"provisioning_status\": \"active\", \"type\": \"body\", \"value\": \"value\"}";
    String getLoadBalancerListenerPolicyRulePath = "/load_balancers/testString/listeners/testString/policies/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
    GetLoadBalancerListenerPolicyRuleOptions getLoadBalancerListenerPolicyRuleOptionsModel = new GetLoadBalancerListenerPolicyRuleOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .policyId("testString")
      .id("testString")
      .build();

    // Invoke getLoadBalancerListenerPolicyRule() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicyRule> response = vpcService.getLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicyRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerListenerPolicyRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerListenerPolicyRule operation with and without retries enabled
  @Test
  public void testGetLoadBalancerListenerPolicyRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerListenerPolicyRuleWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerListenerPolicyRuleWOptions();
  }

  // Test the getLoadBalancerListenerPolicyRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerListenerPolicyRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerListenerPolicyRule(null).execute();
  }

  // Test the updateLoadBalancerListenerPolicyRule operation with a valid options model parameter
  @Test
  public void testUpdateLoadBalancerListenerPolicyRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"condition\": \"contains\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"field\": \"MY-APP-HEADER\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"provisioning_status\": \"active\", \"type\": \"body\", \"value\": \"value\"}";
    String updateLoadBalancerListenerPolicyRulePath = "/load_balancers/testString/listeners/testString/policies/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerListenerPolicyRulePatch model
    LoadBalancerListenerPolicyRulePatch loadBalancerListenerPolicyRulePatchModel = new LoadBalancerListenerPolicyRulePatch.Builder()
      .condition("contains")
      .field("MY-APP-HEADER")
      .type("body")
      .value("testString")
      .build();
    Map<String, Object> loadBalancerListenerPolicyRulePatchModelAsPatch = loadBalancerListenerPolicyRulePatchModel.asPatch();

    // Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
    UpdateLoadBalancerListenerPolicyRuleOptions updateLoadBalancerListenerPolicyRuleOptionsModel = new UpdateLoadBalancerListenerPolicyRuleOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .policyId("testString")
      .id("testString")
      .loadBalancerListenerPolicyRulePatch(loadBalancerListenerPolicyRulePatchModelAsPatch)
      .build();

    // Invoke updateLoadBalancerListenerPolicyRule() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicyRule> response = vpcService.updateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicyRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateLoadBalancerListenerPolicyRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateLoadBalancerListenerPolicyRule operation with and without retries enabled
  @Test
  public void testUpdateLoadBalancerListenerPolicyRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateLoadBalancerListenerPolicyRuleWOptions();

    vpcService.disableRetries();
    testUpdateLoadBalancerListenerPolicyRuleWOptions();
  }

  // Test the updateLoadBalancerListenerPolicyRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateLoadBalancerListenerPolicyRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateLoadBalancerListenerPolicyRule(null).execute();
  }

  // Test the listLoadBalancerPools operation with a valid options model parameter
  @Test
  public void testListLoadBalancerPoolsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"pools\": [{\"algorithm\": \"least_connections\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"health_monitor\": {\"delay\": 5, \"max_retries\": 2, \"port\": 22, \"timeout\": 2, \"type\": \"http\", \"url_path\": \"/\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"instance_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group\"}, \"members\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}], \"name\": \"my-load-balancer-pool\", \"protocol\": \"http\", \"provisioning_status\": \"active\", \"proxy_protocol\": \"disabled\", \"session_persistence\": {\"cookie_name\": \"my-cookie-name\", \"type\": \"app_cookie\"}}]}";
    String listLoadBalancerPoolsPath = "/load_balancers/testString/pools";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancerPoolsOptions model
    ListLoadBalancerPoolsOptions listLoadBalancerPoolsOptionsModel = new ListLoadBalancerPoolsOptions.Builder()
      .loadBalancerId("testString")
      .build();

    // Invoke listLoadBalancerPools() with a valid options model and verify the result
    Response<LoadBalancerPoolCollection> response = vpcService.listLoadBalancerPools(listLoadBalancerPoolsOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPoolCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancerPoolsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listLoadBalancerPools operation with and without retries enabled
  @Test
  public void testListLoadBalancerPoolsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancerPoolsWOptions();

    vpcService.disableRetries();
    testListLoadBalancerPoolsWOptions();
  }

  // Test the listLoadBalancerPools operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListLoadBalancerPoolsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listLoadBalancerPools(null).execute();
  }

  // Test the createLoadBalancerPool operation with a valid options model parameter
  @Test
  public void testCreateLoadBalancerPoolWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"algorithm\": \"least_connections\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"health_monitor\": {\"delay\": 5, \"max_retries\": 2, \"port\": 22, \"timeout\": 2, \"type\": \"http\", \"url_path\": \"/\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"instance_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group\"}, \"members\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}], \"name\": \"my-load-balancer-pool\", \"protocol\": \"http\", \"provisioning_status\": \"active\", \"proxy_protocol\": \"disabled\", \"session_persistence\": {\"cookie_name\": \"my-cookie-name\", \"type\": \"app_cookie\"}}";
    String createLoadBalancerPoolPath = "/load_balancers/testString/pools";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
    LoadBalancerPoolHealthMonitorPrototype loadBalancerPoolHealthMonitorPrototypeModel = new LoadBalancerPoolHealthMonitorPrototype.Builder()
      .delay(Long.valueOf("5"))
      .maxRetries(Long.valueOf("2"))
      .port(Long.valueOf("22"))
      .timeout(Long.valueOf("2"))
      .type("http")
      .urlPath("/")
      .build();

    // Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
    LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById loadBalancerPoolMemberTargetPrototypeModel = new LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById.Builder()
      .id("1e09281b-f177-46fb-baf1-bc152b2e391a")
      .build();

    // Construct an instance of the LoadBalancerPoolMemberPrototype model
    LoadBalancerPoolMemberPrototype loadBalancerPoolMemberPrototypeModel = new LoadBalancerPoolMemberPrototype.Builder()
      .port(Long.valueOf("80"))
      .target(loadBalancerPoolMemberTargetPrototypeModel)
      .weight(Long.valueOf("50"))
      .build();

    // Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
    LoadBalancerPoolSessionPersistencePrototype loadBalancerPoolSessionPersistencePrototypeModel = new LoadBalancerPoolSessionPersistencePrototype.Builder()
      .cookieName("my-cookie-name")
      .type("app_cookie")
      .build();

    // Construct an instance of the CreateLoadBalancerPoolOptions model
    CreateLoadBalancerPoolOptions createLoadBalancerPoolOptionsModel = new CreateLoadBalancerPoolOptions.Builder()
      .loadBalancerId("testString")
      .algorithm("least_connections")
      .healthMonitor(loadBalancerPoolHealthMonitorPrototypeModel)
      .protocol("http")
      .members(java.util.Arrays.asList(loadBalancerPoolMemberPrototypeModel))
      .name("my-load-balancer-pool")
      .proxyProtocol("disabled")
      .sessionPersistence(loadBalancerPoolSessionPersistencePrototypeModel)
      .build();

    // Invoke createLoadBalancerPool() with a valid options model and verify the result
    Response<LoadBalancerPool> response = vpcService.createLoadBalancerPool(createLoadBalancerPoolOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPool responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createLoadBalancerPoolPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createLoadBalancerPool operation with and without retries enabled
  @Test
  public void testCreateLoadBalancerPoolWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateLoadBalancerPoolWOptions();

    vpcService.disableRetries();
    testCreateLoadBalancerPoolWOptions();
  }

  // Test the createLoadBalancerPool operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateLoadBalancerPoolNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createLoadBalancerPool(null).execute();
  }

  // Test the deleteLoadBalancerPool operation with a valid options model parameter
  @Test
  public void testDeleteLoadBalancerPoolWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteLoadBalancerPoolPath = "/load_balancers/testString/pools/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteLoadBalancerPoolOptions model
    DeleteLoadBalancerPoolOptions deleteLoadBalancerPoolOptionsModel = new DeleteLoadBalancerPoolOptions.Builder()
      .loadBalancerId("testString")
      .id("testString")
      .build();

    // Invoke deleteLoadBalancerPool() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteLoadBalancerPool(deleteLoadBalancerPoolOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteLoadBalancerPoolPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteLoadBalancerPool operation with and without retries enabled
  @Test
  public void testDeleteLoadBalancerPoolWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteLoadBalancerPoolWOptions();

    vpcService.disableRetries();
    testDeleteLoadBalancerPoolWOptions();
  }

  // Test the deleteLoadBalancerPool operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteLoadBalancerPoolNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteLoadBalancerPool(null).execute();
  }

  // Test the getLoadBalancerPool operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerPoolWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"algorithm\": \"least_connections\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"health_monitor\": {\"delay\": 5, \"max_retries\": 2, \"port\": 22, \"timeout\": 2, \"type\": \"http\", \"url_path\": \"/\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"instance_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group\"}, \"members\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}], \"name\": \"my-load-balancer-pool\", \"protocol\": \"http\", \"provisioning_status\": \"active\", \"proxy_protocol\": \"disabled\", \"session_persistence\": {\"cookie_name\": \"my-cookie-name\", \"type\": \"app_cookie\"}}";
    String getLoadBalancerPoolPath = "/load_balancers/testString/pools/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerPoolOptions model
    GetLoadBalancerPoolOptions getLoadBalancerPoolOptionsModel = new GetLoadBalancerPoolOptions.Builder()
      .loadBalancerId("testString")
      .id("testString")
      .build();

    // Invoke getLoadBalancerPool() with a valid options model and verify the result
    Response<LoadBalancerPool> response = vpcService.getLoadBalancerPool(getLoadBalancerPoolOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPool responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerPoolPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerPool operation with and without retries enabled
  @Test
  public void testGetLoadBalancerPoolWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerPoolWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerPoolWOptions();
  }

  // Test the getLoadBalancerPool operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerPoolNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerPool(null).execute();
  }

  // Test the updateLoadBalancerPool operation with a valid options model parameter
  @Test
  public void testUpdateLoadBalancerPoolWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"algorithm\": \"least_connections\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"health_monitor\": {\"delay\": 5, \"max_retries\": 2, \"port\": 22, \"timeout\": 2, \"type\": \"http\", \"url_path\": \"/\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"instance_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance-group\"}, \"members\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\"}], \"name\": \"my-load-balancer-pool\", \"protocol\": \"http\", \"provisioning_status\": \"active\", \"proxy_protocol\": \"disabled\", \"session_persistence\": {\"cookie_name\": \"my-cookie-name\", \"type\": \"app_cookie\"}}";
    String updateLoadBalancerPoolPath = "/load_balancers/testString/pools/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
    LoadBalancerPoolHealthMonitorPatch loadBalancerPoolHealthMonitorPatchModel = new LoadBalancerPoolHealthMonitorPatch.Builder()
      .delay(Long.valueOf("5"))
      .maxRetries(Long.valueOf("2"))
      .port(Long.valueOf("22"))
      .timeout(Long.valueOf("2"))
      .type("http")
      .urlPath("/")
      .build();

    // Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
    LoadBalancerPoolSessionPersistencePatch loadBalancerPoolSessionPersistencePatchModel = new LoadBalancerPoolSessionPersistencePatch.Builder()
      .cookieName("my-cookie-name")
      .type("app_cookie")
      .build();

    // Construct an instance of the LoadBalancerPoolPatch model
    LoadBalancerPoolPatch loadBalancerPoolPatchModel = new LoadBalancerPoolPatch.Builder()
      .algorithm("least_connections")
      .healthMonitor(loadBalancerPoolHealthMonitorPatchModel)
      .name("my-load-balancer-pool")
      .protocol("http")
      .proxyProtocol("disabled")
      .sessionPersistence(loadBalancerPoolSessionPersistencePatchModel)
      .build();
    Map<String, Object> loadBalancerPoolPatchModelAsPatch = loadBalancerPoolPatchModel.asPatch();

    // Construct an instance of the UpdateLoadBalancerPoolOptions model
    UpdateLoadBalancerPoolOptions updateLoadBalancerPoolOptionsModel = new UpdateLoadBalancerPoolOptions.Builder()
      .loadBalancerId("testString")
      .id("testString")
      .loadBalancerPoolPatch(loadBalancerPoolPatchModelAsPatch)
      .build();

    // Invoke updateLoadBalancerPool() with a valid options model and verify the result
    Response<LoadBalancerPool> response = vpcService.updateLoadBalancerPool(updateLoadBalancerPoolOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPool responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateLoadBalancerPoolPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateLoadBalancerPool operation with and without retries enabled
  @Test
  public void testUpdateLoadBalancerPoolWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateLoadBalancerPoolWOptions();

    vpcService.disableRetries();
    testUpdateLoadBalancerPoolWOptions();
  }

  // Test the updateLoadBalancerPool operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateLoadBalancerPoolNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateLoadBalancerPool(null).execute();
  }

  // Test the listLoadBalancerPoolMembers operation with a valid options model parameter
  @Test
  public void testListLoadBalancerPoolMembersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"members\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"health\": \"faulted\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"port\": 80, \"provisioning_status\": \"active\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}, \"weight\": 50}]}";
    String listLoadBalancerPoolMembersPath = "/load_balancers/testString/pools/testString/members";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancerPoolMembersOptions model
    ListLoadBalancerPoolMembersOptions listLoadBalancerPoolMembersOptionsModel = new ListLoadBalancerPoolMembersOptions.Builder()
      .loadBalancerId("testString")
      .poolId("testString")
      .build();

    // Invoke listLoadBalancerPoolMembers() with a valid options model and verify the result
    Response<LoadBalancerPoolMemberCollection> response = vpcService.listLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPoolMemberCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancerPoolMembersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listLoadBalancerPoolMembers operation with and without retries enabled
  @Test
  public void testListLoadBalancerPoolMembersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancerPoolMembersWOptions();

    vpcService.disableRetries();
    testListLoadBalancerPoolMembersWOptions();
  }

  // Test the listLoadBalancerPoolMembers operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListLoadBalancerPoolMembersNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listLoadBalancerPoolMembers(null).execute();
  }

  // Test the createLoadBalancerPoolMember operation with a valid options model parameter
  @Test
  public void testCreateLoadBalancerPoolMemberWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"health\": \"faulted\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"port\": 80, \"provisioning_status\": \"active\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}, \"weight\": 50}";
    String createLoadBalancerPoolMemberPath = "/load_balancers/testString/pools/testString/members";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
    LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById loadBalancerPoolMemberTargetPrototypeModel = new LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById.Builder()
      .id("1e09281b-f177-46fb-baf1-bc152b2e391a")
      .build();

    // Construct an instance of the CreateLoadBalancerPoolMemberOptions model
    CreateLoadBalancerPoolMemberOptions createLoadBalancerPoolMemberOptionsModel = new CreateLoadBalancerPoolMemberOptions.Builder()
      .loadBalancerId("testString")
      .poolId("testString")
      .port(Long.valueOf("80"))
      .target(loadBalancerPoolMemberTargetPrototypeModel)
      .weight(Long.valueOf("50"))
      .build();

    // Invoke createLoadBalancerPoolMember() with a valid options model and verify the result
    Response<LoadBalancerPoolMember> response = vpcService.createLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPoolMember responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createLoadBalancerPoolMemberPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createLoadBalancerPoolMember operation with and without retries enabled
  @Test
  public void testCreateLoadBalancerPoolMemberWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateLoadBalancerPoolMemberWOptions();

    vpcService.disableRetries();
    testCreateLoadBalancerPoolMemberWOptions();
  }

  // Test the createLoadBalancerPoolMember operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateLoadBalancerPoolMemberNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createLoadBalancerPoolMember(null).execute();
  }

  // Test the replaceLoadBalancerPoolMembers operation with a valid options model parameter
  @Test
  public void testReplaceLoadBalancerPoolMembersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"members\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"health\": \"faulted\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"port\": 80, \"provisioning_status\": \"active\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}, \"weight\": 50}]}";
    String replaceLoadBalancerPoolMembersPath = "/load_balancers/testString/pools/testString/members";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
    LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById loadBalancerPoolMemberTargetPrototypeModel = new LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById.Builder()
      .id("1e09281b-f177-46fb-baf1-bc152b2e391a")
      .build();

    // Construct an instance of the LoadBalancerPoolMemberPrototype model
    LoadBalancerPoolMemberPrototype loadBalancerPoolMemberPrototypeModel = new LoadBalancerPoolMemberPrototype.Builder()
      .port(Long.valueOf("80"))
      .target(loadBalancerPoolMemberTargetPrototypeModel)
      .weight(Long.valueOf("50"))
      .build();

    // Construct an instance of the ReplaceLoadBalancerPoolMembersOptions model
    ReplaceLoadBalancerPoolMembersOptions replaceLoadBalancerPoolMembersOptionsModel = new ReplaceLoadBalancerPoolMembersOptions.Builder()
      .loadBalancerId("testString")
      .poolId("testString")
      .members(java.util.Arrays.asList(loadBalancerPoolMemberPrototypeModel))
      .build();

    // Invoke replaceLoadBalancerPoolMembers() with a valid options model and verify the result
    Response<LoadBalancerPoolMemberCollection> response = vpcService.replaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPoolMemberCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, replaceLoadBalancerPoolMembersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the replaceLoadBalancerPoolMembers operation with and without retries enabled
  @Test
  public void testReplaceLoadBalancerPoolMembersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testReplaceLoadBalancerPoolMembersWOptions();

    vpcService.disableRetries();
    testReplaceLoadBalancerPoolMembersWOptions();
  }

  // Test the replaceLoadBalancerPoolMembers operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testReplaceLoadBalancerPoolMembersNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.replaceLoadBalancerPoolMembers(null).execute();
  }

  // Test the deleteLoadBalancerPoolMember operation with a valid options model parameter
  @Test
  public void testDeleteLoadBalancerPoolMemberWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteLoadBalancerPoolMemberPath = "/load_balancers/testString/pools/testString/members/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteLoadBalancerPoolMemberOptions model
    DeleteLoadBalancerPoolMemberOptions deleteLoadBalancerPoolMemberOptionsModel = new DeleteLoadBalancerPoolMemberOptions.Builder()
      .loadBalancerId("testString")
      .poolId("testString")
      .id("testString")
      .build();

    // Invoke deleteLoadBalancerPoolMember() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteLoadBalancerPoolMemberPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteLoadBalancerPoolMember operation with and without retries enabled
  @Test
  public void testDeleteLoadBalancerPoolMemberWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteLoadBalancerPoolMemberWOptions();

    vpcService.disableRetries();
    testDeleteLoadBalancerPoolMemberWOptions();
  }

  // Test the deleteLoadBalancerPoolMember operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteLoadBalancerPoolMemberNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteLoadBalancerPoolMember(null).execute();
  }

  // Test the getLoadBalancerPoolMember operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerPoolMemberWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"health\": \"faulted\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"port\": 80, \"provisioning_status\": \"active\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}, \"weight\": 50}";
    String getLoadBalancerPoolMemberPath = "/load_balancers/testString/pools/testString/members/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerPoolMemberOptions model
    GetLoadBalancerPoolMemberOptions getLoadBalancerPoolMemberOptionsModel = new GetLoadBalancerPoolMemberOptions.Builder()
      .loadBalancerId("testString")
      .poolId("testString")
      .id("testString")
      .build();

    // Invoke getLoadBalancerPoolMember() with a valid options model and verify the result
    Response<LoadBalancerPoolMember> response = vpcService.getLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPoolMember responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerPoolMemberPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerPoolMember operation with and without retries enabled
  @Test
  public void testGetLoadBalancerPoolMemberWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerPoolMemberWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerPoolMemberWOptions();
  }

  // Test the getLoadBalancerPoolMember operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerPoolMemberNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerPoolMember(null).execute();
  }

  // Test the updateLoadBalancerPoolMember operation with a valid options model parameter
  @Test
  public void testUpdateLoadBalancerPoolMemberWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"health\": \"faulted\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"70294e14-4e61-11e8-bcf4-0242ac110004\", \"port\": 80, \"provisioning_status\": \"active\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-instance\"}, \"weight\": 50}";
    String updateLoadBalancerPoolMemberPath = "/load_balancers/testString/pools/testString/members/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
    LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById loadBalancerPoolMemberTargetPrototypeModel = new LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById.Builder()
      .id("1e09281b-f177-46fb-baf1-bc152b2e391a")
      .build();

    // Construct an instance of the LoadBalancerPoolMemberPatch model
    LoadBalancerPoolMemberPatch loadBalancerPoolMemberPatchModel = new LoadBalancerPoolMemberPatch.Builder()
      .port(Long.valueOf("80"))
      .target(loadBalancerPoolMemberTargetPrototypeModel)
      .weight(Long.valueOf("50"))
      .build();
    Map<String, Object> loadBalancerPoolMemberPatchModelAsPatch = loadBalancerPoolMemberPatchModel.asPatch();

    // Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
    UpdateLoadBalancerPoolMemberOptions updateLoadBalancerPoolMemberOptionsModel = new UpdateLoadBalancerPoolMemberOptions.Builder()
      .loadBalancerId("testString")
      .poolId("testString")
      .id("testString")
      .loadBalancerPoolMemberPatch(loadBalancerPoolMemberPatchModelAsPatch)
      .build();

    // Invoke updateLoadBalancerPoolMember() with a valid options model and verify the result
    Response<LoadBalancerPoolMember> response = vpcService.updateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPoolMember responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateLoadBalancerPoolMemberPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateLoadBalancerPoolMember operation with and without retries enabled
  @Test
  public void testUpdateLoadBalancerPoolMemberWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateLoadBalancerPoolMemberWOptions();

    vpcService.disableRetries();
    testUpdateLoadBalancerPoolMemberWOptions();
  }

  // Test the updateLoadBalancerPoolMember operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateLoadBalancerPoolMemberNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateLoadBalancerPoolMember(null).execute();
  }

  // Test the listEndpointGateways operation with a valid options model parameter
  @Test
  public void testListEndpointGatewaysWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"endpoint_gateways\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-endpoint-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"endpoint_gateway\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"service_endpoint\": \"my-cloudant-instance.appdomain.cloud\", \"service_endpoints\": [\"my-cloudant-instance.appdomain.cloud\"], \"target\": {\"crn\": \"crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::\", \"resource_type\": \"provider_cloud_service\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}], \"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways?limit=20\"}, \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways?start=ffd653466e284937896724b2dd044c9c&limit=20\"}, \"total_count\": 132}";
    String listEndpointGatewaysPath = "/endpoint_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListEndpointGatewaysOptions model
    ListEndpointGatewaysOptions listEndpointGatewaysOptionsModel = new ListEndpointGatewaysOptions.Builder()
      .name("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    // Invoke listEndpointGateways() with a valid options model and verify the result
    Response<EndpointGatewayCollection> response = vpcService.listEndpointGateways(listEndpointGatewaysOptionsModel).execute();
    assertNotNull(response);
    EndpointGatewayCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listEndpointGatewaysPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("name"), "testString");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
  }

  // Test the listEndpointGateways operation with and without retries enabled
  @Test
  public void testListEndpointGatewaysWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListEndpointGatewaysWOptions();

    vpcService.disableRetries();
    testListEndpointGatewaysWOptions();
  }

  // Test the listEndpointGateways operation using the EndpointGatewaysPager.getNext() method
  @Test
  public void testListEndpointGatewaysWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"endpoint_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-endpoint-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"endpoint_gateway\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"service_endpoint\":\"my-cloudant-instance.appdomain.cloud\",\"service_endpoints\":[\"my-cloudant-instance.appdomain.cloud\"],\"target\":{\"crn\":\"crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::\",\"resource_type\":\"provider_cloud_service\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"endpoint_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-endpoint-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"endpoint_gateway\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"service_endpoint\":\"my-cloudant-instance.appdomain.cloud\",\"service_endpoints\":[\"my-cloudant-instance.appdomain.cloud\"],\"target\":{\"crn\":\"crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::\",\"resource_type\":\"provider_cloud_service\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListEndpointGatewaysOptions listEndpointGatewaysOptions = new ListEndpointGatewaysOptions.Builder()
      .name("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    List<EndpointGateway> allResults = new ArrayList<>();
    EndpointGatewaysPager pager = new EndpointGatewaysPager(vpcService, listEndpointGatewaysOptions);
    while (pager.hasNext()) {
      List<EndpointGateway> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listEndpointGateways operation using the EndpointGatewaysPager.getAll() method
  @Test
  public void testListEndpointGatewaysWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"endpoint_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-endpoint-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"endpoint_gateway\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"service_endpoint\":\"my-cloudant-instance.appdomain.cloud\",\"service_endpoints\":[\"my-cloudant-instance.appdomain.cloud\"],\"target\":{\"crn\":\"crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::\",\"resource_type\":\"provider_cloud_service\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"endpoint_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-endpoint-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"endpoint_gateway\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"service_endpoint\":\"my-cloudant-instance.appdomain.cloud\",\"service_endpoints\":[\"my-cloudant-instance.appdomain.cloud\"],\"target\":{\"crn\":\"crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::\",\"resource_type\":\"provider_cloud_service\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListEndpointGatewaysOptions listEndpointGatewaysOptions = new ListEndpointGatewaysOptions.Builder()
      .name("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    EndpointGatewaysPager pager = new EndpointGatewaysPager(vpcService, listEndpointGatewaysOptions);
    List<EndpointGateway> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createEndpointGateway operation with a valid options model parameter
  @Test
  public void testCreateEndpointGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-endpoint-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"endpoint_gateway\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"service_endpoint\": \"my-cloudant-instance.appdomain.cloud\", \"service_endpoints\": [\"my-cloudant-instance.appdomain.cloud\"], \"target\": {\"crn\": \"crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::\", \"resource_type\": \"provider_cloud_service\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createEndpointGatewayPath = "/endpoint_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the EndpointGatewayTargetPrototypeProviderInfrastructureServiceIdentityProviderInfrastructureServiceIdentityByName model
    EndpointGatewayTargetPrototypeProviderInfrastructureServiceIdentityProviderInfrastructureServiceIdentityByName endpointGatewayTargetPrototypeModel = new EndpointGatewayTargetPrototypeProviderInfrastructureServiceIdentityProviderInfrastructureServiceIdentityByName.Builder()
      .resourceType("provider_infrastructure_service")
      .name("ibm-ntp-server")
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("f025b503-ae66-46de-a011-3bd08fd5f7bf")
      .build();

    // Construct an instance of the EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityById model
    EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityById endpointGatewayReservedIpModel = new EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityById.Builder()
      .id("6d353a0f-aeb1-4ae1-832e-1110d10981bb")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the CreateEndpointGatewayOptions model
    CreateEndpointGatewayOptions createEndpointGatewayOptionsModel = new CreateEndpointGatewayOptions.Builder()
      .target(endpointGatewayTargetPrototypeModel)
      .vpc(vpcIdentityModel)
      .ips(java.util.Arrays.asList(endpointGatewayReservedIpModel))
      .name("testString")
      .resourceGroup(resourceGroupIdentityModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .build();

    // Invoke createEndpointGateway() with a valid options model and verify the result
    Response<EndpointGateway> response = vpcService.createEndpointGateway(createEndpointGatewayOptionsModel).execute();
    assertNotNull(response);
    EndpointGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createEndpointGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createEndpointGateway operation with and without retries enabled
  @Test
  public void testCreateEndpointGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateEndpointGatewayWOptions();

    vpcService.disableRetries();
    testCreateEndpointGatewayWOptions();
  }

  // Test the createEndpointGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateEndpointGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createEndpointGateway(null).execute();
  }

  // Test the listEndpointGatewayIps operation with a valid options model parameter
  @Test
  public void testListEndpointGatewayIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5/ips?limit=20\"}, \"ips\": [{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5/ips?start=90ac13871b604023ab8b827178518328&limit=20\"}, \"total_count\": 132}";
    String listEndpointGatewayIpsPath = "/endpoint_gateways/testString/ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListEndpointGatewayIpsOptions model
    ListEndpointGatewayIpsOptions listEndpointGatewayIpsOptionsModel = new ListEndpointGatewayIpsOptions.Builder()
      .endpointGatewayId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    // Invoke listEndpointGatewayIps() with a valid options model and verify the result
    Response<ReservedIPCollectionEndpointGatewayContext> response = vpcService.listEndpointGatewayIps(listEndpointGatewayIpsOptionsModel).execute();
    assertNotNull(response);
    ReservedIPCollectionEndpointGatewayContext responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listEndpointGatewayIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "name");
  }

  // Test the listEndpointGatewayIps operation with and without retries enabled
  @Test
  public void testListEndpointGatewayIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListEndpointGatewayIpsWOptions();

    vpcService.disableRetries();
    testListEndpointGatewayIpsWOptions();
  }

  // Test the listEndpointGatewayIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListEndpointGatewayIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listEndpointGatewayIps(null).execute();
  }

  // Test the listEndpointGatewayIps operation using the EndpointGatewayIpsPager.getNext() method
  @Test
  public void testListEndpointGatewayIpsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListEndpointGatewayIpsOptions listEndpointGatewayIpsOptions = new ListEndpointGatewayIpsOptions.Builder()
      .endpointGatewayId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    List<ReservedIP> allResults = new ArrayList<>();
    EndpointGatewayIpsPager pager = new EndpointGatewayIpsPager(vpcService, listEndpointGatewayIpsOptions);
    while (pager.hasNext()) {
      List<ReservedIP> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listEndpointGatewayIps operation using the EndpointGatewayIpsPager.getAll() method
  @Test
  public void testListEndpointGatewayIpsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"id\":\"d7cc5196-9864-48c4-82d8-3f30da41fcc5\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListEndpointGatewayIpsOptions listEndpointGatewayIpsOptions = new ListEndpointGatewayIpsOptions.Builder()
      .endpointGatewayId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    EndpointGatewayIpsPager pager = new EndpointGatewayIpsPager(vpcService, listEndpointGatewayIpsOptions);
    List<ReservedIP> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the removeEndpointGatewayIp operation with a valid options model parameter
  @Test
  public void testRemoveEndpointGatewayIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String removeEndpointGatewayIpPath = "/endpoint_gateways/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RemoveEndpointGatewayIpOptions model
    RemoveEndpointGatewayIpOptions removeEndpointGatewayIpOptionsModel = new RemoveEndpointGatewayIpOptions.Builder()
      .endpointGatewayId("testString")
      .id("testString")
      .build();

    // Invoke removeEndpointGatewayIp() with a valid options model and verify the result
    Response<Void> response = vpcService.removeEndpointGatewayIp(removeEndpointGatewayIpOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, removeEndpointGatewayIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the removeEndpointGatewayIp operation with and without retries enabled
  @Test
  public void testRemoveEndpointGatewayIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRemoveEndpointGatewayIpWOptions();

    vpcService.disableRetries();
    testRemoveEndpointGatewayIpWOptions();
  }

  // Test the removeEndpointGatewayIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRemoveEndpointGatewayIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.removeEndpointGatewayIp(null).execute();
  }

  // Test the getEndpointGatewayIp operation with a valid options model parameter
  @Test
  public void testGetEndpointGatewayIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String getEndpointGatewayIpPath = "/endpoint_gateways/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetEndpointGatewayIpOptions model
    GetEndpointGatewayIpOptions getEndpointGatewayIpOptionsModel = new GetEndpointGatewayIpOptions.Builder()
      .endpointGatewayId("testString")
      .id("testString")
      .build();

    // Invoke getEndpointGatewayIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.getEndpointGatewayIp(getEndpointGatewayIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getEndpointGatewayIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getEndpointGatewayIp operation with and without retries enabled
  @Test
  public void testGetEndpointGatewayIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetEndpointGatewayIpWOptions();

    vpcService.disableRetries();
    testGetEndpointGatewayIpWOptions();
  }

  // Test the getEndpointGatewayIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetEndpointGatewayIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getEndpointGatewayIp(null).execute();
  }

  // Test the addEndpointGatewayIp operation with a valid options model parameter
  @Test
  public void testAddEndpointGatewayIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String addEndpointGatewayIpPath = "/endpoint_gateways/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the AddEndpointGatewayIpOptions model
    AddEndpointGatewayIpOptions addEndpointGatewayIpOptionsModel = new AddEndpointGatewayIpOptions.Builder()
      .endpointGatewayId("testString")
      .id("testString")
      .build();

    // Invoke addEndpointGatewayIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.addEndpointGatewayIp(addEndpointGatewayIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, addEndpointGatewayIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the addEndpointGatewayIp operation with and without retries enabled
  @Test
  public void testAddEndpointGatewayIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testAddEndpointGatewayIpWOptions();

    vpcService.disableRetries();
    testAddEndpointGatewayIpWOptions();
  }

  // Test the addEndpointGatewayIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testAddEndpointGatewayIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.addEndpointGatewayIp(null).execute();
  }

  // Test the deleteEndpointGateway operation with a valid options model parameter
  @Test
  public void testDeleteEndpointGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteEndpointGatewayPath = "/endpoint_gateways/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteEndpointGatewayOptions model
    DeleteEndpointGatewayOptions deleteEndpointGatewayOptionsModel = new DeleteEndpointGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteEndpointGateway() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteEndpointGateway(deleteEndpointGatewayOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteEndpointGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteEndpointGateway operation with and without retries enabled
  @Test
  public void testDeleteEndpointGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteEndpointGatewayWOptions();

    vpcService.disableRetries();
    testDeleteEndpointGatewayWOptions();
  }

  // Test the deleteEndpointGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteEndpointGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteEndpointGateway(null).execute();
  }

  // Test the getEndpointGateway operation with a valid options model parameter
  @Test
  public void testGetEndpointGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-endpoint-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"endpoint_gateway\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"service_endpoint\": \"my-cloudant-instance.appdomain.cloud\", \"service_endpoints\": [\"my-cloudant-instance.appdomain.cloud\"], \"target\": {\"crn\": \"crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::\", \"resource_type\": \"provider_cloud_service\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getEndpointGatewayPath = "/endpoint_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetEndpointGatewayOptions model
    GetEndpointGatewayOptions getEndpointGatewayOptionsModel = new GetEndpointGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke getEndpointGateway() with a valid options model and verify the result
    Response<EndpointGateway> response = vpcService.getEndpointGateway(getEndpointGatewayOptionsModel).execute();
    assertNotNull(response);
    EndpointGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getEndpointGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getEndpointGateway operation with and without retries enabled
  @Test
  public void testGetEndpointGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetEndpointGatewayWOptions();

    vpcService.disableRetries();
    testGetEndpointGatewayWOptions();
  }

  // Test the getEndpointGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetEndpointGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getEndpointGateway(null).execute();
  }

  // Test the updateEndpointGateway operation with a valid options model parameter
  @Test
  public void testUpdateEndpointGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"id\": \"d7cc5196-9864-48c4-82d8-3f30da41fcc5\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-endpoint-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"endpoint_gateway\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"service_endpoint\": \"my-cloudant-instance.appdomain.cloud\", \"service_endpoints\": [\"my-cloudant-instance.appdomain.cloud\"], \"target\": {\"crn\": \"crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::\", \"resource_type\": \"provider_cloud_service\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateEndpointGatewayPath = "/endpoint_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the EndpointGatewayPatch model
    EndpointGatewayPatch endpointGatewayPatchModel = new EndpointGatewayPatch.Builder()
      .name("my-endpoint-gateway")
      .build();
    Map<String, Object> endpointGatewayPatchModelAsPatch = endpointGatewayPatchModel.asPatch();

    // Construct an instance of the UpdateEndpointGatewayOptions model
    UpdateEndpointGatewayOptions updateEndpointGatewayOptionsModel = new UpdateEndpointGatewayOptions.Builder()
      .id("testString")
      .endpointGatewayPatch(endpointGatewayPatchModelAsPatch)
      .build();

    // Invoke updateEndpointGateway() with a valid options model and verify the result
    Response<EndpointGateway> response = vpcService.updateEndpointGateway(updateEndpointGatewayOptionsModel).execute();
    assertNotNull(response);
    EndpointGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateEndpointGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateEndpointGateway operation with and without retries enabled
  @Test
  public void testUpdateEndpointGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateEndpointGatewayWOptions();

    vpcService.disableRetries();
    testUpdateEndpointGatewayWOptions();
  }

  // Test the updateEndpointGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateEndpointGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateEndpointGateway(null).execute();
  }

  // Test the listFlowLogCollectors operation with a valid options model parameter
  @Test
  public void testListFlowLogCollectorsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20\"}, \"flow_log_collectors\": [{\"active\": true, \"auto_delete\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"lifecycle_state\": \"stable\", \"name\": \"my-flow-log-collector\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"storage_bucket\": {\"name\": \"bucket-27200-lwx4cfvcue\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"resource_type\": \"network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}], \"limit\": 20, \"next\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20\"}, \"total_count\": 132}";
    String listFlowLogCollectorsPath = "/flow_log_collectors";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListFlowLogCollectorsOptions model
    ListFlowLogCollectorsOptions listFlowLogCollectorsOptionsModel = new ListFlowLogCollectorsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .vpcId("testString")
      .vpcCrn("testString")
      .vpcName("testString")
      .targetId("testString")
      .targetResourceType("instance")
      .build();

    // Invoke listFlowLogCollectors() with a valid options model and verify the result
    Response<FlowLogCollectorCollection> response = vpcService.listFlowLogCollectors(listFlowLogCollectorsOptionsModel).execute();
    assertNotNull(response);
    FlowLogCollectorCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listFlowLogCollectorsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "testString");
    assertEquals(query.get("vpc.id"), "testString");
    assertEquals(query.get("vpc.crn"), "testString");
    assertEquals(query.get("vpc.name"), "testString");
    assertEquals(query.get("target.id"), "testString");
    assertEquals(query.get("target.resource_type"), "instance");
  }

  // Test the listFlowLogCollectors operation with and without retries enabled
  @Test
  public void testListFlowLogCollectorsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListFlowLogCollectorsWOptions();

    vpcService.disableRetries();
    testListFlowLogCollectorsWOptions();
  }

  // Test the listFlowLogCollectors operation using the FlowLogCollectorsPager.getNext() method
  @Test
  public void testListFlowLogCollectorsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"flow_log_collectors\":[{\"active\":true,\"auto_delete\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"lifecycle_state\":\"stable\",\"name\":\"my-flow-log-collector\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"storage_bucket\":{\"name\":\"bucket-27200-lwx4cfvcue\"},\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"resource_type\":\"network_interface\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"flow_log_collectors\":[{\"active\":true,\"auto_delete\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"lifecycle_state\":\"stable\",\"name\":\"my-flow-log-collector\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"storage_bucket\":{\"name\":\"bucket-27200-lwx4cfvcue\"},\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"resource_type\":\"network_interface\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListFlowLogCollectorsOptions listFlowLogCollectorsOptions = new ListFlowLogCollectorsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .vpcId("testString")
      .vpcCrn("testString")
      .vpcName("testString")
      .targetId("testString")
      .targetResourceType("instance")
      .build();

    List<FlowLogCollector> allResults = new ArrayList<>();
    FlowLogCollectorsPager pager = new FlowLogCollectorsPager(vpcService, listFlowLogCollectorsOptions);
    while (pager.hasNext()) {
      List<FlowLogCollector> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listFlowLogCollectors operation using the FlowLogCollectorsPager.getAll() method
  @Test
  public void testListFlowLogCollectorsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"flow_log_collectors\":[{\"active\":true,\"auto_delete\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"lifecycle_state\":\"stable\",\"name\":\"my-flow-log-collector\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"storage_bucket\":{\"name\":\"bucket-27200-lwx4cfvcue\"},\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"resource_type\":\"network_interface\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"flow_log_collectors\":[{\"active\":true,\"auto_delete\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689\",\"id\":\"39300233-9995-4806-89a5-3c1b6eb88689\",\"lifecycle_state\":\"stable\",\"name\":\"my-flow-log-collector\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"storage_bucket\":{\"name\":\"bucket-27200-lwx4cfvcue\"},\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-network-interface\",\"resource_type\":\"network_interface\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListFlowLogCollectorsOptions listFlowLogCollectorsOptions = new ListFlowLogCollectorsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("testString")
      .vpcId("testString")
      .vpcCrn("testString")
      .vpcName("testString")
      .targetId("testString")
      .targetResourceType("instance")
      .build();

    FlowLogCollectorsPager pager = new FlowLogCollectorsPager(vpcService, listFlowLogCollectorsOptions);
    List<FlowLogCollector> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createFlowLogCollector operation with a valid options model parameter
  @Test
  public void testCreateFlowLogCollectorWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"auto_delete\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"lifecycle_state\": \"stable\", \"name\": \"my-flow-log-collector\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"storage_bucket\": {\"name\": \"bucket-27200-lwx4cfvcue\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"resource_type\": \"network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createFlowLogCollectorPath = "/flow_log_collectors";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the LegacyCloudObjectStorageBucketIdentityCloudObjectStorageBucketIdentityByName model
    LegacyCloudObjectStorageBucketIdentityCloudObjectStorageBucketIdentityByName legacyCloudObjectStorageBucketIdentityModel = new LegacyCloudObjectStorageBucketIdentityCloudObjectStorageBucketIdentityByName.Builder()
      .name("bucket-27200-lwx4cfvcue")
      .build();

    // Construct an instance of the FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById model
    FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById flowLogCollectorTargetPrototypeModel = new FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById.Builder()
      .id("10c02d81-0ecb-4dc5-897d-28392913b81e")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateFlowLogCollectorOptions model
    CreateFlowLogCollectorOptions createFlowLogCollectorOptionsModel = new CreateFlowLogCollectorOptions.Builder()
      .storageBucket(legacyCloudObjectStorageBucketIdentityModel)
      .target(flowLogCollectorTargetPrototypeModel)
      .active(false)
      .name("my-flow-log-collector")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createFlowLogCollector() with a valid options model and verify the result
    Response<FlowLogCollector> response = vpcService.createFlowLogCollector(createFlowLogCollectorOptionsModel).execute();
    assertNotNull(response);
    FlowLogCollector responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createFlowLogCollectorPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createFlowLogCollector operation with and without retries enabled
  @Test
  public void testCreateFlowLogCollectorWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateFlowLogCollectorWOptions();

    vpcService.disableRetries();
    testCreateFlowLogCollectorWOptions();
  }

  // Test the createFlowLogCollector operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateFlowLogCollectorNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createFlowLogCollector(null).execute();
  }

  // Test the deleteFlowLogCollector operation with a valid options model parameter
  @Test
  public void testDeleteFlowLogCollectorWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteFlowLogCollectorPath = "/flow_log_collectors/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteFlowLogCollectorOptions model
    DeleteFlowLogCollectorOptions deleteFlowLogCollectorOptionsModel = new DeleteFlowLogCollectorOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteFlowLogCollector() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteFlowLogCollector(deleteFlowLogCollectorOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteFlowLogCollectorPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteFlowLogCollector operation with and without retries enabled
  @Test
  public void testDeleteFlowLogCollectorWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteFlowLogCollectorWOptions();

    vpcService.disableRetries();
    testDeleteFlowLogCollectorWOptions();
  }

  // Test the deleteFlowLogCollector operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteFlowLogCollectorNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteFlowLogCollector(null).execute();
  }

  // Test the getFlowLogCollector operation with a valid options model parameter
  @Test
  public void testGetFlowLogCollectorWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"auto_delete\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"lifecycle_state\": \"stable\", \"name\": \"my-flow-log-collector\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"storage_bucket\": {\"name\": \"bucket-27200-lwx4cfvcue\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"resource_type\": \"network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getFlowLogCollectorPath = "/flow_log_collectors/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetFlowLogCollectorOptions model
    GetFlowLogCollectorOptions getFlowLogCollectorOptionsModel = new GetFlowLogCollectorOptions.Builder()
      .id("testString")
      .build();

    // Invoke getFlowLogCollector() with a valid options model and verify the result
    Response<FlowLogCollector> response = vpcService.getFlowLogCollector(getFlowLogCollectorOptionsModel).execute();
    assertNotNull(response);
    FlowLogCollector responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getFlowLogCollectorPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getFlowLogCollector operation with and without retries enabled
  @Test
  public void testGetFlowLogCollectorWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetFlowLogCollectorWOptions();

    vpcService.disableRetries();
    testGetFlowLogCollectorWOptions();
  }

  // Test the getFlowLogCollector operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetFlowLogCollectorNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getFlowLogCollector(null).execute();
  }

  // Test the updateFlowLogCollector operation with a valid options model parameter
  @Test
  public void testUpdateFlowLogCollectorWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"auto_delete\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689\", \"id\": \"39300233-9995-4806-89a5-3c1b6eb88689\", \"lifecycle_state\": \"stable\", \"name\": \"my-flow-log-collector\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"storage_bucket\": {\"name\": \"bucket-27200-lwx4cfvcue\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-network-interface\", \"resource_type\": \"network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateFlowLogCollectorPath = "/flow_log_collectors/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the FlowLogCollectorPatch model
    FlowLogCollectorPatch flowLogCollectorPatchModel = new FlowLogCollectorPatch.Builder()
      .active(true)
      .name("my-flow-log-collector")
      .build();
    Map<String, Object> flowLogCollectorPatchModelAsPatch = flowLogCollectorPatchModel.asPatch();

    // Construct an instance of the UpdateFlowLogCollectorOptions model
    UpdateFlowLogCollectorOptions updateFlowLogCollectorOptionsModel = new UpdateFlowLogCollectorOptions.Builder()
      .id("testString")
      .flowLogCollectorPatch(flowLogCollectorPatchModelAsPatch)
      .build();

    // Invoke updateFlowLogCollector() with a valid options model and verify the result
    Response<FlowLogCollector> response = vpcService.updateFlowLogCollector(updateFlowLogCollectorOptionsModel).execute();
    assertNotNull(response);
    FlowLogCollector responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateFlowLogCollectorPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), version);
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateFlowLogCollector operation with and without retries enabled
  @Test
  public void testUpdateFlowLogCollectorWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateFlowLogCollectorWOptions();

    vpcService.disableRetries();
    testUpdateFlowLogCollectorWOptions();
  }

  // Test the updateFlowLogCollector operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateFlowLogCollectorNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateFlowLogCollector(null).execute();
  }

  // Perform setup needed before each test method
  @BeforeMethod
  public void beforeEachTest() {
    // Start the mock server.
    try {
      server = new MockWebServer();
      server.start();
    } catch (IOException err) {
      fail("Failed to instantiate mock web server");
    }

    // Construct an instance of the service
    constructClientService();
  }

  // Perform tear down after each test method
  @AfterMethod
  public void afterEachTest() throws IOException {
    server.shutdown();
    vpcService = null;
  }

  // Creates a mock set of environment variables that are returned by EnvironmentUtils.getenv()
  private Map<String, String> getTestProcessEnvironment() {
    Map<String, String> env = new HashMap<>();
    env.put("TESTSERVICE_AUTH_TYPE", "noAuth");
    return env;
  }

  // Constructs an instance of the service to be used by the tests
  public void constructClientService() {
    PowerMockito.spy(EnvironmentUtils.class);
    PowerMockito.when(EnvironmentUtils.getenv()).thenReturn(getTestProcessEnvironment());
    final String serviceName = "testService";
    // set mock values for global params
    String version = "testString";

    vpcService = Vpc.newInstance(serviceName);
    String url = server.url("/").toString();
    vpcService.setServiceUrl(url);
  }
}